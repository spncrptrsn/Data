Version 1
SubGoalCombiner SGC_AND
INITSECTION
//Databases used:
/*
DB_Arena_RM_SurfacesAtTurn((INTEGER)_Round, (STRING)_Identifier);  CURRENTLY DISABLED.
DB_Arena_RM_Surfaces((STRING)_Identifier, (GUIDSTRING)_Trigger, (STRING)_SurfaceType, (REAL)_Radius, (REAL)_Duration)
At round _Round, creatures surface of type _Surfacetype around each _Trigger with the specified _Identifier.

DB_Arena_RM_StatusAtTurn((INTEGER)_Round, (STRING)_Status, (INTEGER)_Duration, (STRING)_Effect[, (INTEGER)_Affected])
At round _Round, applies the _Status for _Duration turns to all characters in combat.
The optional parameter _Affected determines who is affected:
0 (Default): Only players.
1: Players and Summons, but not Totems.
2: Players, Summons, and Totems.

DB_Arena_RM_CoupledStatusAtTurn((INTEGER)_Round, (STRING)_Status, (REAL)_Duration, (STRING)_Effect, (STRING)_Effect2)
At round _Round, selects random pairs of players and applies _Status as if applied by one member of each couple to the other.
WARNING: The Warning text is currently hardcoded to display 'Shackles Of Pain'. Script & code will require changes if other statuses are added.

DB_Arena_RM_ExplodeBarrelsAtTurn((INTEGER)_Round)
Explodes all barrels in the level at _Round.

DB_Arena_RM_SpawnAtCharactersAtTurn((INTEGER)_Round, (STRING)_RootTemplate) CURRENTLY DISABLED.
Spawns an item of root template _RootTemplate at round _Round near each character.

DB_Arena_RM_RegenerateTreasureAtTurn((INTEGER)_Round)
DB_Arena_RM_ChestTreasures((STRING)_RootTemplate, (STRING)_TreasureTable)
At round _Round, iterates over all items. If they are of root template _RootTemplate, destroys whatever was inside them and generates _Treasure.

DB_Arena_RM_GivePyramidsAtTurn((INTEGER)_Round)
Hands out up to four pyramids to up to four random characters on round _Round.

DB_Arena_RM_LavaEruptionAtTurn((INTEGER)_Round)
Spawns effects on the active characters' locations one round before _Round, then on _Round drops lava boulders on them.

DB_Arena_RM_SuddenDeathAtTurn((INTEGER)_Round)
Drops all character's HP to 1 at the start of round _Round.
*/

DB_Arena_RM_ChestTreasures("CONT_ArenaChest_Blue_dfd71bb8-6190-4c0f-86e1-3222a7c3507e", "RewardSmall");
DB_Arena_RM_ChestTreasures("CONT_ArenaChest_Control_74046de9-5b3a-4031-88ee-23af9d19e219", "ArenaLoot_Control");
DB_Arena_RM_ChestTreasures("CONT_ArenaChest_Green_0ace0bc7-545c-47e4-a68d-efc4df08a1dc", "RewardSmall");
DB_Arena_RM_ChestTreasures("CONT_ArenaChest_Nuke_83904808-2d95-4566-9891-14cd0d39f89f", "ArenaLoot_Nuke");
DB_Arena_RM_ChestTreasures("CONT_ArenaChest_Red_dca4ff7a-c916-4e3a-968c-54adef3b10e2", "RewardSmall");
DB_Arena_RM_ChestTreasures("CONT_ArenaChest_Source_6df2d8af-1699-4b3b-9816-945d2482e8e3", "ArenaLoot_Source");
DB_Arena_RM_ChestTreasures("CONT_ArenaChest_Teal_6cd6d7b0-114f-4b7d-8625-79c68d135d1d", "RewardSmall");
DB_Arena_RM_ChestTreasures("CONT_ArenaChest_Yellow_5c083c73-06a7-40be-a0a1-75f039f18800", "RewardSmall");
DB_Arena_RM_ChestTreasures("NDL_ArenaChest_109b6cc0-90c8-4741-95b2-bcd5c9967abe", "NDL_Arena_CentralChest");

DB_Arena_RM_GivePyramidTemplates(1, "UNI_Teleport_Pyramid_A_09cb89b1-e64e-488b-bcdc-c4de61a51184");
DB_Arena_RM_GivePyramidTemplates(2, "UNI_Teleport_Pyramid_B_9e7a4ee9-4034-4496-8038-5cf517dd324e");
DB_Arena_RM_GivePyramidTemplates(3, "UNI_Teleport_Pyramid_C_89f52c23-d19f-42a5-8a21-7e2bac96e115");
DB_Arena_RM_GivePyramidTemplates(4, "UNI_Teleport_Pyramid_D_f2abd255-7871-4804-aa2c-f6bbbdd8cf21");
KBSECTION
//REGION Debug On/Off
IF
TextEventSet("MutateRoundsOn") // TODO: Replace by in-game UI element.
AND
Random(6, _Random)
THEN
DB_Arena_RM_StatusAtTurn(2, "WINGS", 1, "RS3_FX_GP_Impacts_Arena_PillarLight_01_Orange");
PROC_Arena_RM_CombatMutator(_Random, 4);
DB_Arena_RM_StatusAtTurn(6, "APOTHEOSIS", 1, "RS3_FX_GP_Impacts_Arena_PillarLight_01_Gold");
DB_Arena_RM_SuddenDeathAtTurn(7);
//END_REGION

//REGION Mutators Selection

//REGION Register Mutators
IF
OnMutatorEnabledAtTurn("MovementMutators", _Turn)
THEN
DB_Arena_RM_StatusAtTurn(_Turn, "WINGS", 1, "RS3_FX_GP_Impacts_Arena_PillarLight_01_Orange");

IF
OnMutatorEnabledAtTurn("CombatMutators", _Turn)
AND
Random(6, _Random)
THEN
PROC_Arena_RM_CombatMutator(_Random, _Turn);

IF
OnMutatorEnabledAtTurn("SourceMutators", _Turn)
THEN
DB_Arena_RM_StatusAtTurn(_Turn, "APOTHEOSIS", 1, "RS3_FX_GP_Impacts_Arena_PillarLight_01_Gold");

IF
OnMutatorEnabledAtTurn("SuddenDeathMutator", _Turn)
THEN
DB_Arena_RM_SuddenDeathAtTurn(_Turn);
//END_REGION


//REGION Combat mutators
PROC
PROC_Arena_RM_CombatMutator(0, (INTEGER)_Turn)
THEN
DB_Arena_RM_StatusAtTurn(_Turn, "DOUBLE_DAMAGE", 1, "RS3_FX_GP_Impacts_Arena_PillarLight_01_Red", 2);

PROC
PROC_Arena_RM_CombatMutator(1, _Turn)
THEN
DB_Arena_RM_StatusAtTurn(_Turn, "SHED_SKIN", 1, "RS3_FX_GP_Impacts_Arena_PillarLight_01_Blue", 1);

PROC
PROC_Arena_RM_CombatMutator(2, _Turn)
THEN
DB_Arena_RM_ExplodeBarrelsAtTurn(_Turn);

PROC
PROC_Arena_RM_CombatMutator(3, _Turn)
THEN
DB_Arena_RM_RegenerateTreasureAtTurn(_Turn);

PROC
PROC_Arena_RM_CombatMutator(4, _Turn)
THEN
DB_Arena_RM_CoupledStatusAtTurn(_Turn, "SHACKLES_OF_PAIN", 1, "RS3_FX_GP_Impacts_Arena_PillarLight_01_Blue", "RS3_FX_GP_Impacts_Arena_PillarLight_01_Red");

PROC
PROC_Arena_RM_CombatMutator(5, _Turn)
THEN
DB_Arena_RM_LavaEruptionAtTurn(_Turn);
//END_REGION

//END_REGION

//REGION Clear statuses & paired statuses
IF
CharacterStatusApplied(_Character, _Status, _)
AND
DB_Arena_RM_ClearAtTurn(_Character, _Status, _ClearRound, 1)
THEN
NOT DB_Arena_RM_ClearAtTurn(_Character, _Status, _ClearRound, 1);//Character got the status from a different source than a mutator.

IF
CharacterStatusApplied(_Character, _Status, _)
AND
DB_Arena_RM_ClearAtTurn(_Character, _Status, _ClearRound, 0)
THEN
NOT DB_Arena_RM_ClearAtTurn(_Character, _Status, _ClearRound, 0);
DB_Arena_RM_ClearAtTurn(_Character, _Status, _ClearRound, 1);//Character has gotten the status from a different source.

IF
CombatRoundStarted(_Combat, _ClearRound)
AND
DB_Arena_RM_ClearAtTurn(_Character, _Status, _ClearRound, _)
THEN
RemoveStatus(_Character, _Status);
//END_REGION

//REGION Apply status to all characters.
IF
DB_Arena_RM_StatusAtTurn((INTEGER)_Round, (STRING)_Status, (INTEGER)_Duration, (STRING)_Effect)
THEN
DB_Arena_RM_StatusAtTurn(_Round, _Status, _Duration, _Effect, 0);

IF
DB_Arena_RM_StatusAtTurn(_Round, _Status, _, _, 0)
AND
IntegerSubtract(_Round, 1, _WarningRound)
THEN
DB_Arena_RM_Warning(_WarningRound, 1, _Status); //All players.
DB_Arena_RM_SingleAnnouncement(_Round, 1, _Status);

IF
DB_Arena_RM_StatusAtTurn(_Round, _Status, _, _, _Affected)
AND
_Affected != 0
AND
IntegerSubtract(_Round, 1, _WarningRound)
THEN
DB_Arena_RM_Warning(_WarningRound, 2, _Status); //All characters.
DB_Arena_RM_SingleAnnouncement(_Round, 2, _Status);

IF
CombatRoundStarted(_Combat, _Round)
AND
DB_Arena_RM_StatusAtTurn((INTEGER)_Round, (STRING)_Status, (INTEGER)_Duration, (STRING)_Effect, 2)
AND
DB_CombatCharacters(_Character, _Combat)
THEN
PROC_Arena_RM_ApplyStatus(_Character, _Status, _Effect, _Duration, _Round);

IF
CombatRoundStarted(_Combat, _Round)
AND
DB_Arena_RM_StatusAtTurn((INTEGER)_Round, (STRING)_Status, (INTEGER)_Duration, (STRING)_Effect, 1)
AND
DB_CombatCharacters(_Character, _Combat)
THEN
PROC_Arena_RM_ApplyStatus(_Character, _Status, _Effect, _Duration, _Round);

IF
CombatRoundStarted(_Combat, _Round)
AND
DB_Arena_RM_StatusAtTurn((INTEGER)_Round, (STRING)_Status, (INTEGER)_Duration, (STRING)_Effect, 0)
AND
DB_ArenaTeamChampions(_Character, _)
THEN
PROC_Arena_RM_ApplyStatus(_Character, _Status, _Effect, _Duration, _Round);

PROC
PROC_Arena_RM_ApplyStatus((GUIDSTRING)_Character, (STRING)_Status, (STRING)_Effect, (INTEGER)_Duration, (INTEGER)_Round)
AND
IntegerProduct(_Duration, 6, _Seconds)
AND
Real(_Seconds, _RealSeconds)
AND
IntegerSum(_Round, _Duration, _ClearRound)
AND
NOT QRY_Arena_RM_HasStatusWithDurationMoreThan(_Character, (STRING)_Status, (INTEGER)_Duration)
THEN
PlayEffect(_Character, _Effect);
ApplyStatus(_Character, _Status, _RealSeconds, 1, NULL_00000000-0000-0000-0000-000000000000);
DB_Arena_RM_ClearAtTurn(_Character, _Status, _ClearRound, 0);
//END_REGION

//REGION Apply paired statuses to pairs of players.
IF
DB_Arena_RM_CoupledStatusAtTurn(_Round, _, _, _, _)
AND
IntegerSubtract(_Round, 1, _WarningRound)
THEN
DB_Arena_RM_Warning(_WarningRound, 0, "RM_Warning_CoupledStatusWarning");
DB_Arena_RM_SingleAnnouncement(_Round, 0, "RM_Warning_CoupledStatusWarning");

IF
CombatRoundStarted(_Combat, _Round)
AND
DB_Arena_RM_CoupledStatusAtTurn((INTEGER)_Round, (STRING)_Status, (INTEGER)_Duration, (STRING)_Effect1, (STRING)_Effect2)
THEN
PROC_Arena_RM_CreateRandomPlayerCandidates();
PROC_Arena_RM_CreateRandomPlayerCouples();

IF
CombatRoundStarted(_Combat, _Round)
AND
DB_Arena_RM_CoupledStatusAtTurn(_Round, _Status, _Duration, _Effect1, _Effect2)
AND
DB_Arena_RM_RandomPlayerCouple(_Player1, _Player2)
AND
IntegerProduct(_Duration, 6, _Seconds)
AND
Real(_Seconds, _RealSeconds)
AND
IntegerSum(_Round, _Duration, _ClearRound)
AND
NOT QRY_Arena_RM_HasStatusWithDurationMoreThan(_Player1, (STRING)_Status, (INTEGER)_Duration)
THEN
PlayEffect(_Player1, _Effect1);
PlayEffect(_Player2, _Effect2);
ApplyStatus(_Player1, _Status, _RealSeconds, 1, _Player2);
NOT DB_Arena_RM_RandomPlayerCouple(_Player1, _Player2);
DB_Arena_RM_ClearAtTurn((CHARACTERGUID)_Player1, _Status, _ClearRound, 0);
//END_REGION


/*
//REGION Create surface at triggers.
IF
DB_Arena_RM_SurfacesAtTurn(_Round, _)
AND
IntegerSubtract(_Round, 1, _WarningRound)
THEN
DB_Arena_RM_Warning(_WarningRound, "RM_Warning_SurfaceWarning");//Todo: Add status parameter.

IF
CombatRoundStarted(_, _Round)
AND
DB_Arena_RM_SurfacesAtTurn((INTEGER)_Round, (STRING)_Identifier)
AND
DB_Arena_RM_Surfaces((STRING)_Identifier, (GUIDSTRING)_Trigger, (STRING)_Surface, (REAL)_Radius, (REAL)_Duration)
THEN
CreateSurface(_Trigger, _Surface, _Radius, _Duration);
//END_REGION
*/

//REGION Regenerate treasure.

//REGION Keeping track of which chests have already been opened
IF
ItemOpened(_Chest)
AND
GetTemplate(_Chest, _Template)
AND
DB_Arena_RM_ChestTreasures(_Template, _Treasure)
THEN
DB_Arena_RM_OpenedChest(_Chest, _Treasure);

IF
ItemMoved(_Chest)
AND
GetTemplate(_Chest, _Template)
AND
DB_Arena_RM_ChestTreasures(_Template, _Treasure)
THEN
DB_Arena_RM_OpenedChest(_Chest, _Treasure);

PROC
ProcBlockPickupOfItem(_, _Chest)
AND
GetTemplate(_Chest, _Template)
AND
DB_Arena_RM_ChestTreasures(_Template, _Treasure)
THEN
DB_Arena_RM_OpenedChest(_Chest, _Treasure);

//END_REGION

IF
DB_Arena_RM_RegenerateTreasureAtTurn((INTEGER)_Round)
AND
IntegerSubtract(_Round, 1, _WarningRound)
THEN
DB_Arena_RM_Warning(_WarningRound, 0, "RM_Warning_TreasureWarning");
DB_Arena_RM_SingleAnnouncement(_Round, 0, "RM_Warning_TreasureWarning");

IF
CombatRoundStarted(_, _Round)
AND
DB_Arena_RM_RegenerateTreasureAtTurn(_Round)
THEN
GlobalClearFlag("Arena_RM_RegenerateTreasure");
GlobalSetFlag("Arena_RM_RegenerateTreasure"); // Activates gamescript, which can iterate over all active items.

IF
CombatRoundStarted(_, _Round)
AND
DB_Arena_RM_RegenerateTreasureAtTurn(_Round)
AND
DB_Arena_RM_OpenedChest(_Chest, _Treasure)
THEN
InventoryLaunchIterator(_Chest, "Arena_RM_EmptyChest", "");
GenerateTreasure(_Chest, _Treasure, 10, NULL_00000000-0000-0000-0000-000000000000);

IF
CombatRoundStarted(_, _Round)
AND
DB_Arena_RM_RegenerateTreasureAtTurn(_Round)
AND
DB_CombatCharacters(_Character, _Combat)
THEN
InventoryLaunchIterator(_Character, "Arena_RM_TryRegenerateTreasure", "");

IF
StoryEvent((ITEMGUID)_Item, "Arena_RM_TryRegenerateTreasure")
THEN
InventoryLaunchIterator(_Item, "Arena_RM_TryRegenerateTreasure", "");

IF
StoryEvent((ITEMGUID)_Item, "Arena_RM_EmptyChest")
THEN
ItemRemove(_Item);

IF
StoryEvent((ITEMGUID)_Item, "Arena_RM_TryRegenerateTreasure")
AND
GetTemplate(_Item, _Template)
AND
DB_Arena_RM_ChestTreasures(_Template, _Treasure)
AND
ItemIsInInventory(_Item, 0)
THEN
PlayEffect(_Item, "RS3_FX_GP_Impacts_Arena_PillarLight_01_Silver");


IF
StoryEvent((ITEMGUID)_Item, "Arena_RM_TryRegenerateTreasure")
AND
GetTemplate(_Item, _Template)
AND
DB_Arena_RM_ChestTreasures(_Template, _Treasure)
AND
ItemIsInInventory(_Item, 1)
AND
GetInventoryOwner(_Item, _Target)
THEN
PlayEffect( _Target, "RS3_FX_GP_Impacts_Arena_PillarLight_01_Silver");
//END_REGION

/*
//REGION Spawn item at character
IF
DB_Arena_RM_SpawnAtCharactersAtTurn(_Round, _)
AND
IntegerSubtract(_Round, 1, _WarningRound)
THEN
DB_Arena_RM_Warning(_WarningRound, "RM_Warning_SpawnWarning");//Todo: Add status parameter.

IF
CombatRoundStarted(_Combat, _Round)
AND
DB_Arena_RM_SpawnAtCharactersAtTurn((INTEGER)_Round, (STRING)_Template)
AND
DB_CombatCharacters(_Character, _Combat)
AND
GetPosition(_Character, _X, _Y, _Z)
AND
CreateItemTemplateAtPosition(_Template, _X, _Y, _Z, _Item)
THEN
DB_Arena_RM_SpawnedAt(_Item, _X, _Y, _Z);
ItemScatterAt((ITEMGUID)_Item, _X, _Y, _Z);

IF
ItemMoved(_Item)
AND
DB_Arena_RM_SpawnedAt(_Item, _X, _Y, _Z)
AND
GetDistanceToPosition(_Item, _X, _Y, _Z, _Dist)
AND
_Dist <= 0.2
THEN
ItemScatterAt((ITEMGUID)_Item, _X, _Y, _Z);

IF
ItemMoved(_Item)
AND
DB_Arena_RM_SpawnedAt(_Item, _X, _Y, _Z)
THEN
NOT DB_Arena_RM_SpawnedAt(_Item, _X, _Y, _Z);
//END_REGION
*/

//REGION Hand Out Pyramids to players
IF
DB_Arena_RM_GivePyramidsAtTurn(_Round)
AND
IntegerSubtract(_Round, 1, _WarningRound)
THEN
DB_Arena_RM_Warning(_WarningRound, 0, "RM_Warning_GivePyramidsWarning");
DB_Arena_RM_SingleAnnouncement(_Round, 0, "RM_Warning_GivePyramidsWarning");

IF
CombatRoundStarted(_Combat, _Round)
AND
DB_Arena_RM_GivePyramidsAtTurn((INTEGER)_Round)
AND
DB_Arena_RM_Pyramid(_Index, _Pyramid)
AND
ObjectExists(_Pyramid, 0)
THEN
NOT DB_Arena_RM_Pyramid(_Index, _Pyramid);

IF
CombatRoundStarted(_Combat, _Round)
AND
DB_Arena_RM_GivePyramidsAtTurn(_Round)
AND
DB_Arena_RM_GivePyramidTemplates(_Index, _Template)
AND
NOT DB_Arena_RM_Pyramid(_Index, _)
AND
CreateItemTemplateAtPosition(_Template, 0.0, 0.0, 0.0, _Pyramid)
THEN
DB_Arena_RM_Pyramid(_Index, _Pyramid);

IF
CombatRoundStarted(_Combat, _Round)
AND
DB_Arena_RM_GivePyramidsAtTurn(_Round)
THEN
PROC_Arena_RM_CreateRandomPlayerCandidates();

IF
CombatRoundStarted(_Combat, _Round)
AND
DB_Arena_RM_GivePyramidsAtTurn(_Round)
AND
DB_Arena_RM_Pyramid(_, _Pyramid)
AND
QRY_Arena_RM_RandomPlayer()
AND
DB_Arena_RM_RandomPlayer(_Player)
THEN
SetOnStage(_Pyramid, 1);
ItemToInventory(_Pyramid, _Player, 1, 1, 1);
PlayEffect(_Player, "RS3_FX_GP_Impacts_Arena_PillarLight_01_Gold");
EnablePyramid(_Pyramid);

IF
CombatRoundStarted(_Combat, _Round)
AND
DB_Arena_RM_GivePyramidsAtTurn(_Round)
AND
DB_Arena_RM_Pyramid(_, _Pyramid)
AND
ItemIsInInventory(_Pyramid, 0)
THEN
SetOnStage(_Pyramid, 0);
DisablePyramid(_Pyramid);
//END_REGION

//REGION Explode barrels
IF
DB_Arena_RM_ExplodeBarrelsAtTurn(_Round)
AND
IntegerSubtract(_Round, 1, _WarningRound)
THEN
DB_Arena_RM_Warning(_WarningRound, 0, "RM_Warning_ExplodeBarrelsWarning");
DB_Arena_RM_SingleAnnouncement(_Round, 0, "RM_Warning_ExplodeBarrelsWarning");

IF
CombatRoundStarted(_Combat, _Round)
AND
DB_Arena_RM_ExplodeBarrelsAtTurn((INTEGER)_Round)
THEN
GlobalSetFlag("Arena_RM_ExplodeBarrels");
GlobalClearFlag("Arena_RM_ExplodeBarrels");

IF
CombatRoundStarted(_Combat, _Round)
AND
DB_Arena_RM_ExplodeBarrelsAtTurn(_Round)
AND
DB_CombatCharacters(_Character, _Combat)
THEN
InventoryLaunchIterator(_Character, "Arena_RM_TryExplodeBarrel", "");

IF
StoryEvent((ITEMGUID)_Item, "Arena_RM_TryExplodeBarrel")
AND
IsTagged(_Item, "BARRELS", 0)
THEN
InventoryLaunchIterator(_Item, "Arena_RM_TryExplodeBarrel", "");

IF
StoryEvent((ITEMGUID)_Item, "Arena_RM_TryExplodeBarrel")
AND
IsTagged(_Item, "BARRELS", 1)
AND
ItemIsInInventory(_Item, 0)
THEN
ApplyDamage(_Item, 50, "FIRE");
PlayEffect(_Item, "RS3_FX_GP_Impacts_Arena_PillarLight_01_Red");

IF
StoryEvent((ITEMGUID)_Item, "Arena_RM_TryExplodeBarrel")
AND
IsTagged(_Item, "BARRELS", 1)
AND
ItemIsInInventory(_Item, 1)
AND
GetInventoryOwner(_Item, _Owner)
THEN
TeleportTo(_Item, _Owner, "Arena_RM_BarrelToExplodeTeleported", 0, 0);

IF
StoryEvent((ITEMGUID)_Barrel, "Arena_RM_BarrelToExplodeTeleported")
THEN
ApplyDamage(_Barrel, 50, "FIRE");
PlayEffect(_Barrel, "RS3_FX_GP_Impacts_Arena_PillarLight_01_Red");
//END_REGION

//REGION Lava Eruptions
IF
DB_Arena_RM_LavaEruptionAtTurn(_Round)
AND
IntegerSubtract(_Round, 1, _WarningRound)
THEN
DB_Arena_RM_Warning(_WarningRound, 0, "RM_Warning_LavaEruption", -1);

IF
CombatRoundStarted(_Combat, _Round)
AND
IntegerSum(_Round, 1, _LaunchRound)
AND
DB_Arena_RM_LavaEruptionAtTurn((INTEGER)_LaunchRound)
AND
DB_CombatCharacters(_Character, _Combat)
AND
IsTagged(_Character, "TOTEM", 0)
AND
GetPosition(_Character, _X, _Y, _Z)
AND
DB_CurrentLevel(_Level)
THEN
DB_Arena_RM_LavaEruptionLauncher_Targets(_LaunchRound, _Character, _X, _Y, _Z);
PROC_LoopEffectAtPosition("RS3_FX_GP_Impacts_Arena_Warning_LavaMeteor_01", _Character, "DB_Arena_RM_LavaEruptionWarning", _Level);

IF
CombatRoundStarted(_Combat, _Round)
AND
DB_Arena_RM_LavaEruptionAtTurn((INTEGER)_Round)
THEN
NOT DB_OnlyOnce("Arena_RM_LavaEruption_OnlyOneHelper");

IF
CombatRoundStarted(_Combat, _Round)
AND
IntegerSum(_Round, 1, _LaunchRound)
AND
DB_Arena_RM_LavaEruptionAtTurn((INTEGER)_LaunchRound)
AND
DB_ArenaTeamChampions(_Champion,_)
AND
NOT DB_Dead(_Champion)
AND
QueryOnlyOnce("Arena_RM_LavaEruption_OnlyOneHelper")
AND
GetPosition(_Champion, _X, _Y, _Z)
AND
CreateItemTemplateAtPosition("Arena_RM_LavaEruptionHelper_359ec843-240a-43a2-a0b2-af9ed20687df", _X, _Y, _Z, _Item)
THEN
SetInArena( _Item, 1);
ProcSetInvulnerable( _Item, 1);
TeleportTo( _Item, _Champion, "", 0, 0);

IF
ObjectTurnStarted(_Item)
AND
GetTemplate(_Item, "Arena_RM_LavaEruptionHelper_359ec843-240a-43a2-a0b2-af9ed20687df")
AND
DB_Arena_RM_ActiveWarning(0, "RM_Warning_LavaEruption", -1)
THEN
NOT DB_Arena_RM_ActiveWarning(0, "RM_Warning_LavaEruption", -1);

IF
ObjectTurnStarted(_Item)
AND
GetTemplate(_Item, "Arena_RM_LavaEruptionHelper_359ec843-240a-43a2-a0b2-af9ed20687df")
THEN
SendArenaNotification(0, "RM_Announcement_LavaEruption", -1);

IF
ObjectTurnStarted(_Item)
AND
GetTemplate(_Item, "Arena_RM_LavaEruptionHelper_359ec843-240a-43a2-a0b2-af9ed20687df")
THEN
PROC_Arena_RM_LavaEruption_LaunchNext((ITEMGUID)_Item);

PROC
PROC_Arena_RM_LavaEruption_LaunchNext((ITEMGUID)_Item)
AND
DB_Arena_RM_LavaEruptionLauncher_Targets(_Round, _Target, _X, _Y, _Z)
AND
QueryOnlyOnce("Arena_RM_LavaEruption_PickTarget")
THEN
TeleportToPosition(_Item, _X, _Y, _Z, "", 0, 0);
ProcObjectTimer(_Item, "DB_Arena_RM_LavaEruptionDelay", 1500);
NOT DB_Arena_RM_LavaEruptionLauncher_Targets(_Round, _Target, _X, _Y, _Z);
PROC_StopLoopEffect(_Target, "DB_Arena_RM_LavaEruptionWarning");

PROC
ProcObjectTimerFinished(_Item, "DB_Arena_RM_LavaEruptionDelay")
THEN
CreateProjectileStrikeAt(_Item, "ProjectileStrike_Quest_Volcano_CaveIn", 10);
ProcObjectTimer(_Item, "DB_Arena_RM_LavaEruption_NextTurn", 1200);
NOT DB_OnlyOnce("Arena_RM_LavaEruption_PickTarget");

PROC
ProcObjectTimerFinished(_Item, "DB_Arena_RM_LavaEruption_NextTurn")
AND
SysCount("DB_Arena_RM_LavaEruptionLauncher_Targets",5,0)
THEN
ItemRemove((ITEMGUID)_Item);

PROC
ProcObjectTimerFinished(_Item, "DB_Arena_RM_LavaEruption_NextTurn")
AND
NOT SysCount("DB_Arena_RM_LavaEruptionLauncher_Targets",5,0)
THEN
PROC_Arena_RM_LavaEruption_LaunchNext((ITEMGUID)_Item);

//END_REGION

//REGION Sudden Death
IF
DB_Arena_RM_SuddenDeathAtTurn(_Round)
AND
IntegerSubtract(_Round, 1, _WarningRound)
THEN
DB_Arena_RM_Warning(_WarningRound, 0, "RM_Warning_SuddenDeathWarning");
DB_Arena_RM_SingleAnnouncement(_Round, 0, "RM_Warning_SuddenDeathWarning");

IF
CombatRoundStarted(_Combat, _Round)
AND
DB_Arena_RM_SuddenDeathAtTurn((INTEGER)_Round)
AND
DB_CombatCharacters(_Character, _Combat)
THEN
ApplyStatus((CHARACTERGUID)_Character, "DEATH_RESIST_TEMPT", -1.0, 1);

IF
CharacterStatusApplied(_Character, "DEATH_RESIST_TEMPT", _)
THEN
CharacterSetHitpointsPercentage((CHARACTERGUID)_Character, 0.0);
PlayEffect(_Character, "RS3_FX_GP_Impacts_Arena_HP_Dropping_01");


IF
CharacterReceivedDamage(_Character, _, _)
AND
HasActiveStatus(_Character, "DEATH_RESIST_TEMPT", 1)
THEN
RemoveStatus((CHARACTERGUID)_Character, "DEATH_RESIST_TEMPT");
//END_REGION

//REGION Announcements
IF
DB_Arena_RM_SingleAnnouncement(_Turn, _WarningType, _WarningParam)
THEN
DB_Arena_RM_SingleAnnouncement(_Turn, _WarningType, _WarningParam, 0);

IF
CombatRoundStarted(_Combat, _Round)
AND
DB_Arena_RM_SingleAnnouncement(_Round, _WarningType, _WarningParam, _Turns)
THEN
NOT DB_Arena_RM_SingleAnnouncement(_Round, _WarningType, _WarningParam, _Turns);
SendArenaNotification(_WarningType, _WarningParam, _Turns);

IF
CombatRoundStarted(_Combat, _Round)
AND
DB_Arena_RM_ActiveWarning(_WarningType, _WarningParam, _Turns)
THEN
NOT DB_Arena_RM_ActiveWarning(_WarningType, _WarningParam, _Turns);

IF
DB_Arena_RM_Warning(_Round, _WarningType, _WarningParam)
THEN
DB_Arena_RM_Warning(_Round, _WarningType, _WarningParam, 1);

IF
CombatRoundStarted(_Combat, _Round)
AND
DB_Arena_RM_Warning(_Round, _WarningType, _WarningParam, _Turns)
THEN
DB_Arena_RM_ActiveWarning(_WarningType, _WarningParam, _Turns);

IF
ObjectTurnStarted(_)
AND
DB_Arena_RM_ActiveWarning(_WarningType, _WarningParam, _Turns)
THEN
SendArenaNotification(_WarningType, _WarningParam, _Turns);
//END_REGION

//REGION Random player helper functions.
PROC
PROC_Arena_RM_CreateRandomPlayerCandidates()
AND
DB_ArenaTeamChampions(_Champion,_TeamID)
AND
NOT DB_Dead(_Champion)
THEN
DB_Arena_RM_RandomCandidates(_Champion);

PROC
PROC_Arena_RM_CreateRandomPlayerCouples()
AND
QRY_Arena_RM_RandomPlayer()
AND
DB_Arena_RM_RandomPlayer(_Player1)
AND
QRY_Arena_RM_RandomPlayer()
AND
DB_Arena_RM_RandomPlayer(_Player2)
THEN
DB_Arena_RM_RandomPlayerCouple(_Player1, _Player2);

PROC
PROC_Arena_RM_CreateRandomPlayerCouples()
AND
SysCount("DB_Arena_RM_RandomCandidates",1,_Int)
AND
_Int >= 1
THEN
PROC_Arena_RM_CreateRandomPlayerCouples();

QRY
QRY_Arena_RM_RandomPlayer()
AND
DB_Arena_RM_RandomPlayer(_Champion)
THEN
NOT DB_Arena_RM_RandomPlayer(_Champion);

QRY
QRY_Arena_RM_RandomPlayer()
AND
SysCount("DB_Arena_RM_RandomCandidates",1,_Int)
AND
Random(_Int, _RandomIndex)
AND
DB_Arena_RM_RandomCandidates(_Champion)
THEN
PROC_Arena_RM_TryRandomCandidate(_Champion, _RandomIndex);

QRY
QRY_Arena_RM_RandomPlayer()
AND
DB_Arena_RM_CurrentRandomIndex(_Number)
THEN
NOT DB_Arena_RM_CurrentRandomIndex(_Number);

PROC
PROC_Arena_RM_TryRandomCandidate((CHARACTERGUID)_Champion, (INTEGER)_RandomIndex)
AND
NOT DB_Arena_RM_CurrentRandomIndex(_)
THEN
DB_Arena_RM_CurrentRandomIndex(0);

PROC
PROC_Arena_RM_TryRandomCandidate((CHARACTERGUID)_Champion, (INTEGER)_RandomIndex)
AND
DB_Arena_RM_CurrentRandomIndex(_CurrentIndex)
AND
_CurrentIndex == _RandomIndex
THEN
NOT DB_Arena_RM_RandomCandidates(_Champion);
DB_Arena_RM_RandomPlayer(_Champion);

PROC
PROC_Arena_RM_TryRandomCandidate((CHARACTERGUID)_Champion, (INTEGER)_RandomIndex)
AND
DB_Arena_RM_CurrentRandomIndex(_CurrentIndex)
AND
IntegerSum(_CurrentIndex, 1, _NewIndex)
THEN
NOT DB_Arena_RM_CurrentRandomIndex(_CurrentIndex);
DB_Arena_RM_CurrentRandomIndex(_NewIndex);
//END_REGION

//REGION Helper query - check if character has a status with a duration of less than a given value
QRY
QRY_Arena_RM_HasStatusWithDurationMoreThan((GUIDSTRING)_Object, (STRING)_Status, (INTEGER)_Duration)
AND
HasActiveStatus(_Object, _Status, 1)
AND
GetStatusTurns(_Object, _Status, _Turns)
AND
_Turns >= _Duration
THEN
DB_NOOP(1);


QRY
QRY_Arena_RM_HasStatusWithDurationMoreThan((GUIDSTRING)_Object, (STRING)_Status, (INTEGER)_Duration)
AND
HasActiveStatus(_Object, _Status, 1)
AND
GetStatusTurns(_Object, _Status, _Turns)
AND
_Turns < 0
THEN
DB_NOOP(1);
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "ArenaModWrapper"

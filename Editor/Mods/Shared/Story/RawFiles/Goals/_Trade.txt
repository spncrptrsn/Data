Version 1
SubGoalCombiner SGC_AND
INITSECTION
DB_DoubleAttitudePrice(1, 2);
DB_DoubleAttitudePrice(2, 2);
DB_DoubleAttitudePrice(3, 3);
DB_DoubleAttitudePrice(4, 3);
DB_DoubleAttitudePrice(5, 4);
DB_DoubleAttitudePrice(6, 5);
DB_DoubleAttitudePrice(7, 6);
DB_DoubleAttitudePrice(8, 7);
DB_DoubleAttitudePrice(9, 12);
DB_DoubleAttitudePrice(10, 15);
DB_DoubleAttitudePrice(11, 20);
DB_DoubleAttitudePrice(12, 25);
DB_DoubleAttitudePrice(13, 30);
DB_DoubleAttitudePrice(14, 35);
DB_DoubleAttitudePrice(15, 40);
DB_DoubleAttitudePrice(16, 60);
DB_DoubleAttitudePrice(17, 65);
DB_DoubleAttitudePrice(18, 75);
DB_DoubleAttitudePrice(19, 85);
DB_DoubleAttitudePrice(20, 95);
// For 21 and higher
DB_DoubleAttitudePrice(21, 100);
KBSECTION
//REGION Creating and resetting TraderTreasure
PROC
GenTradeItems((CHARACTERGUID)_Player,(CHARACTERGUID)_Trader)
AND
NOT DB_TraderGeneratedTreasureForLevel(_Trader,_)
THEN
DB_TraderGeneratedTreasureForLevel(_Trader,0);

PROC
GenTradeItems((CHARACTERGUID)_Player,(CHARACTERGUID)_Trader)
AND
DB_TraderGeneratedTreasureForLevel(_Trader,_OldLevel)
AND
CharacterGetLevel(_Player,_NewLevel)
AND
_NewLevel > _OldLevel
THEN
NOT DB_TraderGeneratedTreasureForLevel(_Trader,_OldLevel);
DB_TraderGeneratedTreasureForLevel(_Trader,_NewLevel);
DoGenTradeItems(_Player,_Trader);

PROC
ProcClearTradeFacts((CHARACTERGUID)_Trader)
AND
DB_TraderGeneratedTreasureForLevel(_Trader,_OldLevel)
THEN
NOT DB_TraderGeneratedTreasureForLevel(_Trader,_OldLevel);

PROC	
GenTradeItems((CHARACTERGUID)_Player,(CHARACTERGUID)_Trader) 
AND
DB_LastTradeItemGeneration(_Trader,(INTEGER)_THLastGen) 
AND 
_THLastGen != 0 
AND		// check if last generation was long enough ago:
DB_Time(_,_,_TH) 
AND
IntegerSubtract(_TH,_THLastGen,_Delta) 
AND
_Delta >= 12
THEN	
DoGenTradeItems(_Player,_Trader);

// If not yet an inventory generated for this npc, do it:
PROC	
GenTradeItems((CHARACTERGUID)_Player,(CHARACTERGUID)_Npc) 
AND
DB_LastTradeItemGeneration(_Npc,0)		// not yet generated
THEN	
DoGenTradeItems(_Player,_Npc);

//
PROC	
DoGenTradeItems((CHARACTERGUID)_Player,(CHARACTERGUID)_Npc) 
AND 
DB_LastTradeItemGeneration(_Npc,_THLastGen)
THEN	
NOT DB_LastTradeItemGeneration(_Npc,_THLastGen);

//
PROC	
DoGenTradeItems((CHARACTERGUID)_Player,(CHARACTERGUID)_Npc) 
AND 
DB_Time(_,_,_TH)
THEN	
ProcGenerateTradeTreasure(_Player,_Npc);
DB_LastTradeItemGeneration(_Npc,_TH);

PROC
ProcClearGeneratedItems((CHARACTERGUID)_Npc)
AND
NOT DB_ItemsCleared(_Npc)
THEN
DB_ItemsCleared(_Npc);
CharacterClearTradeGeneratedItems(_Npc);

IF
DB_CustomTradeTreasure(_Npc,_Treasure)
THEN
ProcClearLastTradeTime(_Npc);

PROC
ProcClearLastTradeTime((CHARACTERGUID)_Trader)
AND
DB_LastTradeItemGeneration(_Trader,(INTEGER)_THLastGen) 
THEN
NOT DB_LastTradeItemGeneration(_Trader,_THLastGen);
DB_LastTradeItemGeneration(_Trader,0);

PROC
ProcGenerateTradeTreasure((CHARACTERGUID)_Player,(CHARACTERGUID)_Npc) 
AND
DB_CustomTradeTreasure((CHARACTERGUID)_Npc,(STRING)_Treasure)
THEN
ProcClearGeneratedItems(_Npc);
DB_CharacterGenerateCustomTradeTreasure(_Player,_Npc,_Treasure);
DB_TreasureGenerated(1);

PROC
ProcGenerateTradeTreasure((CHARACTERGUID)_Player,(CHARACTERGUID)_Npc) 
AND
NOT DB_TreasureGenerated(1)
THEN
GenerateItems(_Player,_Npc);

PROC
ProcGenerateTradeTreasure((CHARACTERGUID)_Player,(CHARACTERGUID)_Npc) 
THEN
NOT DB_TreasureGenerated(1);
NOT DB_ItemsCleared(_Npc);

//Trader dies and trade treasure never generated -> generate
IF
CharacterPrecogDying(_Npc)
AND
IsTagged(_Npc, "TRADER", 1)
AND
CharacterIsPlayer(_Npc, 0)
AND
NOT DB_TraderGeneratedTreasureForLevel(_Npc, _)
AND
GetClosestPlayer(_NPC, _Player, _)
THEN
ProcGenerateTradeTreasure(_Player, _Npc);
//END_REGION

//REGION Start Trade
//
// StartTrade: set all facts and startup the trade window:
//
PROC	
StartTrade((CHARACTERGUID)_Player,(CHARACTERGUID)_Npc)
THEN	
GenTradeItems(_Player,_Npc);					// regenerate items (clear if _Npc.DB_IsHostile())
ResetInsults(_Player,_Npc);

PROC	
StartTrade((CHARACTERGUID)_Player,(CHARACTERGUID)_Npc) 
THEN	
DoStartTrade_1(_Player,_Npc);

PROC	
DoStartTrade_1((CHARACTERGUID)_Player,(CHARACTERGUID)_Npc) 
AND
DB_NoRepair(_Npc) 
AND
DB_NoIdentify(_Npc)
THEN	
ActivateTrade(_Player,_Npc,0,0,1);

PROC	
DoStartTrade_1((CHARACTERGUID)_Player,(CHARACTERGUID)_Npc) 
AND
NOT DB_NoRepair(_Npc) 
AND
DB_NoIdentify(_Npc)
THEN	
ActivateTrade(_Player,_Npc,1,0,1);

PROC	
DoStartTrade_1((CHARACTERGUID)_Player,(CHARACTERGUID)_Npc) 
AND
DB_NoRepair(_Npc) 
AND
NOT DB_NoIdentify(_Npc)
THEN	
ActivateTrade(_Player,_Npc,0,1,1);

PROC	
DoStartTrade_1((CHARACTERGUID)_Player,(CHARACTERGUID)_Npc) 
AND
NOT DB_NoRepair(_Npc) 
AND
NOT DB_NoIdentify(_Npc)
THEN	
ActivateTrade(_Player,_Npc,1,1,1);

IF		
RequestTrade(_Player,_Npc)
THEN
StartTrade(_Player,_Npc);

PROC 
ResetInsults((CHARACTERGUID)_Player,(CHARACTERGUID)_Npc)
AND
DB_InsultCounter(_Player, _Npc, _Counter)
THEN
NOT DB_InsultCounter(_Player, _Npc, _Counter);

PROC 
ResetInsults((CHARACTERGUID)_Player,(CHARACTERGUID)_Npc)
THEN
DB_InsultCounter(_Player, _Npc, 0);

//END_REGION

//REGION Finish trade and adjust attitude if necessary
IF
HappyWithDeal(_Player,_Npc,_ValuePlayer,_ValueNpc)
AND
QRY_GetAttitudeChangeForTrade(_Player,_Npc,_ValuePlayer,_ValueNpc)
AND
DB_AttitudeAdjustMent(_Player,_Npc,_Att)
AND
_Att != 0
THEN
CharacterAddAttitudeTowardsPlayer(_Npc,_Player,_Att);

IF		
HappyWithDeal(_Player,_Npc,_ValuePlayer,_ValueNpc) 
AND
_ValuePlayer >= _ValueNpc
AND
DB_AttitudeAdjustMent(_Player,_Npc,_Att)
THEN	
ExecuteDeal(_Player,1,_Att);

IF		
HappyWithDeal(_Player,_Npc,_ValuePlayer,_ValueNpc) 
AND
_ValuePlayer < _ValueNpc
AND
DB_AttitudeAdjustMent(_Player,_Npc,_Att)
THEN	
ExecuteDeal(_Player,0,_Att);

QRY
QRY_GetAttitudeChangeForTrade((CHARACTERGUID)_Player,(CHARACTERGUID)_Npc,(INTEGER)_ValuePlayer,(INTEGER)_ValueNpc)
AND
NOT DB_TempTradeBalance(_Player,_Npc,_)
THEN
DB_TempTradeBalance(_Player,_Npc,0);

QRY
QRY_GetAttitudeChangeForTrade((CHARACTERGUID)_Player,(CHARACTERGUID)_Npc,(INTEGER)_ValuePlayer,(INTEGER)_ValueNpc)
AND
IntegerSubtract(_ValuePlayer,_ValueNPC,_Delta)
AND
DB_TempTradeBalance(_Player,_Npc,_OldBalance)
AND
IntegerSum(_Delta,_OldBalance,_NewBalance)
AND
CharacterGetLevel(_Npc,_NpcLevel)
AND
IntegerMin(_NpcLevel, 21, _NpcLevelCapped)
AND
DB_DoubleAttitudePrice(_NpcLevelCapped,_DoublePrice)// Working with doubles to allow us to work with halves in integer envirnoment
AND
IntegerSum(_NewBalance,_NewBalance,_DoubleBalance)
AND
IntegerDivide(_DoubleBalance,_DoublePrice,_Q) // 1 Attitude point costs (L+1)/2
AND
IntegerProduct(_Q,_DoublePrice,_DoubleSubtracted)
AND
// Map to [-1..1] to adjust for rounding before division by 2 (0 stays 0)
IntegerMax(_DoubleSubtracted, -1, _RoundToInfinityAdj1)
AND
IntegerMin(_RoundToInfinityAdj1, 1, _RoundToInfinityAdj)
AND
IntegerSum(_DoubleSubtracted,_RoundToInfinityAdj,_DoubleSubtractedIncremented)
AND
IntegerDivide(_DoubleSubtractedIncremented,2,_TotalSubtracted)
AND
IntegerSubtract(_NewBalance,_TotalSubtracted,_Remainder)
THEN
NOT DB_TempTradeBalance(_Player,_Npc,_OldBalance);
DB_TempTradeBalance(_Player,_Npc,_Remainder);
PROC_Trade_SetAttitudeAdjustment(_Player, _Npc, _Q);

PROC
PROC_Trade_SetAttitudeAdjustment((CHARACTERGUID)_Player, (CHARACTERGUID)_Npc, (INTEGER)_Q)
AND
DB_AttitudeAdjustMent(_Player,_Npc,_Att)
THEN
NOT DB_AttitudeAdjustMent(_Player,_Npc,_Att);

PROC
PROC_Trade_SetAttitudeAdjustment((CHARACTERGUID)_Player, (CHARACTERGUID)_Npc, (INTEGER)_Q)
AND
_Q >= 0
THEN
DB_AttitudeAdjustMent(_Player,_Npc,_Q);

PROC
PROC_Trade_SetAttitudeAdjustment((CHARACTERGUID)_Player, (CHARACTERGUID)_Npc, (INTEGER)_Q)
AND
_Q < 0
AND
DB_InsultCounter(_Player, _Npc, _InsultCount)
AND
_InsultCount < 2 // Player can insult trader with the offer 2 times before Attitude reduction kicks in
AND
IntegerSum(_InsultCount, 1, _NewInsultCount)
AND
DB_TempTradeBalance(_Player,_Npc,_Remainder)
THEN
DB_AttitudeAdjustMent(_Player,_Npc,0);
NOT DB_InsultCounter(_Player,_Npc,_InsultCount);
DB_InsultCounter(_Player,_Npc,_NewInsultCount);
// If we ignore the insult, don't keep track of the balance either
NOT DB_TempTradeBalance(_Player,_Npc,_Remainder);
DB_TempTradeBalance(_Player,_Npc,0);

PROC
PROC_Trade_SetAttitudeAdjustment((CHARACTERGUID)_Player, (CHARACTERGUID)_Npc, (INTEGER)_Q)
AND
_Q < 0
AND
NOT DB_AttitudeAdjustMent(_Player,_Npc,_)
AND
CharacterGetAttitudeTowardsPlayer(_Npc,_Player,_OldAtt)
AND
IntegerSubtract(_OldAtt,15,_NewAtt)
AND
IntegerMax(_NewAtt,-45,_NewAttCapped)
AND
IntegerSubtract(_NewAttCapped,_oldAtt,_NewDelta)
THEN
DB_AttitudeAdjustMent(_Player,_Npc,_NewDelta);
//END_REGION

//Start Trade via Event (instead of button click in dialog)
IF
ObjectFlagSet("StartTrade",(CHARACTERGUID)_Player,_Instance)
AND
DB_DialogNPCs(_Instance,_Npc,1)
THEN
StartTrade((CHARACTERGUID)_Player,(CHARACTERGUID)_Npc);
ObjectClearFlag(_Player,"StartTrade",_Instance);

//REGION Manual Trade Toggling Per Player

PROC
Proc_DialogFlagSetup(_,(GUIDSTRING)_NPC,(GUIDSTRING)_Player)
AND
DB_ManualTradeNPC(_NPC)
AND
DB_PreventTradeBetween(_NPC,_Player)
THEN
CharacterSetCanTrade((CHARACTERGUID)_NPC,0);

PROC
Proc_DialogFlagSetup(_,(GUIDSTRING)_NPC,(GUIDSTRING)_Player)
AND
IsTagged(_NPC,"GHOST",1)
THEN
CharacterSetCanTrade((CHARACTERGUID)_NPC,0);

IF
ObjectFlagSet("PreventTradeWithPlayer",(GUIDSTRING)_NPC,_ID)
AND
DialogGetInvolvedPlayer(_ID,1,(CHARACTERGUID)_Player)
THEN
DB_ManualTradeNPC(_NPC);
DB_PreventTradeBetween(_NPC,_Player);
ObjectClearFlag(_NPC,"PreventTradeWithPlayer",_ID);

PROC
Proc_DialogFlagSetup(_,(GUIDSTRING)_NPC,(GUIDSTRING)_Player)
AND
DB_ManualTradeNPC(_NPC)
AND
NOT DB_PreventTradeBetween(_NPC,_Player)
THEN
CharacterSetCanTrade((CHARACTERGUID)_NPC,1);
//END_REGION

//REGION Savegame patching
IF
SavegameLoaded(_Major,_Minor,_Rev,_Build)
AND
QRY_VersionIsOlderThan(_Major,_Minor,_Rev,_Build, 3, 6, 0, 0)
THEN
NOT DB_DoubleAttitudePriceOverTwenty(100);
DB_DoubleAttitudePrice(21, 100);
//END_REGION
EXITSECTION

ENDEXITSECTION

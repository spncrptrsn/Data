Version 1
SubGoalCombiner SGC_AND
INITSECTION
DB_InternalGroup_Count(0);

KBSECTION
PROC
CharacterGiveReward((CHARACTERGUID)_Player,(STRING)_Reward)
THEN
CharacterGiveReward(_Player,_Reward,1);

//REGION Defaults for item adding
PROC
ItemTemplateAddTo((STRING)_ItemTemplate, (GUIDSTRING)_Object, (INTEGER)_Count)
THEN
ItemTemplateAddTo(_ItemTemplate,_Object,_Count,1);

PROC
ItemToInventory((ITEMGUID)_Item,(GUIDSTRING)_Container)
THEN
ItemToInventory(_Item,_Container,1,1,1);

PROC
ItemToInventory((ITEMGUID)_Item, (GUIDSTRING)_TargetObject, (INTEGER)_Amount)
THEN
ItemToInventory(_Item, _TargetObject, _Amount, 1, 1);

PROC
ItemToInventory((ITEMGUID)_Item, (GUIDSTRING)_TargetObject, (INTEGER)_Amount, (INTEGER)_ShowNotification)
THEN
ItemToInventory(_Item, _TargetObject, _Amount, _ShowNotification, 1);

//END_REGION

//REGION Follow logic 
PROC
ProcCharacterFollowCharacter((CHARACTERGUID)_Char,(CHARACTERGUID)_Target)
THEN
ProcCharacterStopFollow(_Char);
DB_Following(_Char,_Target);
ProcCheckCombatFollow(_Char,_Target);

PROC
ProcCheckCombatFollow((CHARACTERGUID)_Char,(CHARACTERGUID)_Target)
AND
CombatGetIDForCharacter(_Char,0)
THEN
CharacterFollowCharacter(_Char,_Target);

PROC
ProcCharacterStopFollow((CHARACTERGUID)_Char)
AND
CharacterIsDead(_Char,0)
THEN
CharacterStopFollow(_Char);

PROC
ProcCharacterStopFollow((CHARACTERGUID)_Char)
AND
DB_Following(_Char,_Target)
THEN
NOT DB_Following(_Char,_Target);

IF
CharacterDying(_Char)
THEN
ProcCharacterStopFollow(_Char);

IF
ObjectEnteredCombat((CHARACTERGUID)_Obj,_)
AND
DB_Following(_Obj,_)
THEN
CharacterStopFollow(_Obj);

IF
ObjectLeftCombat((CHARACTERGUID)_Obj,_)
AND
DB_Following(_Obj,_Target)
THEN
CharacterFollowCharacter(_Obj,_Target);

//END_REGION

IF
DB_DoNotFace((GUIDSTRING)_Char)
THEN
CharacterSetDoNotFaceFlag((CHARACTERGUID)_Char,1);
DB_CheckDoNotFace(_Char);

IF
DB_CheckDoNotFace(_Char)
AND
NOT DB_DoNotFace(_Char)
THEN
CharacterSetDoNotFaceFlag((CHARACTERGUID)_Char,0);
NOT DB_CheckDoNotFace(_Char);

PROC
ProcFaceCharacter((GUIDSTRING)_Char,(GUIDSTRING)_Target)
AND
NOT DB_DoNotFace(_Char)
AND
ObjectIsCharacter(_Char,1)
AND
CharacterIsIncapacitated((CHARACTERGUID)_Char,0)
THEN
CharacterLookAt((CHARACTERGUID)_Char,_Target,0);

PROC
ProcFaceEachother((GUIDSTRING)_Char,(GUIDSTRING)_Target)
AND
NOT DB_DoNotFace(_Char)
AND
ObjectIsCharacter(_Char,1)
AND
CharacterIsIncapacitated((CHARACTERGUID)_Char,0)
THEN
CharacterLookAt((CHARACTERGUID)_Char,_Target,0);

PROC
ProcFaceEachother((GUIDSTRING)_Char,(GUIDSTRING)_Target)
AND
NOT DB_DoNotFace(_Target)
AND
ObjectIsCharacter(_Target,1)
AND
CharacterIsIncapacitated((CHARACTERGUID)_Target,0)
THEN
CharacterLookAt((CHARACTERGUID)_Target,_Char,0);

//REGION Internal Dialog Logic (Starting dialog by clicking on NPC)
PROC
ProcIncreaseInternalCount()
AND
DB_InternalGroup_Count(_Nr)
AND
IntegerSum(_Nr,1,_New)
THEN
NOT DB_InternalGroup_Count(_Nr);
DB_InternalGroup_Count(_New);

IF
DB_Dialogs((GUIDSTRING)_Npc,(STRING)_Dialog)
THEN
SetHasDialog(_Npc,1);
ProcIncreaseInternalCount();
ProcInteralCounterEntry(_Npc,_Dialog);

PROC
ProcInteralCounterEntry((GUIDSTRING)_Npc,(STRING)_Dialog)
AND
DB_InternalGroup_Count(_New)
THEN
DB_InternalCounter(_New,_Dialog,1);
DB_Internal_Dialogs(_Npc,_Dialog,_New,1);

IF
DB_Dialogs((GUIDSTRING)_Npc,(GUIDSTRING)_Npc2,(STRING)_Dialog)
THEN
SetHasDialog(_Npc,1);
SetHasDialog(_Npc2,1);
ProcIncreaseInternalCount();
ProcInteralCounterEntry(_Npc,_Npc2,_Dialog);

PROC
ProcInteralCounterEntry((GUIDSTRING)_Npc,(GUIDSTRING)_Npc2,(STRING)_Dialog)
AND
DB_InternalGroup_Count(_Group)
THEN
DB_InternalCounter(_Group,_Dialog,2);
DB_Internal_Dialogs(_Npc,_Dialog,_Group,1);
DB_Internal_Dialogs(_Npc2,_Dialog,_Group,2);

IF
DB_Dialogs((GUIDSTRING)_Npc,(GUIDSTRING)_Npc2,(GUIDSTRING)_Npc3,(STRING)_Dialog)
THEN
SetHasDialog(_Npc,1);
SetHasDialog(_Npc2,1);
SetHasDialog(_Npc3,1);
ProcIncreaseInternalCount();
ProcInteralCounterEntry(_Npc,_Npc2,_Npc3,_Dialog);

PROC
ProcInteralCounterEntry((GUIDSTRING)_Npc,(GUIDSTRING)_Npc2,(GUIDSTRING)_Npc3,(STRING)_Dialog)
AND
DB_InternalGroup_Count(_Group)
THEN
DB_InternalCounter(_Group,_Dialog,3);
DB_Internal_Dialogs(_Npc,_Dialog,_Group,1);
DB_Internal_Dialogs(_Npc2,_Dialog,_Group,2);
DB_Internal_Dialogs(_Npc3,_Dialog,_Group,3);

IF
DB_Dialogs((GUIDSTRING)_Npc,(GUIDSTRING)_Npc2,(GUIDSTRING)_Npc3,(GUIDSTRING)_Npc4,(STRING)_Dialog)
THEN
SetHasDialog(_Npc,1);
SetHasDialog(_Npc2,1);
SetHasDialog(_Npc3,1);
SetHasDialog(_Npc4,1);
ProcIncreaseInternalCount();
ProcInteralCounterEntry(_Npc,_Npc2,_Npc3,_Npc4,_Dialog);

PROC
ProcInteralCounterEntry((GUIDSTRING)_Npc,(GUIDSTRING)_Npc2,(GUIDSTRING)_Npc3,(GUIDSTRING)_Npc4,(STRING)_Dialog)
AND
DB_InternalGroup_Count(_Group)
THEN
DB_InternalCounter(_Group,_Dialog,4);
DB_Internal_Dialogs(_Npc,_Dialog,_Group,1);
DB_Internal_Dialogs(_Npc2,_Dialog,_Group,2);
DB_Internal_Dialogs(_Npc3,_Dialog,_Group,3);
DB_Internal_Dialogs(_Npc4,_Dialog,_Group,4);

PROC
ProcStartNPCDialog((GUIDSTRING)_Player,(STRING)_Dialog,(INTEGER)_Group)
AND
DB_InternalCounter(_Group,_Dialog,1)
AND
DB_Internal_Dialogs(_Npc,_Dialog,_Group,1)
THEN
Proc_StartDialog(0,_Dialog,_Npc,_Player);

PROC
ProcStartNPCDialog((GUIDSTRING)_Player,(STRING)_Dialog,(INTEGER)_Group)
AND
DB_InternalCounter(_Group,_Dialog,2)
AND
DB_Internal_Dialogs(_Npc,_Dialog,_Group,1)
AND
DB_Internal_Dialogs(_Npc2,_Dialog,_Group,2)
THEN
Proc_StartDialog(0,_Dialog,_Npc,_Npc2,_Player);

PROC
ProcStartNPCDialog((GUIDSTRING)_Player,(STRING)_Dialog,(INTEGER)_Group)
AND
DB_InternalCounter(_Group,_Dialog,3)
AND
DB_Internal_Dialogs(_Npc,_Dialog,_Group,1)
AND
DB_Internal_Dialogs(_Npc2,_Dialog,_Group,2)
AND
DB_Internal_Dialogs(_Npc3,_Dialog,_Group,3)
THEN
Proc_StartDialog(0,_Dialog,_Npc,_Npc2,_Npc3,_Player);

PROC
ProcStartNPCDialog((GUIDSTRING)_Player,(STRING)_Dialog,(INTEGER)_Group)
AND
DB_InternalCounter(_Group,_Dialog,4)
AND
DB_Internal_Dialogs(_Npc,_Dialog,_Group,1)
AND
DB_Internal_Dialogs(_Npc2,_Dialog,_Group,2)
AND
DB_Internal_Dialogs(_Npc3,_Dialog,_Group,3)
AND
DB_Internal_Dialogs(_Npc4,_Dialog,_Group,4)
THEN
Proc_StartDialog(0,_Dialog,_Npc,_Npc2,_Npc3,_Npc4,_Player);


PROC
NPCDialogStartRequested((GUIDSTRING)_Npc,(GUIDSTRING)_Player)
AND
DB_Internal_Dialogs(_Npc,_Dialog,_Group,1)
AND
NOT DB_TempRequested(_NPC,_,_)
THEN
DB_TempRequested(_NPC,_Dialog,_Group);

PROC
NPCDialogStartRequested((GUIDSTRING)_Npc,(GUIDSTRING)_Player)
AND
DB_Internal_Dialogs(_Npc,_Dialog,_Group,_)
AND
NOT DB_TempRequested(_NPC,_,_)
THEN
DB_TempRequested(_NPC,_Dialog,_Group);

PROC
NPCDialogStartRequested((GUIDSTRING)_Npc,(GUIDSTRING)_Player)
AND
NOT DB_TempRequested(_NPC,_,_)
AND
QRY_SpeakerIsAvailable(_Npc)
AND
QRY_SpeakerIsAvailable(_Player)
AND
ObjectIsCharacter(_Npc,1)
AND
HasDefaultDialog((CHARACTERGUID)_Npc,1)
THEN
DialogRequestStop(_Npc);
DialogRequestStop(_Player);
ProcTryStartDefaultDialog(_Npc,(CHARACTERGUID)_Player);

PROC
NPCDialogStartRequested((GUIDSTRING)_Npc,(GUIDSTRING)_Player)
AND
DB_TempRequested(_NPC,_Dialog,_Group)
THEN
NOT DB_TempRequested(_NPC,_Dialog,_Group);
ProcStartNPCDialog(_Player,_Dialog,_Group);

PROC
ProcTryStartDefaultDialog((CHARACTERGUID)_Npc,(CHARACTERGUID)_Player)
AND
StartDefaultDialog(_Npc,_Player,_Dialog,_Automated)
THEN
ProcHandleDefaultDialogSetting(_Npc,_Player,_Dialog,_Automated);

PROC
ProcHandleDefaultDialogSetting((CHARACTERGUID)_Npc,(CHARACTERGUID)_Player,(STRING)_Dialog,1)
THEN
ProcFaceCharacter(_Npc,_Player);
Proc_DialogFlagSetup(_Dialog,_Npc,_Player);

PROC
ProcHandleDefaultDialogSetting((CHARACTERGUID)_Npc,(CHARACTERGUID)_Player,(STRING)_Dialog,0)
THEN
Proc_DialogFlagSetup(_Dialog,_Npc,_Player);
ProcFaceCharacter(_Npc,_Player);
ProcFaceCharacter(_Player,_Npc);
ProcItemSetInvulnerableForDialog(_Npc);
ProcItemSetInvulnerableForDialog(_Player);
CharacterMakeStoryNpc(_Npc,1);
CharacterMakeStoryNpc(_Player,1);
DB_HasMetCharactersToCheck(_Npc,_Player);

//END_REGION

//REGION Internal Dialog Cleanup
PROC
ProcRemoveAllDialogEntriesForSpeaker((GUIDSTRING)_NPC)
AND
DB_Internal_Dialogs(_Npc,_Dialog,_Group,1)
THEN
ProcRemoveInternalDialogEntries(_Dialog,_Group);
ProcRemoveExternalDialogEntry(_Npc,_Dialog,_Group);

PROC
ProcRemoveDialogEntryForSpeaker((GUIDSTRING)_NPC,(STRING)_Dialog)
AND
DB_Internal_Dialogs(_Npc,_Dialog,_Group,1)
THEN
ProcRemoveInternalDialogEntries(_Dialog,_Group);
ProcRemoveExternalDialogEntry(_Npc,_Dialog,_Group);

//remove dialogs when an NPC dies.
IF
DB_Dead((CHARACTERGUID)_Npc)
AND
NOT DB_KeepDialogsOnDeath(_Npc)
AND
DB_Internal_Dialogs(_Npc,_Dialog,_Group,_Nr)
AND
DB_Internal_Dialogs(_FirstSpeaker,_Dialog,_Group,1)
THEN
ProcRemoveDialogEntryForSpeaker(_FirstSpeaker,_Dialog);

PROC
ProcRemoveExternalDialogEntry((GUIDSTRING)_Npc,(STRING)_Dialog,(INTEGER)_Group)
AND
DB_InternalCounter(_Group,_Dialog,1)
AND
DB_Dialogs(_Npc,_Dialog)
THEN
NOT DB_Dialogs(_Npc,_Dialog);
NOT DB_InternalCounter(_Group,_Dialog,1);

PROC
ProcRemoveExternalDialogEntry((GUIDSTRING)_Npc,(STRING)_Dialog,(INTEGER)_Group)
AND
DB_InternalCounter(_Group,_Dialog,2)
AND
DB_Dialogs(_Npc,_Npc2,_Dialog)
THEN
NOT DB_Dialogs(_Npc,_Npc2,_Dialog);
NOT DB_InternalCounter(_Group,_Dialog,2);

PROC
ProcRemoveExternalDialogEntry((GUIDSTRING)_Npc,(STRING)_Dialog,(INTEGER)_Group)
AND
DB_InternalCounter(_Group,_Dialog,3)
AND
DB_Dialogs(_Npc,_Npc2,_Npc3,_Dialog)
THEN
NOT DB_Dialogs(_Npc,_Npc2,_Npc3,_Dialog);
NOT DB_InternalCounter(_Group,_Dialog,3);

PROC
ProcRemoveExternalDialogEntry((GUIDSTRING)_Npc,(STRING)_Dialog,(INTEGER)_Group)
AND
DB_InternalCounter(_Group,_Dialog,4)
AND
DB_Dialogs(_Npc,_Npc2,_Npc3,_Npc4,_Dialog)
THEN
NOT DB_Dialogs(_Npc,_Npc2,_Npc3,_Npc4,_Dialog);
NOT DB_InternalCounter(_Group,_Dialog,4);

PROC
ProcRemoveInternalDialogEntries((STRING)_Dialog,(INTEGER)_Group)
AND
DB_Internal_Dialogs(_Npc,_Dialog,_Group,_Nr)
THEN
NOT DB_Internal_Dialogs(_Npc,_Dialog,_Group,_Nr);
//END_REGION

//REGION Start Dialog with 1 Item 
IF
CharacterUsedItem(_Player,_Item)
AND
DB_Dialogs(_Item,_Dialog)
AND
DB_CombatCharacters(_Player, _)
AND
NOT DB_IgnoreCombatItems((ITEMGUID) _Item)
THEN
Proc_StartDialog(1,"GLO_AD_CannotUseNow", _Player);

IF
CharacterUsedItem(_Player,_Item)
AND
DB_Dialogs(_Item,_Dialog)
AND
NOT DB_CombatCharacters(_Player, _)
THEN
Proc_StartDialog(0,_Dialog,_Item,_Player);

IF
CharacterUsedItem(_Player,_Item)
AND
DB_Dialogs(_Item,_Dialog)
AND
DB_CombatCharacters(_Player, _)
AND
DB_IgnoreCombatItems((ITEMGUID) _Item)
THEN
Proc_StartDialog(0,_Dialog,_Item,_Player);

// From item's GEN_ItemDialog behavior script we can start interactive dialogs (used for modders to start item dialogs without Osiris support)
IF
CharacterItemEvent(_Player,_Item,"GEN_StartItemDialog")
AND
NOT DB_Dialogs(_Item,_)
AND
DB_IsPlayer(_Player)
AND
NOT DB_CombatCharacters(_Player,_)
AND
GetVarString(_Item,"ItemDialog",_Dialog)
THEN
Proc_StartDialog(0,_Dialog,_Item,_Player);

IF
CharacterItemEvent(_Player,_Item,"GEN_StartItemDialog")
AND
NOT DB_Dialogs(_Item,_)
AND
DB_IsPlayer(_Player)
AND
DB_CombatCharacters(_Player,_)
AND
DB_IgnoreCombatItems((ITEMGUID)_Item)
AND
GetVarString(_Item,"ItemDialog",_Dialog)
THEN
Proc_StartDialog(0,_Dialog,_Item,_Player);
//END_REGION


//REGION Start Automated Dialog with 1 Item 
IF
CharacterUsedItem(_Char,_Item)
AND
DB_AD_Dialog(_Item,_Dialog)
THEN
Proc_StartDialog(1,_Dialog, _Item);
//END_REGION

//REGION Track Object Invulnerable (mainly used by itemdialogs setting items temporarily invulnerable)
PROC
ProcSetInvulnerable((GUIDSTRING)_Object,1)
THEN
DB_ObjectStoryInvulnerable(_Object);
SetInvulnerable_UseProcSetInvulnerable(_Object,1);

PROC
ProcSetInvulnerable((GUIDSTRING)_Object,0)
THEN
NOT DB_ObjectStoryInvulnerable(_Object);
SetInvulnerable_UseProcSetInvulnerable(_Object,0);
//END_REGION

//REGION Clear Involved NPCs in Dialog
PROC
ProcClearDialogFlagsForPlayers((INTEGER)_Instance)
AND
DB_DialogPlayers(_Instance,_Player,_Index)
THEN
ProcClearPlayerIfNotInOtherDialog(_Instance,_Player);

PROC
ProcClearPlayerIfNotInOtherDialog((INTEGER)_Inst,(GUIDSTRING)_Player)
AND
DB_DialogPlayers(_OtherInstance,_Player,_)
AND
_OtherInstance!=_Inst
AND
NOT DB_AutomatedDialog(_OtherInstance)
AND
NOT DB_MarkedForDelete(_OtherInstance)
THEN
DB_TempIsInOtherDialog(_Player,1);

PROC
ProcClearPlayerIfNotInOtherDialog((INTEGER)_Inst,(GUIDSTRING)_Player)
AND
NOT DB_TempIsInOtherDialog(_Player,1)
THEN
SetStoryNpcStatus((CHARACTERGUID)_Player);

PROC
ProcClearPlayerIfNotInOtherDialog((INTEGER)_Inst,(GUIDSTRING)_Player)
THEN
NOT DB_TempIsInOtherDialog(_Player,1);

PROC
ProcClearDialogFlagsForNPCs((INTEGER)_Instance)
AND
DB_DialogNPCs(_Instance,_Npc,_Index)
THEN
ProcClearNPCIfNotInOtherDialog(_Instance,_Npc);

PROC
ProcClearNPCIfNotInOtherDialog((INTEGER)_Inst,(GUIDSTRING)_Npc)
AND
DB_DialogNPCs(_OtherInstance,_Npc,_)
AND
_OtherInstance!=_Inst
AND
NOT DB_AutomatedDialog(_OtherInstance)
AND
NOT DB_MarkedForDelete(_OtherInstance)
THEN
DB_TempIsInOtherDialog(_Npc,1);

PROC
ProcClearNPCIfNotInOtherDialog((INTEGER)_Inst,(GUIDSTRING)_Npc)
AND
NOT DB_TempIsInOtherDialog(_Npc,1)
THEN
SetStoryNpcStatus((CHARACTERGUID)_Npc);

PROC
ProcClearNPCIfNotInOtherDialog((INTEGER)_Inst,(GUIDSTRING)_Npc)
AND
NOT DB_TempIsInOtherDialog(_Npc,1)
AND
NOT DB_ObjectStoryInvulnerable(_Npc)
AND
ObjectIsItem(_Npc,1)
THEN
SetInvulnerable_UseProcSetInvulnerable(_Npc,0);

PROC
ProcClearNPCIfNotInOtherDialog((INTEGER)_Inst,(GUIDSTRING)_Npc)
THEN
NOT DB_TempIsInOtherDialog(_Npc,1);

//END_REGION

//REGION Set Relation to Players
PROC
SetRelationFactionToPlayers((STRING)_Faction,(INTEGER)_Relation)
THEN
CharacterSetRelationFactionToFaction(_Faction,"Hero",_Relation);
CharacterSetRelationFactionToFaction("Hero",_Faction,_Relation);
CharacterSetRelationFactionToFaction(_Faction,"Companion",_Relation);
CharacterSetRelationFactionToFaction("Companion",_Faction,_Relation);

PROC
SetRelationIndivFactionToPlayers((CHARACTERGUID)_Char,(INTEGER)_Relation)
THEN
CharacterSetRelationIndivFactionToFaction(_Char,"Hero",_Relation);
CharacterSetRelationFactionToIndivFaction("Hero",_Char,_Relation);
CharacterSetRelationIndivFactionToFaction(_Char,"Companion",_Relation);
CharacterSetRelationFactionToIndivFaction("Companion",_Char,_Relation);

PROC
ProcSetRelationToPlayers((CHARACTERGUID)_Character,(INTEGER)_Relation)
AND
_Relation == 0
AND
GetFaction(_Character,_Faction)
THEN
SetFaction(_Character,"Evil NPC");
DB_PreviousAlignment(_Character,_Faction);

PROC
ProcSetRelationToPlayers((CHARACTERGUID)_Character,(INTEGER)_Relation)
AND
_Relation == 100
AND
NOT DB_PreviousAlignment(_Character,_)
AND
GetFaction(_Character,_Faction)
THEN
CharacterSetRelationFactionToFaction(_Faction,"Hero",100);
CharacterSetRelationFactionToFaction("Hero",_Faction,100);

PROC
ProcSetRelationToPlayers((CHARACTERGUID)_Character,(INTEGER)_Relation)
AND
DB_IsPlayer(_Player)
AND
_Relation == 100
AND
DB_PreviousAlignment(_Character,_Faction)
THEN
SetFaction(_Character,_Faction);
CharacterSetRelationFactionToFaction(_Faction,"Hero",100);
CharacterSetRelationFactionToFaction("Hero",_Faction,100);
NOT DB_PreviousAlignment(_Character,_Faction);

PROC
ProcSetHostileToIndivPlayer((CHARACTERGUID)_Character,(CHARACTERGUID)_Player)
THEN
CharacterSetRelationIndivFactionToIndivFaction(_Character,_Player,0);
CharacterSetRelationIndivFactionToIndivFaction(_Player,_Character,0);

PROC
ProcSetFactionHostileToIndivPlayer((STRING)_Faction,(CHARACTERGUID)_Player)
THEN
CharacterSetRelationFactionToIndivFaction(_Faction,_Player,0);
CharacterSetRelationIndivFactionToFaction(_Player,_Faction,0);
//END_REGION

//REGION Change Attitude
IF
ObjectFlagSet("ChangeAttitude",_Player,_Instance)
AND
GetVarInteger(_Player,"ChangeAttitude",_Value)
AND
DB_DialogNPCs(_Instance,_Npc,1)
THEN
ObjectClearFlag(_Player,"ChangeAttitude",_Instance);
CharacterAddAttitudeTowardsPlayer((CHARACTERGUID)_Npc,(CHARACTERGUID)_Player,_Value);

PROC
ChangeAttitude((CHARACTERGUID)_NPC,(CHARACTERGUID)_Player,(INTEGER)_Value)
THEN
CharacterAddAttitudeTowardsPlayer(_Npc,_Player,_Value);
//END_REGION

//REGION Peace Timer
PROC
PROC_PeaceTimerLaunch((STRING)_TimerName,(INTEGER)_TimerLength)
AND
DB_CombatCharacters(_Player,_)
AND
DB_IsPlayer(_Player)
AND
NOT DB_PeaceTimer(_TimerName)
THEN
DB_PeaceTimer(_TimerName);
DB_PeaceTimerStillToStart(_TimerName,_TimerLength);

PROC
PROC_PeaceTimerLaunch((STRING)_TimerName,(INTEGER)_TimerLength)
AND
NOT DB_PeaceTimer(_TimerName)
THEN
DB_PeaceTimer(_TimerName);
TimerLaunch(_TimerName,_TimerLength);

IF
ObjectEnteredCombat((CHARACTERGUID)_Player,_)
AND
_Player.DB_IsPlayer()
AND
DB_PeaceTimer(_TimerName)
THEN
TimerPause(_TimerName);

IF
ObjectLeftCombat((CHARACTERGUID)_Player,_)
AND
_Player.DB_IsPlayer()
AND
DB_PeaceTimer(_TimerName)
THEN
ProcUnPausePeaceTimerIfNoPlayerInCombat(_TimerName);

PROC
ProcUnPausePeaceTimerIfNoPlayerInCombat((STRING)_TimerName)
AND
_Player.DB_IsPlayer()
AND
DB_CombatCharacters(_Player,_)
THEN
DB_PlayerInCombat(1);

PROC
ProcUnPausePeaceTimerIfNoPlayerInCombat((STRING)_TimerName)
AND
NOT DB_PlayerInCombat(1)
AND
NOT DB_PeaceTimerStillToStart(_TimerName,_)
THEN
TimerUnpause(_TimerName);

PROC
ProcUnPausePeaceTimerIfNoPlayerInCombat((STRING)_TimerName)
AND
NOT DB_PlayerInCombat(1)
AND
DB_PeaceTimerStillToStart(_TimerName,_TimerLength)
THEN
TimerLaunch(_TimerName,_TimerLength);
NOT DB_PeaceTimerStillToStart(_TimerName,_TimerLength);

PROC
ProcUnPausePeaceTimerIfNoPlayerInCombat((STRING)_TimerName)
THEN
NOT DB_PlayerInCombat(1);
IF
TimerFinished(_TimerName)
AND
DB_PeaceTimer(_TimerName)
THEN
NOT DB_PeaceTimer(_TimerName);
//END_REGION

//REGION Doors
PROC
ItemCloseAndLock((ITEMGUID)_Item,(STRING)_Key)
THEN
ItemClose(_Item);
ItemLock(_Item,_Key);

PROC
ItemUnlockAndOpen((ITEMGUID)_Item)
THEN
ItemUnLock(_Item);
ItemOpen(_Item);
//END_REGION

//REGION  Automated dialogs
IF
DB_AD_Dialog((GUIDSTRING)_Char,(STRING)_)
THEN
SetHasDialog(_Char,1);

IF
DB_AD_Dialog((GUIDSTRING)_Char1,(GUIDSTRING)_Char2,(STRING)_)
THEN
SetHasDialog(_Char1,1);
SetHasDialog(_Char2,1);

PROC
PROC_GLOBAL_DialogStartRequested((GUIDSTRING)_Char,(GUIDSTRING)_Player)
AND
DB_AD_Dialog(_Char,(STRING)_Dialog)
AND
NOT DB_ADRequested(_Char)
AND
QRY_StartDialog(1,_Dialog,_Char)
THEN
DB_ADRequested(_Char);
DB_FoundDialog(_Char,_Player);

PROC
PROC_GLOBAL_DialogStartRequested((GUIDSTRING)_Char1,(GUIDSTRING)_Player)
AND
DB_AD_Dialog(_Char1,_Char2,(STRING)_Dialog)
AND
NOT DB_ADRequested(_Char1)
AND
NOT DB_ADRequested(_Char2)
AND
QRY_StartDialog(1,_Dialog,_Char1,_Char2)
THEN
DB_ADRequested(_Char1);
DB_ADRequested(_Char2);
DB_FoundDialog(_Char1,_Player);

PROC
PROC_GLOBAL_DialogStartRequested((GUIDSTRING)_Char2,(GUIDSTRING)_Player)
AND
DB_AD_Dialog(_Char1,_Char2,(STRING)_Dialog)
AND
NOT DB_ADRequested(_Char1)
AND
NOT DB_ADRequested(_Char2)
AND
QRY_StartDialog(1,_Dialog,_Char1,_Char2)
THEN
DB_ADRequested(_Char1);
DB_ADRequested(_Char2);
DB_FoundDialog(_Char2,_Player);

IF
AutomatedDialogEnded(_Dialog,_Inst)
THEN
ProcClearADRequests(_Dialog,_Inst);

IF
AutomatedDialogRequestFailed(_Dialog,_Inst)
THEN
ProcClearADRequests(_Dialog,_Inst);

PROC
ProcClearADRequests((STRING)_Dialog,(INTEGER)_Inst)
AND
DB_DialogNPCs(_Inst,_Npc,1)
AND
DB_AD_Dialog(_Npc,_Dialog)
THEN
NOT DB_ADRequested(_Npc);

PROC
ProcClearADRequests((STRING)_Dialog,(INTEGER)_Inst)
AND
DB_DialogPlayers(_Inst,_Player,1)
AND
DB_AD_Dialog(_Player,_Dialog)
THEN
NOT DB_ADRequested(_Player);

PROC
ProcClearADRequests((STRING)_Dialog,(INTEGER)_Inst)
AND
DB_DialogNPCs(_Inst,_Npc,_)
AND
DB_AD_Dialog(_,_,_Dialog)
THEN
NOT DB_ADRequested(_Npc);

PROC
ProcClearADRequests((STRING)_Dialog,(INTEGER)_Inst)
AND
DB_DialogPlayers(_Inst,_Player,1)
AND
DB_AD_Dialog(_,_,_Dialog)
THEN
NOT DB_ADRequested(_Player);

PROC
ProcRemoveNPCADs((GUIDSTRING)_Npc)
AND
DB_AD_Dialog(_Npc,_Dialog)
THEN
NOT DB_AD_Dialog(_Npc,_Dialog);
NOT DB_ADRequested(_Npc);

PROC
ProcRemoveNPCADs((GUIDSTRING)_Npc)
AND
DB_AD_Dialog(_Npc,_Npc2,_Dialog)
THEN
NOT DB_AD_Dialog(_Npc,_Npc2,_Dialog);
NOT DB_ADRequested(_Npc);
NOT DB_ADRequested(_Npc2);

PROC
ProcRemoveNPCADs((GUIDSTRING)_Npc2)
AND
DB_AD_Dialog(_Npc,_Npc2,_Dialog)
THEN
NOT DB_AD_Dialog(_Npc,_Npc2,_Dialog);
NOT DB_ADRequested(_Npc);
NOT DB_ADRequested(_Npc2);

PROC
PROC_GLOBAL_DialogStartRequested((GUIDSTRING)_NPC,(GUIDSTRING)_Player)
AND
DB_AD_Dialog(_NPC,_)
THEN
ProcFaceEachother(_NPC,_Player);

//END_REGION

//REGION Object timer
PROC
ProcObjectTimer((GUIDSTRING)_Object,(STRING)_TimerName,(INTEGER)_Time)
AND
GetUUID(_Object,_UUID)
AND
StringConcatenate(_UUID,_TimerName,_ObjectTimerName)
THEN
DB_ObjectTimer(_Object,_ObjectTimerName,_TimerName);
TimerLaunch(_ObjectTimerName,_Time);

PROC
ProcObjectTimerCancel((GUIDSTRING)_Object,(STRING)_TimerName)
AND
DB_ObjectTimer(_Object,_ObjectTimerName,_TimerName)
THEN
NOT DB_ObjectTimer(_Object,_ObjectTimerName,_TimerName);
TimerCancel(_ObjectTimerName);

IF
TimerFinished(_ObjectTimerName)
AND
DB_ObjectTimer(_Object,_ObjectTimerName,_TimerName)
THEN
NOT DB_ObjectTimer(_Object,_ObjectTimerName,_TimerName);
ProcObjectTimerFinished(_Object,_TimerName);

PROC
ProcObjectTimerFinished((GUIDSTRING)_Object,(STRING)_TimerName)
THEN
DB_NOOP(1);
//END_REGION

//REGION Tutorial Messages
PROC
PROC_CheckPlayTut((STRING)_Message)
AND
_Player.DB_IsPlayer()
THEN
PROC_CheckPlayTut(_Player,_Message);

PROC
PROC_CheckPlayTut((CHARACTERGUID)_Player,(STRING)_Message)
AND
DB_StartTutMessages(1)
THEN
ProcPlayTut(_Player,_Message);

PROC
PROC_CheckPlayTutWithDelay((STRING)_Message,(INTEGER)_Delay)
AND
_Player.DB_IsPlayer()
THEN
PROC_CheckPlayTutWithDelay(_Player,_Message,_Delay);

PROC
PROC_CheckPlayTutWithDelay((CHARACTERGUID)_Player,(STRING)_Message,(INTEGER)_Delay)
AND
NOT DB_TutorialMessage(_Player,_Message,_)
AND
GetUUID(_Player,_Timer)
AND
StringConcatenate(_Timer,"_Tut",_TimerMsg)
THEN
TimerLaunch(_TimerMsg,_Delay);
DB_TutorialMessage(_Player,_Message,_TimerMsg);

IF
TimerFinished(_TimerMsg)
AND
DB_StartTutMessages(1)
AND
DB_TutorialMessage(_Player,_Message,_TimerMsg)
THEN
NOT DB_TutorialMessage(_Player,_Message,_TimerMsg);
ProcPlayTut(_Player,_Message);
//END_REGION

//REGION Move to changes 
PROC
ProcSaveGenericBehaviourState((CHARACTERGUID)_Char)
AND
NOT DB_StoryMoving(_Char,1)
AND
DB_Internal_Dialogs(_Char,_,_,_)
THEN
DB_NPCHadDialog(_Char,1);

PROC
ProcSaveGenericBehaviourState((CHARACTERGUID)_Char)
AND
NOT DB_StoryMoving(_Char,1)
AND
DB_AD_Dialog(_Char,_)
THEN
DB_NPCHadDialog(_Char,1);

PROC
ProcInternalMoveDisableGenericBehaviours((CHARACTERGUID)_Char)
AND
NOT DB_AD_Dialog(_Char,_)
THEN
SetHasDialog(_Char,0);

PROC
ProcInternalMoveDisableGenericBehaviours((CHARACTERGUID)_Char)
THEN
CharacterDisableAllCrimes(_Char);

PROC
ProcRestoreGenericBehaviour((CHARACTERGUID)_Char)
AND
NOT DB_CharacterAllCrimesDisabled(_Char)
THEN
CharacterEnableAllCrimes(_Char);

PROC
ProcRestoreGenericBehaviour((CHARACTERGUID)_Char)
AND
DB_CharacterCrimeDisabled(_Char,_Crime)
THEN
CharacterDisableCrime(_Char,_Crime);

PROC
ProcRestoreGenericBehaviour((CHARACTERGUID)_Char)
AND
DB_CharacterCrimeEnabled(_Char,_Crime)
THEN
CharacterEnableCrime(_Char,_Crime);

PROC
ProcRestoreGenericBehaviour((CHARACTERGUID)_Char)
AND
DB_NPCHadDialog(_Char,1)
THEN
NOT DB_NPCHadDialog(_Char,1);
SetHasDialog(_Char,1);

PROC
ProcSetMoveEvent((STRING)_Event)
AND
_Event!=""
THEN
DB_MoveEvent(_Event);

PROC
ProcSetMoveEvent("")
THEN
DB_MoveEvent("_ResetGenericBehaviours_");

PROC
ProcExecuteMove((CHARACTERGUID)_Char,(GUIDSTRING)_Point,(INTEGER)_Running)
AND
DB_MoveEvent(_Event)
AND
DB_CharMovementCommandID(_Char,_ID)
THEN
NOT DB_MoveEvent(_Event);
CharacterMoveTo(_Char,_Point,_Running,_Event,0);
DB_CharacterMovement(_Char,_Event,_ID);

PROC
ProcBumpOsirisMoveCommandID((CHARACTERGUID)_Char)
AND
NOT DB_CharMovementCommandID(_Char,_)
THEN
DB_CharMovementCommandID(_Char,0);

PROC
ProcBumpOsirisMoveCommandID((CHARACTERGUID)_Char)
AND
DB_CharMovementCommandID(_Char,_ID)
AND
IntegerSum(1,_ID,_New)
THEN
NOT DB_CharMovementCommandID(_Char,_ID);
DB_CharMovementCommandID(_Char,_New);

PROC
ProcCharacterMoveTo((CHARACTERGUID)_Char,_,_,_)
THEN
SetStoryEvent(_Char,"ClearCrimeReturnPos");
ProcBumpOsirisMoveCommandID(_Char);

PROC
ProcCharacterMoveTo((CHARACTERGUID)_Char,(GUIDSTRING)_Point,(INTEGER)_Running,(STRING)_Event)
AND
DB_CharMovementCommandID(_Char,_ID)
THEN
ProcSaveGenericBehaviourState(_Char);
ProcInternalMoveDisableGenericBehaviours(_Char);
ProcSetMoveEvent(_Event);
ProcExecuteMove(_Char,_Point,_Running);
DB_StoryMoving(_Char,1);
DB_MovingTo(_Char,_Point,_Running,_ID);

PROC
ProcCharacterMoveTo((CHARACTERGUID)_Char,_,_,_)
THEN
ProcBumpOsirisMoveCommandID(_Char);

PROC
ProcResumeStoryMoving((CHARACTERGUID)_Char)
AND
DB_CharacterMovement(_Char,_Event,_ID)
AND
NOT DB_SelectedMove(_Char)
THEN
ProcSelectMove(_Char,_ID);

PROC
ProcSelectMove((CHARACTERGUID)_Char,(INTEGER)_ID)
AND
DB_MovingTo(_Char,_Point,_Running,_ID)
AND
DB_CharacterMovement(_Char,_Event,_ID)
THEN
DB_SelectedMove(_Char);
CharacterMoveTo(_Char,_Point,_Running,_Event,0);

PROC
ProcResumeStoryMoving((CHARACTERGUID)_Char)
THEN
NOT DB_SelectedMove(_Char);

PROC
ProcClearMovingFacts((CHARACTERGUID)_Char)
AND
DB_CharacterMovement(_Char,_Event,_ID)
THEN
NOT DB_CharacterMovement(_Char,_Event,_ID);

PROC
ProcClearMovingFacts((CHARACTERGUID)_Char)
AND
DB_MovingTo(_Char,_Point,_Running,_ID)
THEN
NOT DB_MovingTo(_Char,_Point,_Running,_ID);

PROC
ProcClearMovingFacts((CHARACTERGUID)_Char)
THEN
ProcRestoreGenericBehaviour(_Char);

IF
StoryEvent((CHARACTERGUID)_Char,_Event)
AND
DB_CharacterMovement(_Char,_Event,_ID)
THEN
NOT DB_ClearedMoveEvent(_Char);

IF
StoryEvent((CHARACTERGUID)_Char,_Event)
AND
DB_CharacterMovement(_Char,_Event,_ID)
AND
DB_MovingTo(_Char,_Point,_Running,_ID)
AND
NOT DB_ClearedMoveEvent(_Char)
THEN
DB_ClearedMoveEvent(_Char);
NOT DB_MovingTo(_Char,_Point,_Running,_ID);

IF
StoryEvent((CHARACTERGUID)_Char,_Event)
AND
DB_CharacterMovement(_Char,_Event,_ID)
THEN
NOT DB_HandledMoveEvent(_Char);

IF
StoryEvent((CHARACTERGUID)_Char,_Event)
AND
DB_CharacterMovement(_Char,_Event,_ID)
AND
NOT DB_HandledMoveEvent(_Char)
THEN
DB_HandledMoveEvent(_Char);
NOT DB_CharacterMovement(_Char,_Event,_ID);
SetStoryEvent(_Char,"ClearCrimeReturnPos");
ProcCheckRestoreGenericBehaviours(_Char);


PROC
ProcCheckRestoreGenericBehaviours((CHARACTERGUID)_Char)
AND
NOT DB_CharacterMovement(_Char,_,_)
THEN
NOT DB_StoryMoving(_Char,1);
ProcRestoreGenericBehaviour(_Char);

IF
AttackedByObject((CHARACTERGUID)_Char,(CHARACTERGUID)_SourceOwner,(CHARACTERGUID)_Source,_,_DamageSource)
AND
_Char != _Source
AND
DB_StoryMoving(_Char,1)
AND
NOT DB_CombatCharacters(_Char,_)
AND
NOT QryIgnoreDamageSource(_DamageSource)
AND
CharacterIsPlayer(_Source,1)
THEN
ProcMakeNPCHostile(_Source,_Char);

IF
DB_Dead(_Char)
AND
DB_StoryMoving(_Char,1)
THEN
ProcClearStoryMove(_Char);

IF
CharacterWentOnStage(_Char,0)
AND
DB_StoryMoving(_Char,1)
THEN
ProcClearStoryMove(_Char);

IF
ObjectEnteredCombat((CHARACTERGUID)_Char,_)
AND
DB_StoryMoving(_Char,1)
THEN
CharacterPurgeQueue(_Char);

IF
ObjectLeftCombat((CHARACTERGUID)_Char,_)
AND
NOT DB_Dead(_Char)
AND
DB_StoryMoving(_Char,1)
THEN
ProcResumeStoryMoving(_Char);

PROC
ProcClearStoryMove((CHARACTERGUID)_Char)
THEN
NOT DB_StoryMoving(_Char,1);
ProcClearMovingFacts(_Char);
CharacterPurgeQueue(_Char);
//END_REGION

//REGION Movement via State_Manager_GoTo
// The parameters are roughly the same as with ProcCharacterMoveTo. Additional parameters:
//  - _MinDist: the minimal distance to which the character must have neared its destination before the event is triggered
//  - _AfterArrivalState: the State_Manager state to go to once the character reaches its destination
PROC
ProcStateManagerCharacterMoveTo((CHARACTERGUID)_Char,(GUIDSTRING)_Destination,(INTEGER)_Running,(REAL)_MinDist,(STRING)_Event,(STRING)_AfterArrivalState)
AND
ObjectIsCharacter(_Destination,1)
THEN
DB_ProcStateManagerCharacterMoveTo_Handled(1);
SetVarObject(_Char,"DestinationCharacter",_Destination);
SetVarFixedString(_Char,"currentState","State_Manager_Go_To_Character");

PROC
ProcStateManagerCharacterMoveTo((CHARACTERGUID)_Char,(GUIDSTRING)_Destination,(INTEGER)_Running,(REAL)_MinDist,(STRING)_Event,(STRING)_AfterArrivalState)
AND
NOT DB_ProcStateManagerCharacterMoveTo_Handled(1)
AND
ObjectIsItem(_Destination,1)
THEN
DB_ProcStateManagerCharacterMoveTo_Handled(1);
SetVarObject(_Char,"DestinationItem",_Destination);
SetVarFixedString(_Char,"currentState","State_Manager_Go_To_Item");

PROC
ProcStateManagerCharacterMoveTo((CHARACTERGUID)_Char,(GUIDSTRING)_Destination,(INTEGER)_Running,(REAL)_MinDist,(STRING)_Event,(STRING)_AfterArrivalState)
AND
NOT DB_ProcStateManagerCharacterMoveTo_Handled(1)
THEN
SetVarObject(_Char,"Destination",_Destination);
SetVarFixedString(_Char,"currentState","State_Manager_Go_To_Trigger");

PROC
ProcStateManagerCharacterMoveTo((CHARACTERGUID)_Char,(GUIDSTRING)_Destination,(INTEGER)_Running,(REAL)_MinDist,(STRING)_Event,(STRING)_AfterArrivalState)
THEN
NOT DB_ProcStateManagerCharacterMoveTo_Handled(1);
SetVarInteger(_Char,"Running",_Running);
SetVarFloat(_Char,"Distance",_MinDist);
SetVarString(_Char,"ArriveEvent",_Event);
SetVarFixedString(_Char,"AfterArriveState",_AfterArrivalState);
//END_REGION

PROC 
ReactOnKillCounter((STRING)_Counter)
THEN 
DB_NOOP(1);

PROC
ProcStartMovie((STRING)_Movie)
AND
_Char.DB_IsPlayer()
AND
CharacterGetReservedUserID(_Char,_ID)
AND
GetUserProfileID(_ID,_UserProfile)
AND
NOT DB_MoviePlayed(_UserProfile,_Movie)
THEN
DB_MoviePlayed(_UserProfile,_Movie);
MoviePlay(_Char,_Movie);


//REGION check closest available character to object
QRY
QRY_GetClosestAvailableCharacterTo((CHARACTERGUID)_Obj,(INTEGER)_SightCheck)
AND
QRY_GetClosestAvailableCharacterTo((CHARACTERGUID)_Obj,(INTEGER)_SightCheck,0,NULL_00000000-0000-0000-0000-000000000000)
THEN
DB_NoOp(1);

QRY
QRY_GetClosestAvailableCharacterTo((CHARACTERGUID)_Obj,(INTEGER)_SightCheck,(INTEGER)_PartyCheck,(CHARACTERGUID)_Player)
AND
QRY_GetClosestAvailableCharacterTo((CHARACTERGUID)_Obj,(INTEGER)_SightCheck,(INTEGER)_PartyCheck,(CHARACTERGUID)_Player,(CHARACTERGUID)NULL_00000000-0000-0000-0000-000000000000)
THEN
DB_NoOp(1);

QRY
QRY_GetClosestAvailableCharacterTo((CHARACTERGUID)_Obj,(INTEGER)_SightCheck,(INTEGER)_PartyCheck,(CHARACTERGUID)_Player,(CHARACTERGUID)_ExceptPlayer)
AND 
QRY_GetClosestAvailableCharacterTo_ClearFacts(_Obj)
AND
DB_IsPlayer(_Char)
AND
_Char != _ExceptPlayer
AND
QRY_Conditional_CharacterCanSee(_SightCheck,_Obj,(CHARACTERGUID)_Char)
AND
QRY_SpeakerIsAvailable(_Char)
AND
QRY_Conditional_CharacterIsInPartyWith(_PartyCheck,_Char,_Player)
AND
GetDistanceTo(_Char,_Obj,_Dist)
THEN
DB_ClosestAvailableCharacterTo(_Char,_Obj,_Dist);

//Helper functions
QRY
QRY_GetClosestAvailableCharacterTo_ClearFacts((CHARACTERGUID)_Obj)
THEN
PROC_GetClosestAvailableCharacterTo_ClearFacts(_Obj);

PROC
PROC_GetClosestAvailableCharacterTo_ClearFacts((CHARACTERGUID)_Obj)
AND
DB_ClosestAvailableCharacterTo(_Char,_Obj,_Dist)
THEN
NOT DB_ClosestAvailableCharacterTo(_Char,_Obj,_Dist);

IF
DB_ClosestAvailableCharacterTo(_Char1,_Obj,_Dist1)
AND
DB_ClosestAvailableCharacterTo(_Char2,_Obj,_Dist2)
AND
_Char1 != _Char2
AND
_Dist1 <= _Dist2
THEN
NOT DB_ClosestAvailableCharacterTo(_Char2,_Obj,_Dist2);
//END_REGION

//REGION Conditional Party/Sight checks
QRY
QRY_Conditional_CharacterCanSee(0,(CHARACTERGUID)_Obj,(CHARACTERGUID)_Char)
THEN
DB_NoOp(1);

QRY
QRY_Conditional_CharacterCanSee(1,(CHARACTERGUID)_Obj,(CHARACTERGUID)_Char)
AND
CharacterCanSee(_Obj,_Char,1)
THEN
DB_NoOp(1);

QRY
QRY_Conditional_CharacterIsInPartyWith(0,(CHARACTERGUID)_Obj,(CHARACTERGUID)_Char)
THEN
DB_NoOp(1);

QRY
QRY_Conditional_CharacterIsInPartyWith(1,(CHARACTERGUID)_Obj,(CHARACTERGUID)_Char)
AND
CharacterIsInPartyWith(_Obj,_Char,1)
THEN
DB_NoOp(1);
//END_REGION

//REGION Disappear out of sight

PROC
ProcCharacterDisappearOutOfSight((CHARACTERGUID)_Character,(INTEGER)_Angle,(INTEGER)_Running,(STRING)_Event,(INTEGER)_IncreaseSpeed)
THEN
CharacterDisableAllCrimes(_Character);
DB_CharacterDisappearedOutOfSight(_Character,_Event,1);
CharacterDisappearOutOfSight(_Character,_Angle,_Running,_Event,_IncreaseSpeed);

PROC
ProcCharacterDisappearOutOfSightToObject((CHARACTERGUID)_Character,(GUIDSTRING)_Object,(INTEGER)_Running,(STRING)_Event,(INTEGER)_IncreaseSpeed)
THEN
CharacterDisableAllCrimes(_Character);
DB_CharacterDisappearedOutOfSight(_Character,_Event,1);
CharacterDisappearOutOfSightToObject(_Character,_Object,_Running,_Event,_IncreaseSpeed);

QRY
QryCanSeeAttackers((CHARACTERGUID)_Char,(CHARACTERGUID)_Src,(CHARACTERGUID)_SrcSummon)
AND
_SrcSummon != NULL_00000000-0000-0000-0000-000000000000
AND
_SrcSummon != _Src
AND
CharacterCanSee(_Char,_SrcSummon,1)
THEN
DB_SawAttacker(_SrcSummon);

QRY
QryCanSeeAttackers((CHARACTERGUID)_Char,(CHARACTERGUID)_Src,(CHARACTERGUID)_SrcSummon)
AND
NOT DB_SawAttacker(_)
AND
CharacterCanSee(_Char,_Src,1)
THEN
DB_SawAttacker(_Src);

IF
AttackedByObject((CHARACTERGUID)_Char,(CHARACTERGUID)_Src,_SrcSummon,_,_)
AND
_SrcSummon != _Char
AND
ObjectIsOnStage(_Char,1)
AND
DB_CharacterDisappearedOutOfSight(_Char,_,1)
AND
IsTagged(_Char,"ANIMAL",0)
AND
CharacterCanFight(_Char,1)
AND
ObjectIsCharacter(_Src,1)
AND
QryCanSeeAttackers(_Char,_Src,_SrcSummon)
AND
DB_SawAttacker(_Target)
THEN
DB_StoppedOutOfSight(_Char);
CharacterPurgeQueue(_Char);
CharacterSetTemporaryHostileRelation(_Char,_Target);
NOT DB_SawAttacker(_Target);

IF
CharacterSetTemporaryRelationsFailed(_Char,_Target)
AND
DB_StoppedOutOfSight(_Char)
THEN
ProcResumeDisappearOutOfSight(_Char);

IF
ObjectLeftCombat((CHARACTERGUID)_Char,_)
AND
DB_StoppedOutOfSight(_Char)
THEN
ProcResumeDisappearOutOfSight(_Char);

PROC
ProcResumeDisappearOutOfSight((CHARACTERGUID)_Char)
AND
NOT DB_Dead(_Char)
AND
DB_CharacterDisappearedOutOfSight(_Char,_Event,1)
THEN
NOT DB_StoppedOutOfSight(_Char);
CharacterDisappearOutOfSight(_Char,0,1,_Event,1);

IF
CharacterWentOnStage(_Character,1)
AND
DB_CharacterDisappearedOutOfSight(_Character,_Event,_ReactToCombat)
THEN
NOT DB_CharacterDisappearedOutOfSight(_Character,_Event,_ReactToCombat);
ProcRestoreGenericBehaviour(_Character);

IF
StoryEvent((CHARACTERGUID)_Character,"GEN_CharacterDisableAllCrimesBeforeDisappear")
THEN
CharacterDisableAllCrimes(_Character);
DB_CharacterDisappearedOutOfSight(_Character,"",0);

IF
StoryEvent((CHARACTERGUID)_Character,"GEN_CharacterDisableAllCrimesBeforeDisappear_ReactToCombat")
THEN
CharacterDisableAllCrimes(_Character);
DB_CharacterDisappearedOutOfSight(_Character,"",1);

PROC
ProcClearDisappearData((CHARACTERGUID)_Character)
AND
DB_CharacterDisappearedOutOfSight(_Character,_Event,_ReactToCombat)
THEN
NOT DB_CharacterDisappearedOutOfSight(_Character,_Event,_ReactToCombat);

//END_REGION

//REGION TemporaryHostileRelation
PROC
Proc_CharacterSetTemporaryHostileRelation((CHARACTERGUID)_Char1,(CHARACTERGUID)_Char2)
AND
_Char2!= NULL_00000000-0000-0000-0000-000000000000
AND
_Char1!= NULL_00000000-0000-0000-0000-000000000000
THEN
CharacterSetTemporaryHostileRelation(_Char1,_Char2);
//END_REGION

IF
RegionEnded(_Region)
THEN
ProcRegionEnded(_Region);

PROC
ProcRegionEnded((STRING)_Region)
THEN
DB_NOOP(1);

//REGION Healing status query
QRY
QRY_IsHealingStatus((STRING)_Status)
AND
_Status != "HEAL" //DOSTWO-24618 The actual HEAL status is a tick that is set from different statusses (that possibly doesn't heal because it has its parameters overwritten). It's never set on its own.
AND
GetStatusType(_Status,"HEAL")
AND
GetHealStat(_Status,"Vitality")
THEN
DB_NOOP(1);

QRY
QRY_IsHealingStatus((STRING)_Status)
AND
GetStatusType(_Status,"HEALING")
AND
GetHealStat(_Status,"Vitality")
THEN
DB_NOOP(1);
//END_REGION

//REGION item moving defaults
PROC
ItemMoveToTrigger((ITEMGUID)_Item,(TRIGGERGUID)_Trigger, (REAL)_Speed, (REAL)_Acceleration, (INTEGER)_UseRotation, (STRING)_Event)
THEN
ItemMoveToTrigger(_Item,_Trigger,_Speed,_Acceleration,_UseRotation,_Event,1);

PROC
ItemMoveToTrigger((ITEMGUID)_Item,(TRIGGERGUID)_Trigger, (REAL)_Speed, (REAL)_Acceleration, (INTEGER)_UseRotation)
THEN
ItemMoveToTrigger(_Item,_Trigger,_Speed,_Acceleration,_UseRotation,"",1);
 
PROC
ItemMoveToPosition((ITEMGUID)_Item, (REAL)_X, (REAL)_Y, (REAL)_Z, (REAL)_Speed, (REAL)_Acceleration, (STRING)_Event)
THEN
ItemMoveToPosition(_Item, _X, _Y, _Z, _Speed, _Acceleration,_Event,1);

PROC
ItemMoveToPosition((ITEMGUID)_Item, (REAL)_X, (REAL)_Y, (REAL)_Z, (REAL)_Speed, (REAL)_Acceleration)
THEN
ItemMoveToPosition(_Item, _X, _Y, _Z, _Speed, _Acceleration,"",1);

//END_REGION

//REGION transform overloads
PROC
Transform((ITEMGUID)_Object, (STRING)_Template)
THEN
Transform(_Object,_Template,0,0,0);

PROC
Transform((GUIDSTRING)_Object, (STRING)_Template, (INTEGER)_ReplaceScripts)
THEN
Transform(_Object,_Template,_ReplaceScripts,0,0);

PROC
Transform((GUIDSTRING)_Object, (STRING)_Template, (INTEGER)_ReplaceScripts, (INTEGER)_ReplaceScale)
THEN
Transform(_Object,_Template,_ReplaceScripts,_ReplaceScale,0);

//END_REGION

//REGION Perception
PROC
ProcSetPerceptionDifficulty((ITEMGUID)_Item,(STRING)_Difficulty)
THEN
SetVarFixedString(_Item,"Difficulty",_Difficulty);
SetStoryEvent(_Item,"GLO_OverrideWitsCheck");
//END_REGION

PROC
PlayEffect((GUIDSTRING)_Object,(STRING)_FxName)
THEN
PlayEffect(_Object,_FxName,"");

PROC
ApplyDamage((GUIDSTRING)_Object, (INTEGER)_Damage, (STRING)_DamageType)
THEN
ApplyDamage(_Object, _Damage, _DamageType, NULL_00000000-0000-0000-0000-000000000000);

PROC
ApplyStatus((GUIDSTRING)_Object, (STRING)_Status, (REAL)_Duration, (INTEGER)_Force)
THEN
ApplyStatus(_Object, _Status, _Duration, _Force, NULL_00000000-0000-0000-0000-000000000000);

PROC
CharacterDie((CHARACTERGUID)_Character, (INTEGER)_GenerateTreasure, (STRING)_DeathType)
THEN
CharacterDie(_Character, _GenerateTreasure, _DeathType, NULL_00000000-0000-0000-0000-000000000000);

PROC
CharacterDieImmediate((CHARACTERGUID)_Character, (INTEGER)_GenerateTreasure, (STRING)_DeathType)
THEN
CharacterDieImmediate(_Character, _GenerateTreasure, _DeathType, NULL_00000000-0000-0000-0000-000000000000);
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "__Start"

Version 1
SubGoalCombiner SGC_AND
INITSECTION
// small (0) or big (1) bribe, max player level, min amount, max-min amount
DB_CrimeBribes_BaseAmountUntilLevel(0,50,10,1);
DB_CrimeBribes_BaseAmountUntilLevel(0,70,20,5);
DB_CrimeBribes_BaseAmountUntilLevel(0,150,50,9);
DB_CrimeBribes_BaseAmountUntilLevel(0,245,65,13);
DB_CrimeBribes_BaseAmountUntilLevel(0,410,110,16);
DB_CrimeBribes_BaseAmountUntilLevel(0,600,200,18);
DB_CrimeBribes_BaseAmountUntilLevel(0,800,250,20);

DB_CrimeBribes_BaseAmountUntilLevel(1,125,25,1);
DB_CrimeBribes_BaseAmountUntilLevel(1,175,30,5);
DB_CrimeBribes_BaseAmountUntilLevel(1,400,60,9);
DB_CrimeBribes_BaseAmountUntilLevel(1,625,100,13);
DB_CrimeBribes_BaseAmountUntilLevel(1,1100,200,16);
DB_CrimeBribes_BaseAmountUntilLevel(1,1600,400,18);
DB_CrimeBribes_BaseAmountUntilLevel(1,2200,500,20);

DB_CrimeBribes_SevereCrimes("Murder");
DB_CrimeBribes_SevereCrimes("SneakMurder");
DB_CrimeBribes_SevereCrimes("Assault");
KBSECTION
//REGION Polymorph statuses are handled in the DivinityOrigins mod, so add a dummy proxy and a fallback
// Actual implemetation in GLOBAL_ShapeShifting in DivinityOrigins
QRY
QRY_GLOBAL_Shapeshifting_GetPolymorphStatus((CHARACTERGUID)_Player)
THEN
DB_NOOP(1);

// If we're not using DivinityOrigins, ensure we still define a
// generic DB_GLOBAL_Shapeshifting_PolymorphStatus() as fallback
QRY
QRY_GLOBAL_Shapeshifting_GetPolymorphStatus_Fallback((CHARACTERGUID)_Player)
AND
NOT DB_GLOBAL_Shapeshifting_PolymorphStatus(_)
THEN
DB_GLOBAL_Shapeshifting_PolymorphStatus("");

// Ensure fallback query always succeeds
QRY
QRY_GLOBAL_Shapeshifting_GetPolymorphStatus_Fallback((CHARACTERGUID)_Player)
THEN
DB_NOOP(1);

//END_REGION

//REGION Determine whether we select from the high or low bribes
// Possible selectors:
// * Tension
// * Severity of the crime
// * Number of times this person has been bribed

// Determine severity
// Return value:
//   Severe crime: DB_CrimeBribes_CrimeSeverity(1)
//   Non-sever crime: DB_CrimeBribes_CrimeSeverity(0)
QRY
QRY_CrimeBribes_CrimeGetSeverity((STRING)_CrimeType)
AND
DB_CrimeBribes_CrimeSeverity(_Severity)
THEN
NOT DB_CrimeBribes_CrimeSeverity(_Severity);

QRY
QRY_CrimeBribes_CrimeGetSeverity((STRING)_CrimeType)
AND
DB_CrimeBribes_SevereCrimes(_CrimeType)
THEN
DB_CrimeBribes_CrimeSeverity(1);

QRY
QRY_CrimeBribes_CrimeGetSeverity((STRING)_CrimeType)
AND
NOT DB_CrimeBribes_CrimeSeverity(1)
THEN
DB_CrimeBribes_CrimeSeverity(0);

// Keep track of number of times this criminal has bribed this interrogator
IF
ObjectFlagSet(_Flag,_Speaker,_ID)
AND
DB_ItemEvents_TransferFlagToMoneyVarIndex(_Flag,_MoneyVarIndex)
AND
DB_DialogName(_Dialog,_ID)
AND
DB_CrimeTriggers_GeneralBribeDialog(_MoneyVarIndex,_Dialog)
AND
DB_DialogMoneyTransfer(_MoneyVarIndex,_Dialog,_,_,_TargetDBIndex)
AND
DB_DialogPlayers(_ID,_Player,1)
AND
DB_DialogNPCs(_ID,_NPC,_TargetDBIndex)
AND
QRY_GLOBAL_Shapeshifting_GetPolymorphStatus(_Player)
AND
QRY_GLOBAL_Shapeshifting_GetPolymorphStatus_Fallback(_Player)
AND
DB_GLOBAL_Shapeshifting_PolymorphStatus(_Race)
THEN
PROC_CrimeBribes_RecordBribe((CHARACTERGUID)_NPC,(CHARACTERGUID)_Player,_Race);

PROC
PROC_CrimeBribes_RecordBribe((CHARACTERGUID)_NPC,(CHARACTERGUID)_Player,(STRING)_Race)
AND
DB_CrimeBribes_PairBribes(_NPC,_Player,_Race,_Bribes)
AND
IntegerSum(_Bribes,1,_NewBribes)
THEN
NOT DB_CrimeBribes_PairBribes(_NPC,_Player,_Race,_Bribes);
DB_CrimeBribes_PairBribes(_NPC,_Player,_Race,_NewBribes);

PROC
PROC_CrimeBribes_RecordBribe((CHARACTERGUID)_NPC,(CHARACTERGUID)_Player,(STRING)_Race)
AND
NOT DB_CrimeBribes_PairBribes(_NPC,_Player,_Race,_)
THEN
DB_CrimeBribes_PairBribes(_NPC,_Player,_Race,1);

// Return value:
//   Bribed too many times: DB_CrimeBribes_BribedTooManyTimes(1)
//   Not yet bribed or a few times: DB_CrimeBribes_BribedTooManyTimes(0)
QRY
QRY_CrimeBribes_BribedTooManyTimes((CHARACTERGUID)_Interrogator,(CHARACTERGUID)_Criminal,(STRING)_Race)
AND
DB_CrimeBribes_BribedTooManyTimes(_Result)
THEN
NOT DB_CrimeBribes_BribedTooManyTimes(_Result);

QRY
QRY_CrimeBribes_BribedTooManyTimes((CHARACTERGUID)_Interrogator,(CHARACTERGUID)_Criminal,(STRING)_Race)
AND
DB_CrimeBribes_PairBribes(_Interrogator,_Criminal,_Race,_Bribes)
AND
// This is the number of times the NPC has already been bribed before. So starting at the second time,
// it's too much
_Bribes >= 1
THEN
DB_CrimeBribes_BribedTooManyTimes(1);

QRY
QRY_CrimeBribes_BribedTooManyTimes((CHARACTERGUID)_Interrogator,(CHARACTERGUID)_Criminal,(STRING)_Race)
AND
NOT DB_CrimeBribes_BribedTooManyTimes(1)
THEN
DB_CrimeBribes_BribedTooManyTimes(0);

// Get bribe base & variation from table
PROC
PROC_CrimeBribes_GetBribeBounds((INTEGER)_HighBase,(INTEGER)_InterrogatorLevel)
AND
DB_CrimeBribes_GetBribeBounds(_Base,_Rand)
THEN
NOT DB_CrimeBribes_GetBribeBounds(_Base,_Rand);

PROC
PROC_CrimeBribes_GetBribeBounds((INTEGER)_HighBase,(INTEGER)_InterrogatorLevel)
AND
DB_CrimeBribes_BaseAmountUntilLevel(_HighBase,_Base,_Rand,1)
THEN
DB_CrimeBribes_GetBribeBounds(_Base,_Rand);

PROC
PROC_CrimeBribes_GetBribeBounds((INTEGER)_HighBase,(INTEGER)_InterrogatorLevel)
AND
DB_CrimeBribes_BaseAmountUntilLevel(_HighBase,_Base,_Rand,_Level)
AND
DB_CrimeBribes_GetBribeBounds(_OldBase,_OldRand)
AND
_Level <= _InterrogatorLevel
AND
_Base > _OldBase
THEN
NOT DB_CrimeBribes_GetBribeBounds(_OldBase,_OldRand);
DB_CrimeBribes_GetBribeBounds(_Base,_Rand);

// Get the bribe amount
// Once a bribe amount has been set for an NPC, it stays that way until it switches from low to high
// base, or if the level of the NPC changes (it doesn't make sense if the bribe changes randomly for
// the same NPC with every new encounter).
PROC
PROC_CrimeBribes_GetBribe((CHARACTERGUID)_NPC,(INTEGER)_NPCLevel,(INTEGER)_HighBase)
AND
NOT DB_CrimeBribes_GetBribe_NPC(_NPC,_NPCLevel,_HighBase,_)
THEN
PROC_CrimeBribes_GetBribeBounds((INTEGER)_HighBase,(INTEGER)_NPCLevel);

PROC
PROC_CrimeBribes_GetBribe((CHARACTERGUID)_NPC,(INTEGER)_NPCLevel,(INTEGER)_HighBase)
AND
NOT DB_CrimeBribes_GetBribe_NPC(_NPC,_NPCLevel,_HighBase,_)
AND
DB_CrimeBribes_GetBribeBounds(_Base,_Rand)
AND
Random(_Rand,_Variation)
AND
IntegerSum(_Base,_Variation,_Bribe)
THEN
DB_CrimeBribes_GetBribe_NPC(_NPC,_NPCLevel,_HighBase,_Bribe);

// return value
PROC
PROC_CrimeBribes_GetBribe((CHARACTERGUID)_NPC,(INTEGER)_NPCLevel,(INTEGER)_HighBase)
AND
DB_CrimeBribes_GetBribe(_Bribe)
THEN
NOT DB_CrimeBribes_GetBribe(_Bribe);

PROC
PROC_CrimeBribes_GetBribe((CHARACTERGUID)_NPC,(INTEGER)_NPCLevel,(INTEGER)_HighBase)
AND
DB_CrimeBribes_GetBribe_NPC(_NPC,_NPCLevel,_HighBase,_Bribe)
THEN
DB_CrimeBribes_GetBribe(_Bribe);

// Set the bribe amount
IF
CrimeInterrogationRequest(_RegionID,_ID,_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_Dialog)
THEN
PROC_CrimeBribes_SetCrimeBribe(_ID,_Interrogator,_Criminal1,_Dialog);

PROC
ProcStartCrimeDialog((INTEGER)_CrimeID,(STRING)_CrimeDialog,1,(CHARACTERGUID)_NPC,(CHARACTERGUID)_Criminal,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4)
THEN
PROC_CrimeBribes_SetCrimeBribe(_CrimeID,_NPC,_Criminal,_CrimeDialog);

//REGION Generic callback to disable bribing by certain (classes of) characters
PROC
PROC_CrimeBribes_SetCrimeBribe((INTEGER)_CrimeID,(CHARACTERGUID)_Interrogator,(CHARACTERGUID)_Criminal,(STRING)_Dialog)
AND
QRY_CrimeBribes_DisableBribe(_CrimeID,_Interrogator,_Criminal,_Dialog)
THEN
DB_CrimeBribesDisabledBribe(_Interrogator,_Criminal,_Dialog);
ObjectSetFlag(_Interrogator,"GEB_BribeDisabled");
//END_REGION

//REGION Only allow bribing a few times
QRY
QRY_CrimeBribes_DisableBribe((INTEGER)_CrimeID,(CHARACTERGUID)_Interrogator,(CHARACTERGUID)_Criminal,(STRING)_Dialog)
AND
QRY_GLOBAL_Shapeshifting_GetPolymorphStatus(_Criminal)
AND
DB_GLOBAL_Shapeshifting_PolymorphStatus(_Race)
AND
QRY_CrimeBribes_BribedTooManyTimes(_Interrogator,_Criminal,_Race)
AND
DB_CrimeBribes_BribedTooManyTimes(1)
THEN
DB_NOOP(1);

IF
DialogEnded(_Dialog,_ID)
AND
DB_CrimeBribesDisabledBribe(_Interrogator,_Criminal,_Dialog)
AND
DB_DialogNPCs(_ID,_Interrogator,_)
AND
DB_DialogPlayers(_ID,_Criminal,_)
THEN
NOT DB_CrimeBribesDisabledBribe(_Interrogator,_Criminal,_Dialog);
ObjectClearFlag(_Interrogator,"GEB_BribeDisabled");
//END_REGION

// Low bribe if this NPC has not yet been bribed too many time by this player,
// AND it's not a severe crime, AND tension is below warning threshold.
// Otherwise higher bribe.
PROC
PROC_CrimeBribes_SetCrimeBribe((INTEGER)_CrimeID,(CHARACTERGUID)_Interrogator,(CHARACTERGUID)_Criminal,(STRING)_Dialog)
AND
DB_CrimeTriggers_GeneralBribeDialog(_MoneyVarIndex,_Dialog)
AND
CrimeGetType(_CrimeID,_CrimeType)
AND
QRY_CrimeBribes_CrimeGetSeverity(_CrimeType)
AND
QRY_GLOBAL_Shapeshifting_GetPolymorphStatus(_Criminal)
AND
DB_GLOBAL_Shapeshifting_PolymorphStatus(_Race)
AND
QRY_CrimeBribes_BribedTooManyTimes(_Interrogator,_Criminal,_Race)
AND
DB_CrimeBribes_CrimeSeverity(_Severity)
AND
DB_CrimeBribes_BribedTooManyTimes(_TooManyTimes)
AND
IntegerMax(_Severity,_TooManyTimes,_HighBase1)
AND
CrimeIsTensionOverWarningTreshold(_Criminal,_TensionOverWarning)
AND
IntegerMax(_HighBase1,_TensionOverWarning,_HighBaseFinal)
AND
CharacterGetLevel(_Interrogator,_InterrogatorLevel)
THEN
PROC_CrimeBribes_GetBribe(_Interrogator,_InterrogatorLevel,_HighBaseFinal);

PROC
PROC_CrimeBribes_SetCrimeBribe((INTEGER)_CrimeID,(CHARACTERGUID)_Interrogator,(CHARACTERGUID)_Criminal,(STRING)_Dialog)
AND
DB_CrimeTriggers_GeneralBribeDialog(_MoneyVarIndex,_Dialog)
AND
DB_CrimeBribes_GetBribe(_Bribe)
THEN
// Will clear previous entries, if any
DB_DialogMoneyTransfer(_MoneyVarIndex,_Dialog,_Bribe);
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "__Start"

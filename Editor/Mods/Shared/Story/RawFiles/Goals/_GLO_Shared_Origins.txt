Version 1
SubGoalCombiner SGC_AND
INITSECTION
DB_Origins_MaxPartySize(4);

KBSECTION
//REGION Dialogs in which flags are always shared across all shapeshift forms of everyone involved
// 1) Dialogs involving Origins as NPCs
IF
DialogStarted(_,_ID)
AND
DB_DialogNPCs(_ID,_NPC,_)
AND
DB_Origins_InitialRegion((STRING)_Level)
AND
DB_OriginRecruitmentLocation_Region(_Level,(CHARACTERGUID)_NPC,(TRIGGERGUID)_,(STRING)_)
THEN
DB_GLO_AllDialogObjectFlagsShared(_ID);

// 2) Dialogs involving multiple player characters
IF
DialogStarted(_,_ID)
AND
DB_DialogNumPlayers(_ID,_NPlayers)
AND
_NPlayers > 1
THEN
DB_GLO_AllDialogObjectFlagsShared(_ID);

// Clean up
IF
DialogEnded(_,_ID)
AND
DB_GLO_AllDialogObjectFlagsShared(_ID)
THEN
NOT DB_GLO_AllDialogObjectFlagsShared(_ID);
//END_REGION

//REGION Alignments as NPC (for GLO_PartyMembers)
IF
DB_OriginNPCAlignment((CHARACTERGUID)_Origin,(STRING)_Alignment)
THEN
DB_GLO_PartyMembers_OriginalAlignment(_Origin,_Alignment);
//END_REGION

//REGION Support routines for GLO_PartyMembers
QRY
QRY_GLO_PartyMembers_GetInPartyDialog((CHARACTERGUID)_Origin)
AND
DB_OriginInPartyDialog(_Origin,(STRING)_Dialog)
THEN
DB_GLO_PartyMembers_InPartyDialog(_Origin,_Dialog);
//END_REGION

//REGION Update origin recruitment location and dialog depending on the region
IF
RegionStarted(_Region)
AND
StringConcatenate("GLO_Origins_OriginNPCInitForRegion_",_Region,_Mutex)
AND
QueryOnlyOnce(_Mutex)
THEN
PROC_GLO_OriginNPCInitForRegion(_Region);


PROC
PROC_GLO_OriginNPCInitForRegion((STRING)_Region)
AND
DB_OriginRecruitmentLocation((CHARACTERGUID)_Char,(TRIGGERGUID)_Trigger)
THEN
NOT DB_OriginRecruitmentLocation(_Char,_Trigger);

PROC
PROC_GLO_OriginNPCInitForRegion((STRING)_Region)
AND
DB_OriginRecruitmentLocation_Region(_Region,(CHARACTERGUID)_Char,(TRIGGERGUID)_Trigger,(STRING)_State)
THEN
// We only enter a region once (except when using the debug book...)
// NOT DB_OriginRecruitmentLocation_Region(_Region,_Char,_Trigger,_State);
DB_OriginRecruitmentLocation(_Char,_Trigger);
SetVarFixedString(_Char,"currentState",_State);

PROC
PROC_GLO_OriginNPCInitForRegion((STRING)_Region)
AND
DB_OriginRecruitmentLocation(_Char,_Trigger)
AND
NOT DB_IsPlayer(_Char)
AND
CharacterIsDead(_Char,0)
THEN
PROC_Helper_SafeTeleportTo(_Char,_Trigger);

PROC
PROC_GLO_Origins_SetNewRegionDialog((CHARACTERGUID)_Origin)
AND
QRY_Origin_GetRecruitmentDialog(_Origin)
AND
DB_NewOriginRecruitmentDialog(_Origin,_NewDialog)
THEN
NOT DB_NewOriginRecruitmentDialog(_Origin,_NewDialog);
ProcRemoveAllDialogEntriesForSpeaker(_Origin);
Proc_GLO_Origins_MaybeSetDefaultDialog(_Origin,_NewDialog);

PROC
PROC_GLO_OriginNPCInitForRegion((STRING)_Region)
AND
IsGameLevel(_Region,1)
AND
DB_OriginRecruitmentDialog(_Origin,_)
AND
NOT DB_IsPlayer(_Origin)
AND
CharacterIsDead(_Origin,0)
THEN
PROC_GLO_Origins_SetNewRegionDialog(_Origin);

IF
CharacterResurrected(_Origin)
AND
DB_OriginRecruitmentDialog(_Origin,_)
AND
NOT DB_IsPlayer(_Origin)
THEN
PROC_GLO_Origins_SetNewRegionDialog(_Origin);
//END_REGION

//REGION Add / Remove from Party
// Override dialog for origin-as-NPC
QRY
QRY_Origin_GetRecruitmentDialog((CHARACTERGUID)_Origin)
AND
DB_GLO_PartyMembers_BlockRecruitmentDialog(_Origin)
THEN
DB_NewOriginRecruitmentDialog(_Origin,"");

QRY
QRY_Origin_GetRecruitmentDialog((CHARACTERGUID)_Origin)
AND
NOT DB_NewOriginRecruitmentDialog(_Origin,_)
AND
DB_CurrentLevel(_Region)
AND
DB_OriginRecruitmentDialog_Region(_Region,_Origin,(STRING)_Dialog)
THEN
DB_NewOriginRecruitmentDialog(_Origin,_Dialog);

// Default dialog for origin-as-NPC
QRY
QRY_Origin_GetRecruitmentDialog((CHARACTERGUID)_Origin)
AND
NOT DB_NewOriginRecruitmentDialog(_Origin,_)
AND
DB_OriginRecruitmentDialog(_Origin,_Dialog)
THEN
DB_NewOriginRecruitmentDialog(_Origin,_Dialog);

IF
ObjectFlagSet("OriginAddToParty",(CHARACTERGUID)_Origin,_ID)
AND
DialogGetInvolvedPlayer(_ID,1,(CHARACTERGUID)_Player)
THEN
DB_GLO_PartyMembers_RecruitAfterDialog(_ID,_Origin,_Player);
ObjectClearFlag(_Origin,"OriginAddToParty",0);

IF
ObjectFlagSet("OriginRemoveFromPartyAfterDialog",(CHARACTERGUID)_Member,_ID)
THEN
ObjectClearFlag(_Member,"OriginRemoveFromPartyAfterDialog",0);
DB_GLO_PartyMembers_DismissAfterDialog(_ID,_Member);

PROC
PROC_GLO_PartyMembers_MakeNPCHook((CHARACTERGUID)_Origin)
AND
DB_OriginNPCAlignment(_Origin,_)
AND
QRY_Origin_GetRecruitmentDialog(_Origin)
AND
DB_NewOriginRecruitmentDialog(_Origin,_NewDialog)
AND
GetFaction(_Origin,_PlayerFaction)
AND
DB_OriginNPCAlignment(_Origin,_NpcFaction)
THEN
NOT DB_NewOriginRecruitmentDialog(_Origin,_NewDialog);
ProcCancelAllRelationshipDialogs(_Origin);
Proc_ReflectionDialog_CancelForPlayer(_Origin);
// Proc_ReflectionDialog_CancelForPlayer() restores the previous dialog, so only now cancel all existing dialogs
ProcRemoveAllDialogEntriesForSpeaker(_Origin);
Proc_GLO_Origins_MaybeSetDefaultDialog(_Origin,_NewDialog);
SetHasDialog(_Origin,0); // Origin should not have dialog until AFTER they have returned to recruit position

PROC
Proc_GLO_Origins_MaybeSetDefaultDialog((CHARACTERGUID)_Origin,(STRING)_NewDialog)
AND
NOT DB_Avatars(_Origin)
AND
_NewDialog != ""
THEN
DB_Dialogs(_Origin,_NewDialog);

PROC
PROC_GLO_PartyMembers_MakeNPCHook((CHARACTERGUID)_Origin)
AND
DB_CompanionAvatarBond(_Origin,_Player)
THEN
NOT DB_CompanionAvatarBond(_Origin,_Player);
Proc_CompanionLeftParty(_Origin,_Player);

PROC
Proc_GLO_Origins_RemoveRecruitmentDialogs((CHARACTERGUID)_Origin)
AND
DB_OriginRecruitmentDialog_Region(_Region,_Origin,_Dialog)
THEN
NOT DB_OriginRecruitmentDialog_Region(_Region,_Origin,_Dialog);

PROC
Proc_GLO_Origins_RemoveRecruitmentDialogs((CHARACTERGUID)_Origin)
AND
DB_OriginRecruitmentDialog(_Origin,_Dialog)
THEN
NOT DB_OriginRecruitmentDialog(_Origin,_Dialog);

PROC
PROC_GLO_PartyMembers_MakeNPCHook((CHARACTERGUID)_Origin)
AND
DB_OriginNPCAlignment(_Origin,_)
AND
NOT DB_GLO_PartyMembers_BlockReturnToRecruitmentPosition(_Origin)
THEN
ProcOriginReturnToRecruitmentPos(_Origin);

//REGION Return to Recruitment Pos
PROC
ProcOriginReturnToRecruitmentPos((CHARACTERGUID)_Origin)
AND
DB_OriginRecruitmentLocation(_Origin,_Location)
AND
GetDistanceTo(_Origin,_Location,_Dist)
AND
_Dist > 18.0
THEN
ProcCharacterDisappearOutOfSight(_Origin,0,0,"Origin_RestoreDialog",0);

PROC
ProcOriginReturnToRecruitmentPos((CHARACTERGUID)_Origin)
AND
DB_OriginRecruitmentLocation(_Origin,_Location)
AND
GetDistanceTo(_Origin,_Location,_Dist)
AND
_Dist <= 18.0
THEN
ProcCharacterMoveTo(_Origin,_Location,0,"Origin_RestoreDialog");

// Character creation
PROC
ProcOriginReturnToRecruitmentPos((CHARACTERGUID)_Origin)
AND
NOT DB_OriginRecruitmentLocation(_Origin,_)
AND
DB_Origins_InitialRegion(_InitialRegion)
AND
DB_OriginRecruitmentLocation_Region(_InitialRegion,_Origin,_Location,_)
THEN
TeleportTo(_Origin,_Location);
SetStoryEvent(_Origin,"Origin_RestoreDialog");

// Not character creation
IF
StoryEvent((CHARACTERGUID)_Origin,"Origin_RestoreDialog")
AND
DB_OriginRecruitmentLocation(_Origin,_Location)
THEN
TeleportTo(_Origin,_Location);

// Character Creation
IF
StoryEvent((CHARACTERGUID)_Origin,"Origin_RestoreDialog")
AND
NOT DB_OriginRecruitmentLocation(_Origin,_)
AND
DB_Origins_InitialRegion(_Region)
AND
DB_OriginRecruitmentLocation_Region(_Region,_Origin,_Location,_)
THEN
TeleportTo(_Origin,_Location);

IF
StoryEvent((CHARACTERGUID)_Origin,"Origin_RestoreDialog")
THEN
SetOnStage(_Origin,1);
SetHasDialog(_Origin,1);
//END_REGION

PROC
PROC_GLO_PartyMembers_RecruiteeAvatarBond((CHARACTERGUID)_Companion,(CHARACTERGUID)_Avatar)
AND
DB_OriginNPCAlignment(_Companion,_)
THEN
DB_CompanionAvatarBond(_Companion,_Avatar);

PROC
PROC_GLO_PartyMembers_ClearRecruiteeBonds((CHARACTERGUID)_Companion)
AND
DB_CompanionAvatarBond(_Companion,_Avatar)
THEN
NOT DB_CompanionAvatarBond(_Companion,_Avatar);

PROC
Proc_BondedAvatarTutorial((CHARACTERGUID)_Avatar)
AND
SysCount("DB_Avatars",1,_AvatarCount)
AND
_AvatarCount > 1
AND
DB_InitialTutorialsShown(1)
AND
DB_IsPlayer(_Player)
AND
CharacterIsInPartyWith(_Avatar,_Player,1)
THEN
Proc_CheckPlayTut(_Player,"TUT_BondedAvatar");

PROC
ProcAssignCharacterToPlayer((CHARACTERGUID)_Char,(CHARACTERGUID)_Player)
AND
CharacterGetReservedUserID(_Player,_User)
THEN
CharacterAssignToUser(_User,_Char);

//REGION Check Party Size
//Check for Solo Player
PROC
Proc_CheckPartyFull()
AND
SysCount("DB_IsPlayer",1,_Int)
AND
_Int == 1
THEN
GlobalSetFlag("GEN_SoloPlayer");

//Check for Max Player count
PROC
Proc_CheckPartyFull()
AND
SysCount("DB_IsPlayer",1,_Int)
AND
_Int != 1
THEN
GlobalClearFlag("GEN_SoloPlayer");

PROC
Proc_CheckPartyFull()
AND
SysCount("DB_IsPlayer",1,_Int)
AND
DB_Origins_MaxPartySize(_Max)
AND
_Int == _Max
THEN
GlobalSetFlag("GEN_MaxPlayerCountReached");

PROC
Proc_CheckPartyFull()
AND
SysCount("DB_IsPlayer",1,_Int)
AND
DB_Origins_MaxPartySize(_Max)
AND
_Int < _Max
THEN
GlobalClearFlag("GEN_MaxPlayerCountReached");
//END_REGION
//END_REGION

//REGION User Companion Differentiation
PROC
PROC_GLOBAL_DialogStartRequested((CHARACTERGUID)_Player,(CHARACTERGUID)_OtherPlayer)
AND
DB_IsPlayer(_Player)
AND
DB_IsPlayer(_OtherPlayer)
AND
CharacterGetReservedUserID(_Player,_PID)
AND
CharacterGetReservedUserID(_OtherPlayer,_OPID)
AND
_PID == _OPID
THEN
ObjectSetFlag(_OtherPlayer,"UserOwnedPlayerCharacter");

IF
DialogEnded(_,_ID)
AND
DialogGetInvolvedPlayer(_ID,1,_Player)
AND
ObjectGetFlag(_Player,"UserOwnedPlayerCharacter",1)
THEN
ObjectClearFlag(_Player,"UserOwnedPlayerCharacter",0);

//END_REGION

//REGION Origin Hostility
IF
ObjectFlagSet("SetOriginHostileAfterDialog",_UnRecruitedOrigin,_)
THEN
DB_SetOriginHostileAfterDialog(_UnRecruitedOrigin);
ObjectClearFlag(_UnRecruitedOrigin,"SetOriginHostileToOtherOrigins",0);

IF
DialogEnded(_,_ID)
AND
DB_SetOriginHostileAfterDialog(_UnRecruitedOrigin)
AND
DialogGetInvolvedNPC(_ID,1,(CHARACTERGUID)_UnRecruitedOrigin)
AND
GetFaction(_UnRecruitedOrigin,_PreviousFaction)
THEN
NOT DB_SetOriginHostileAfterDialog(_UnRecruitedOrigin);
ProcSetRelationToPlayers(_UnRecruitedOrigin,0);
DB_ResetOriginAlignmentAfterCombat(_UnRecruitedOrigin,_PreviousFaction);

IF
ObjectLeftCombat(_UnRecruitedOrigin,_)
AND
DB_ResetOriginAlignmentAfterCombat((CHARACTERGUID)_UnRecruitedOrigin,_PreviousFaction)
THEN
SetFaction(_UnRecruitedOrigin,_PreviousFaction);
NOT DB_ResetOriginAlignmentAfterCombat(_UnRecruitedOrigin,_PreviousFaction);

/*
IF
ObjectFlagSet("FactionHostileToIndivPlayerAfterDialog",_,_ID)
AND
DialogGetInvolvedNPC(_ID,1,(CHARACTERGUID)_Origin)
AND
DB_GLO_PartyMembers_DefaultFaction(_Origin,_PlayerFaction)
THEN
SetFaction(_Origin,_PlayerFaction);
*/
//END_REGION
 
//REGION Avatar Tracking
//Avatar DB_ to keep track of counts
IF
ObjectWasTagged((CHARACTERGUID)_Avatar,"AVATAR")
AND
NOT DB_Avatars(_Avatar)
THEN
DB_Avatars(_Avatar);

//For Story Reloads
IF
DB_IsPlayer(_Avatar)
AND
IsTagged((CHARACTERGUID)_Avatar,"AVATAR",1)
AND
NOT DB_Avatars(_Avatar)
THEN
DB_Avatars(_Avatar);

IF
ObjectLostTag((CHARACTERGUID)_Avatar,"AVATAR")
AND
DB_Avatars(_Avatar)
THEN
NOT DB_Avatars(_Avatar);
//END_REGION

//REGION Resurrection Blocking Spell
IF
CharacterUsedSkillOnTarget(_,(CHARACTERGUID)_Origin,"Target_AntiResurrection",_,_)
THEN
SetTag(_Origin,"BLOCK_RESURRECTION");

IF
CharacterUsedSkillOnTarget(_,(CHARACTERGUID)_Origin,"Target_AntiResurrection",_,_)
AND
IsTagged(_Origin,"AVATAR",0)
THEN
DB_GLO_PartyMembers_BlockReturnToRecruitmentPosition(_Origin);
PROC_GLO_PartyMembers_Remove(_Origin,(CHARACTERGUID)NULL_00000000-0000-0000-0000-000000000000,0);
CharacterPurgeQueue(_Origin);

//END_REGION

//REGION Relationship changes
IF
ObjectFlagSet(_Event,(CHARACTERGUID)_Companion,_Inst)
AND
DB_OriginRelationChangeEvent(_Event,(INTEGER)_Amount)
AND
DB_CompanionAvatarBond((CHARACTERGUID)_Companion,_Player)
AND
CharacterGetAttitudeTowardsPlayer(_Companion,(CHARACTERGUID)_Player,_CurrentAttitude)
AND
QRY_OriginRelationModify(_Companion,_Amount)
AND
DB_OriginRelationModifiedAmount(_NewAmount)
AND
IntegerSum(_CurrentAttitude,_NewAmount,_NewAttitude)
THEN
PROC_OriginWarningBlockRemoval(_Companion,_NewAmount);
ObjectClearFlag(_Companion,_Event);
PROC_CheckPlayTut(_Player,"TUT_Relationship_Examine");
DB_SetCompanionAttitude(_Companion,_Player,_NewAttitude);

IF
ObjectFlagSet(_Event,(CHARACTERGUID)_Companion,_Inst)
AND
DB_OriginRelationChangeEvent(_Event,_Amount)
AND
NOT DB_CompanionAvatarBond(_Companion,_)
AND
DB_DialogPlayers(_Inst,_Player,_)
AND
_Player != _Companion
AND
CharacterGetAttitudeTowardsPlayer(_Companion,(CHARACTERGUID)_Player,_CurrentAttitude)
AND
QRY_OriginRelationModify(_Companion,_Amount)
AND
DB_OriginRelationModifiedAmount(_NewAmount)
AND
IntegerSum(_CurrentAttitude,_NewAmount,_NewAttitude)
THEN
PROC_OriginWarningBlockRemoval(_Companion,_NewAmount);
ObjectClearFlag(_Companion,_Event);
DB_SetCompanionAttitude(_Companion,_Player,_NewAttitude);

QRY
QRY_OriginRelationModify((CHARACTERGUID)_Companion,(INTEGER)_Amount)
AND
QRY_OriginRelationModify_Reset() //Resets the return variable, always returns true
AND
DB_OriginRelationModifiers(_Companion,(INTEGER)_Multiply,(INTEGER)_Divide)
AND
IntegerProduct(_Amount,_Multiply,_Intermediate)
AND
IntegerDivide(_Intermediate,_Divide,_NewAmount)
THEN
DB_OriginRelationModifiedAmount(_NewAmount);

QRY
QRY_OriginRelationModify((CHARACTERGUID)_Companion,(INTEGER)_Amount)
AND
NOT DB_OriginRelationModifiedAmount(_)
THEN
DB_OriginRelationModifiedAmount(_Amount);

QRY
QRY_OriginRelationModify_Reset()
AND
DB_OriginRelationModifiedAmount(_NewAmount)
THEN
NOT DB_OriginRelationModifiedAmount(_NewAmount);

QRY
QRY_OriginRelationModify_Reset()
THEN
DB_NoOp(1);

//Every time a warning is given, a block is set on new warnings until a new drop in attitude occurs.
PROC
PROC_OriginWarningBlockRemoval((CHARACTERGUID)_Companion,(INTEGER)_Amount)
AND
_Amount < 0
THEN
NOT DB_OriginWarningBlock(_Companion);

IF
DB_SetCompanionAttitude(_Companion,_Player,_NewAttitude)
AND
_NewAttitude > 100
THEN
NOT DB_SetCompanionAttitude(_Companion,_Player,_NewAttitude);
DB_SetCompanionAttitude(_Companion,_Player,100);

IF
DB_SetCompanionAttitude(_Companion,_Player,_NewAttitude)
AND
_NewAttitude < -50
THEN
NOT DB_SetCompanionAttitude(_Companion,_Player,_NewAttitude);
DB_SetCompanionAttitude(_Companion,_Player,-50);

IF
DB_SetCompanionAttitude(_Companion,_Player,_NewAttitude)
AND
_NewAttitude <= 100
AND
_NewAttitude >= -50
AND
CharacterGetAttitudeTowardsPlayer(_Companion,_Player,_CurrentAttitude)
AND
IntegerSubtract(_NewAttitude,_CurrentAttitude,_Delta)
THEN
CharacterAddAttitudeTowardsPlayer(_Companion,_Player,_Delta);
NOT DB_SetCompanionAttitude(_Companion,_Player,_NewAttitude);

IF
DB_OriginInPartyDialog(_Companion,_Dialog)
THEN
DB_OriginDialog((CHARACTERGUID)_Companion,_Dialog);

PROC
Proc_RelationshipDialog((CHARACTERGUID)_Companion,(STRING)_Dialog,(CHARACTERGUID)_Anchor)
THEN
DB_OriginDialog(_Companion,_Dialog);

IF
DialogEnded(_Dialog,_ID)
AND
NOT DB_Origin_BlockLeavingWarningsDialogs(1)
AND
DB_OriginDialog(_Companion,_Dialog)
AND
DB_DialogPlayers(_ID,_Companion,_)
AND
NOT DB_GLO_PartyMembers_DismissAfterDialog(_ID,_Companion)
AND
DB_CompanionAvatarBond((CHARACTERGUID)_Companion,(CHARACTERGUID)_Player)
AND
DB_DialogPlayers(_ID,_Player,_)
AND
DB_OriginWarning1Dialog(_Companion,_Warning1Dialog)
AND
CharacterGetAttitudeTowardsPlayer(_Companion,_Player,_Attitude)
AND
_Attitude <= -20
AND
QRY_StartDialog(0,_Warning1Dialog,_Companion,_Player)
THEN
NOT DB_OriginWarning1Dialog(_Companion,_Warning1Dialog);
DB_OriginWarningBlock(_Companion);

IF
DialogEnded(_Dialog,_ID)
AND
NOT DB_Origin_BlockLeavingWarningsDialogs(1)
AND
DB_OriginDialog(_Companion,_Dialog)
AND
NOT DB_OriginWarningBlock(_Companion)
AND
NOT DB_GLO_PartyMembers_DismissAfterDialog(_ID,_Companion)
AND
DB_DialogPlayers(_ID,_Companion,_)
AND
DB_CompanionAvatarBond((CHARACTERGUID)_Companion,(CHARACTERGUID)_Player)
AND
DB_DialogPlayers(_ID,_Player,_)
AND
DB_OriginWarning2Dialog(_Companion,_Warning2Dialog)
AND
CharacterGetAttitudeTowardsPlayer(_Companion,_Player,_Attitude)
AND
_Attitude <= -40
AND
QRY_StartDialog(0,_Warning2Dialog,_Companion,_Player)
THEN
NOT DB_OriginWarning2Dialog(_Companion,_Warning2Dialog);
DB_OriginWarningBlock(_Companion);

IF
DialogEnded(_Dialog,_ID)
AND
NOT DB_Origin_BlockLeavingWarningsDialogs(1)
AND
DB_OriginDialog(_Companion,_Dialog)
AND
NOT DB_OriginWarningBlock(_Companion)
AND
NOT DB_GLO_PartyMembers_DismissAfterDialog(_ID,_Companion)
AND
DB_DialogPlayers(_ID,_Companion,_)
AND
DB_CompanionAvatarBond((CHARACTERGUID)_Companion,(CHARACTERGUID)_Player)
AND
DB_DialogPlayers(_ID,_Player,_)
AND
NOT DB_CompanionLeaving(_Companion,_)
AND
CharacterGetAttitudeTowardsPlayer(_Companion,_Player,_Attitude)
AND
_Attitude <= -50
AND
DB_OriginLeavingDialog(_Companion,_LeaveDialog)
THEN
Proc_StartDialog(0,_LeaveDialog,_Companion,_Player);

IF
DialogEnded(_Dialog,_ID)
AND
DB_OriginDialog(_Companion,_Dialog)
THEN
NOT DB_OriginDialog(_Companion,_Dialog);

PROC
PROC_Origins_CompanionLeavePermanently((CHARACTERGUID)_Companion)
AND
DB_CompanionAvatarBond(_Companion,_Player)
THEN
CharacterSetCorpseLootable(_Companion,1);
DB_GLO_PartyMembers_BlockReturnToRecruitmentPosition(_Companion);
Proc_GLO_Origins_RemoveRecruitmentDialogs(_Companion);
PROC_GLO_PartyMembers_MakeNPC(_Companion);
NOT DB_NoLowAttitudeDialog(_Companion);
NOT DB_GLO_PartyMembers_BlockReturnToRecruitmentPosition(_Companion);
NOT DB_CompanionAvatarBond(_Companion,_Player);
Proc_CompanionLeftParty(_Companion,_Player);
Proc_OriginLeft(_Companion,"");

PROC
PROC_Origins_CompanionLeavePermanently((CHARACTERGUID)_Companion)
AND
DB_OriginInPartyDialog(_Companion,_Dialog)
THEN
NOT DB_OriginInPartyDialog(_Companion,_Dialog);

PROC
PROC_Origins_CompanionLeavePermanently((CHARACTERGUID)_Companion)
AND
DB_OriginRecruitmentLocation(_Companion,_Location)
THEN
NOT DB_OriginRecruitmentLocation(_Companion,_Location);

IF
DialogEnded(_OriginLeavingDialog,_Inst)
AND
DB_OriginLeavingDialog(_Companion,_OriginLeavingDialog)
AND
ObjectGetFlag(_Companion,"GLO_Companion_Leave",1)
AND
DB_CompanionAvatarBond((CHARACTERGUID)_Companion,(CHARACTERGUID)_Player)
THEN
PROC_Origins_CompanionLeavePermanently(_Companion);
NOT DB_OriginLeavingDialog(_Companion,_OriginLeavingDialog);
DB_CompanionLeaving(_Companion,_Player);
CharacterMakeStoryNpc(_Companion,1);
ProcCharacterDisappearOutOfSight(_Companion,0,1,"GLO_CompanionLeaves_LowRelation",1);
Proc_OriginLeft(_Companion,"_LowRelation");

IF
DialogEnded(_OriginLeavingDialog,_Inst)
AND
DB_OriginLeavingDialog(_Companion,_OriginLeavingDialog)
AND
ObjectGetFlag(_Companion,"GLO_Companion_Murder",1)
AND
DB_CompanionAvatarBond((CHARACTERGUID)_Companion,(CHARACTERGUID)_Player)
AND
DB_OriginRecruitmentLocation(_Companion,_Location)
THEN
NOT DB_OriginLeavingDialog(_Companion,_OriginLeavingDialog);
CharacterMakeNPC(_Companion);
NOT DB_OriginRecruitmentLocation(_Companion,_Location);
CharacterDie(_Companion,1,"DoT");
NOT DB_IsPlayer(_Companion);
NOT DB_CompanionAvatarBond(_Companion,_Player);
Proc_CompanionLeftParty(_Companion,_Player);
Proc_CheckPartyFull();

IF
DialogEnded(_OriginLeavingDialog,_Inst)
AND
DB_OriginLeavingDialog(_Companion,_OriginLeavingDialog)
AND
ObjectGetFlag(_Companion,"GLO_Companion_Combat",1)
AND
DB_CompanionAvatarBond((CHARACTERGUID)_Companion,(CHARACTERGUID)_Player)
AND
DB_OriginRecruitmentLocation(_Companion,_Location)
THEN
PROC_Origins_CompanionLeavePermanently(_Companion);
NOT DB_OriginLeavingDialog(_Companion,_OriginLeavingDialog);
SetVarFixedString(_Companion,"currentState","");
SetRelationIndivFactionToPlayers(_Companion,0);
Proc_OriginLeft(_Companion,"_LowRelation");

IF
StoryEvent(_Companion,"GLO_CompanionLeaves_LowRelation")
AND
DB_CompanionLeaving((CHARACTERGUID)_Companion,(CHARACTERGUID)_Player)
THEN
NOT DB_CompanionLeaving(_Companion,_Player);
PROC_GLO_PartyMembers_TransferInventoryToPlayer(_Companion,_Player);

IF
ItemAddedToContainer(_Item,_BackPack)
AND
DB_CompanionLeavingBackPack((CHARACTERGUID)_Companion,(CHARACTERGUID)_Player,_BackPack)
AND
ItemGetOriginalOwner(_Item,_Companion)
THEN
ItemSetOriginalOwner(_Item,_Player);


IF
DB_CompanionAvatarBond(_Companion,_Player)
AND
CharacterGetAttitudeTowardsPlayer(_Companion,_Player,_Attitude)
AND
DB_OriginRelationThresholdEvents((STRING)_Event,(INTEGER)_Threshold)
AND
_Attitude >= _Threshold
THEN
ObjectSetFlag(_Companion,_Event);

IF
DB_CompanionAvatarBond(_Companion,_Player)
AND
CharacterGetAttitudeTowardsPlayer(_Companion,_Player,_Attitude)
AND
DB_OriginRelationThresholdEvents(_Event,_Threshold)
AND
_Attitude < _Threshold
THEN
ObjectClearFlag(_Companion,_Event);


IF
CharacterAttitudeTowardsPlayerChanged(_Companion,_Player,_Attitude)
AND
DB_CompanionAvatarBond(_Companion,_Player)
AND
DB_OriginRelationThresholdEvents(_Event,_Threshold)
AND
_Attitude >= _Threshold
THEN
ObjectSetFlag(_Companion,_Event);

IF
CharacterAttitudeTowardsPlayerChanged(_Companion,_Player,_Attitude)
AND
DB_CompanionAvatarBond(_Companion,_Player)
AND
DB_OriginRelationThresholdEvents(_Event,_Threshold)
AND
_Attitude < _Threshold
THEN
ObjectClearFlag(_Companion,_Event);

PROC
Proc_DialogFlagSetup((STRING)_Dialog,(GUIDSTRING)_Companion,(GUIDSTRING)_Player)
AND
DB_OriginRecruitmentDialog((CHARACTERGUID)_Companion,_Dialog)
AND
CharacterGetAttitudeTowardsPlayer(_Companion,(CHARACTERGUID)_Player,_Attitude)
AND
DB_OriginRelationThresholdEvents(_Event,_Threshold)
AND
_Attitude >= _Threshold
THEN
ObjectSetFlag(_Companion,_Event);

PROC
Proc_DialogFlagSetup((STRING)_Dialog,(GUIDSTRING)_Companion,(GUIDSTRING)_Player)
AND
DB_OriginRecruitmentDialog((CHARACTERGUID)_Companion,_Dialog)
AND
CharacterGetAttitudeTowardsPlayer(_Companion,(CHARACTERGUID)_Player,_Attitude)
AND
DB_OriginRelationThresholdEvents(_Event,_Threshold)
AND
_Attitude < _Threshold
THEN
ObjectClearFlag(_Companion,_Event);

//END_REGION


//REGION Companions cant recruit companions
//Companion in party with initiates conversation with unhired companion.
PROC
Proc_StartDialog(0,(STRING)_RecruitementDialog,(GUIDSTRING)_UnhiredCompanion,(GUIDSTRING)_NonAvatar)
AND
DB_OriginRecruitmentDialog((CHARACTERGUID)_UnhiredCompanion,_RecruitementDialog)
AND
NOT DB_Avatars((CHARACTERGUID)_NonAvatar)
AND
DB_CompanionAvatarBond((CHARACTERGUID)_NonAvatar,(CHARACTERGUID)_Avatar)
AND
QRY_SpeakerIsAvailableAndInDialogRange(_Avatar,_NonAvatar)
AND
CharacterIsControlled(_Avatar,0)
AND
QRY_StartDialog(0,_RecruitementDialog,_UnhiredCompanion,_Avatar)
THEN
PROC_CheckPlayTut(_Avatar,"TUT_Comp_Talking_To_Comp");
MakePlayerActive(_Avatar);

PROC
Proc_StartDialog(0,(STRING)_RecruitementDialog,(GUIDSTRING)_UnhiredCompanion,(GUIDSTRING)_NonAvatar)
AND
DB_OriginRecruitmentDialog((CHARACTERGUID)_UnhiredCompanion,_RecruitementDialog)
AND
QRY_StartDialog(0,_RecruitementDialog,_UnhiredCompanion,_NonAvatar)
THEN
DB_NoOp(1);

//Companion in party with initiates conversation with unhired companion.
IF
DialogStarted(_RecruitementDialog,_ID)
AND
DB_OriginRecruitmentDialog(_UnhiredCompanion,_RecruitementDialog)
AND
DB_DialogPlayers(_ID,_Player,1)
AND
NOT DB_Avatars((CHARACTERGUID)_Player)
THEN
PROC_CheckPlayTut(_Player,"TUT_Comp_Talking_To_Comp");
//END_REGION

//REGION Profession Tags
IF
DB_OriginProfessionTags((CHARACTERGUID)_Char,(STRING)_Tag)
THEN
SetTag(_Char,_Tag);


//END_REGION

//REGION
//Res blocked after death
IF
ObjectWasTagged((CHARACTERGUID)_Origin,"BLOCK_RESURRECTION")
AND
DB_FormerCompanionDeath_QuestUpdate(_Origin,(STRING)_Update)
AND
CharacterIsDead(_Origin,1)
THEN
PROC_FormerCompanionDeath_QuestUpdate(_Origin,_Update);

//Died when not in party
IF
CharacterDied((CHARACTERGUID)_Origin)
AND
DB_FormerCompanionDeath_QuestUpdate(_Origin,_Update)
AND
NOT DB_IsPlayer(_Origin)
THEN
PROC_FormerCompanionDeath_QuestUpdate(_Origin,_Update);

//Died with block res
IF
CharacterDied((CHARACTERGUID)_Origin)
AND
DB_FormerCompanionDeath_QuestUpdate(_Origin,_Update)
AND
IsTagged(_Origin,"BLOCK_RESURRECTION",1)
THEN
PROC_FormerCompanionDeath_QuestUpdate(_Origin,_Update);

//Apply update to Avatars
PROC
PROC_FormerCompanionDeath_QuestUpdate((CHARACTERGUID)_Origin,(STRING)_Update)
AND
GetRegion(_Origin,_Region)
AND
_Region != "TUT_Tutorial_A"
AND
DB_Avatars(_Avatar)
THEN
ObjectSetFlag(_Avatar,_Update);

//END_REGION

//REGION CharacterCreation
IF
CharacterStartOriginIntroduction(_Character,_,_Origin)
AND
CharacterGetReservedUserID(_Character,_User)
THEN
ProcStartOriginIntroduction(_Character,_User,_Origin);

IF
CharacterStopOriginIntroduction(_Character,_)
AND
CharacterGetReservedUserID(_Character,_User)
THEN
ProcStopOriginIntroduction(_Character,_User);

IF
StoryEvent((CHARACTERGUID)_Char,"OriginIntroductionFinished")
THEN
CharacterOriginIntroStopped(_Char);

PROC
ProcStartOriginIntroduction((CHARACTERGUID)_Character,(INTEGER)_User,(STRING)_Origin)
AND
DB_InOriginIntroduction(_User)
THEN
ProcStopOriginIntroduction(_Character,_User);

PROC
ProcStartOriginIntroduction(_Character,_User,_Origin)
AND
DB_OriginIntroductions((STRING)_Origin,(STRING)_Anim,(STRING)_Music,(STRING)_Jingle)
THEN
DB_InOriginIntroduction(_User);
MusicPlayForPeer(_Character,_Jingle);
MusicPlayForPeer(_Character,_Music);
SetVarFixedString(_Character,"CCIntroductionAnim",_Anim);
SetStoryEvent(_Character,"GLO_StartOriginIntroduction");

PROC
ProcStopOriginIntroduction((CHARACTERGUID)_Character,(INTEGER)_User)
AND
DB_InOriginIntroduction(_User)
THEN
NOT DB_InOriginIntroduction(_User);
MusicPlayForPeer(_Character,"Presentation_Stop");
SetStoryEvent(_Character,"GLO_StopOriginIntroduction");
PlaySound(_Character,"Origin_Presentation_Stop");
//END_REGION

//REGION Orphan Flag Forwarding
IF
ObjectFlagSet(_Flag,_Companion,_)
AND
DB_OrphanFlagForwarding(_Flag)
AND
DB_CompanionAvatarBond((CHARACTERGUID)_Companion,_Avatar)
THEN
ObjectClearFlag(_Companion,_Flag);
ObjectSetFlag(_Avatar,_Flag);
//END_REGION 
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "__Shared_Campaign"

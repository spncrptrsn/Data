Version 1
SubGoalCombiner SGC_AND
INITSECTION
//Warning As AD
// TODO: what if a custom warning is an AD? Does it get added in there?
DB_CrimeWarningIsAD("GEB_AD_Noticed_EscapedPrisonerHelpful");
DB_CrimeWarningIsAD("GEB_AD_Noticed_Vandalise");
DB_CrimeWarningIsAD("GEB_AD_Noticed_Sneaking");
DB_CrimeWarningIsAD("GEB_AD_Noticed_Smelly");
DB_CrimeWarningIsAD("GEB_AD_Noticed_Weapons");
DB_CrimeWarningIsAD("GEB_AD_Noticed_AttackedAnimal");
DB_CrimeWarningIsAD("GEB_AD_Noticed_KilledAnimal");
DB_CrimeWarningIsAD("GEB_AD_Noticed_AnimalAttackedAnimal");
DB_CrimeWarningIsAD("GEB_AD_Help_Thief");
DB_CrimeWarningIsAD("GEB_AD_FTJ_Noticed_NoCollar");
DB_CrimeWarningIsAD("GEB_AD_Noticed_SummonAssault");
DB_CrimeWarningIsAD("GEB_AD_Noticed_SummonVandalise");
DB_CrimeWarningIsAD("GEB_AD_Noticed_Summon");
DB_CrimeWarningIsAD("GEB_AD_Noticed_SummonMoveItem");
DB_CrimeWarningIsAD("GEB_AD_Noticed_Polymorphed");
DB_CrimeWarningIsAD("GEB_Lohse_AD_Warning_SummonAssault");
DB_CrimeWarningIsAD("GEB_Ifan_AD_Warning_SummonAssault");
DB_CrimeWarningIsAD("GEB_Sebille_AD_Warning_SummonAssault");
DB_CrimeWarningIsAD("GEB_RedPrince_AD_Warning_SummonAssault");
DB_CrimeWarningIsAD("GEB_AD_NoticedDeadSilentMonk");

// Trespassing
DB_TrespassingCrimes("Trespassing");

// Murder

// Killing -> Murder type mapping : Sneak or not, Killed animal or not, killer is Summon or not
DB_CRIME_MurderType(0,0,0,"Murder");
DB_CRIME_MurderType(1,0,0,"SneakMurder");
DB_CRIME_MurderType(0,1,0,"KilledAnimal");
DB_CRIME_MurderType(1,1,0,"SneakKilledAnimal");
DB_CRIME_MurderType(0,0,1,"SummonMurder");
DB_CRIME_MurderType(1,0,1,"SummonMurder");
DB_CRIME_MurderType(0,1,1,"SummonKilledAnimal");
DB_CRIME_MurderType(1,1,1,"SummonKilledAnimal");

DB_CRIME_ForbiddenStatus("LYING");

//For Status Reactions
DB_StatusReaction("SMELLY","Smelly");
DB_StatusReaction("UNSHEATHED","WeaponsDrawn");

//Ingnore Vandalise Tags
DB_IgnoreVandaliseTag("JUNK");
DB_IgnoreVandaliseTag("IGNOREVANDALISE");

//Bribe
DB_CrimeTriggers_GeneralBribeDialog(1,"GEB_Arrest");
DB_CrimeTriggers_GeneralBribeDialog(1,"GEB_Arrest_EscapedPrison");
DB_CrimeTriggers_GeneralBribeDialog(1,"GEB_Arrest_Theft");
DB_CrimeTriggers_GeneralBribeDialog(1,"GEB_Arrest_Trespassing");
DB_CrimeTriggers_GeneralBribeDialog(1,"GEB_Arrest_UseForbiddenItem");
DB_CrimeTriggers_GeneralBribeDialog(1,"GEB_Arrest_Vandalise");
DB_CrimeTriggers_GeneralBribeDialog(1,"GEB_Interrogation");
DB_CrimeTriggers_GeneralBribeDialog(1,"GEB_Interrogation_Assault");
DB_CrimeTriggers_GeneralBribeDialog(1,"GEB_Interrogation_Murder");
DB_CrimeTriggers_GeneralBribeDialog(1,"GEB_Interrogation_PickPocketNoticed");
DB_CrimeTriggers_GeneralBribeDialog(1,"GEB_Interrogation_Steal");
DB_CrimeTriggers_GeneralBribeDialog(1,"GEB_Interrogation_UsedSource");
DB_CrimeTriggers_GeneralBribeDialog(1,"GEB_Interrogation_Vandalise");
DB_CrimeTriggers_GeneralBribeDialog(1,"GEB_Warning_PickPocketFailed_EvidenceCheck");

//Pickpocket
DB_CannotPickpocketTags("ANIMAL");
DB_CannotPickpocketTags("ELEMENTAL");
DB_CannotPickpocketTags("GHOST");
DB_CannotPickpocketTags("VOIDLING");
DB_CannotPickpocketTags("VOIDSECT");
DB_CannotPickpocketTags("VOID_SOLDIER");
DB_CannotPickpocketTags("ALANBIRD");
DB_CannotPickpocketTags("MOLESPITTER");
DB_CannotPickpocketTags("NIGHTFANG");
DB_CannotPickpocketTags("VOIDWOLF");
DB_CannotPickpocketTags("FLESH_GOLEM");
DB_CannotPickpocketTags("BLOCK_PICKPOCKET");

//Attitude Change
DB_CrimeAttitudeChange("SourceMagic",-5);
DB_CrimeAttitudeChange("Murder",-30);
DB_CrimeAttitudeChange("SpiritTalk",-1);
DB_CrimeAttitudeChange("Assault",-20);
DB_CrimeAttitudeChange("Steal",-5);
DB_CrimeAttitudeChange("PickPocketFailed",-5);
DB_CrimeAttitudeChange("PickPocket",-10);
DB_CrimeAttitudeChange("ItemDestroy",-15);
DB_CrimeAttitudeChange("Vandalise",-10);
DB_CrimeAttitudeChange("VandaliseNoOwner",-5);
DB_CrimeAttitudeChange("Trespassing",-5);
DB_CrimeAttitudeChange("UseForbiddenItem",-5);
DB_CrimeAttitudeChange("MoveForbiddenItem",-5);
DB_CrimeAttitudeChange("AttackAnimal",-5);
DB_CrimeAttitudeChange("TeleportPlayerDialog",-5);

//Evidence check
DB_EvidenceCheckInWarning("GEB_Warning_PickPocketFailed_EvidenceCheck");
DB_EvidenceCheckInWarning("RC_WH_DijinnItem_Interrogation");

DB_NeutralTagIgnore("GHOST");

DB_Negate(0,1);
DB_Negate(1,0);

DB_IgnoreDamageSources("SurfaceMove");
DB_IgnoreDamageSources("StatusTick");
DB_IgnoreDamageSources("SurfaceStatus");
DB_IgnoreDamageSources("Offhand");

//crime tpyes that should be kept in sync when the parent crime is enabled/disabled
DB_LinkedCrimes("Assault","SummonAssault");
DB_LinkedCrimes("Assault","IncapacitatedAssault");

DB_LinkedCrimes("Murder","KilledAnimal");
DB_LinkedCrimes("Murder","SneakKilledAnimal");
DB_LinkedCrimes("Murder","SneakMurder");
DB_LinkedCrimes("Murder","SummonMurder");
DB_LinkedCrimes("Murder","SummonKilledAnimal");

DB_LinkedCrimes("MoveForbiddenItem", "SummonMoveForbiddenItem");

//crime warning to hostile dialogs
DB_CrimeWarningHostileADs("GEB_Warning_Theft","GEB_AD_Help_Thief");
DB_CrimeWarningHostileADs("GEB_Warning_UseForbiddenItem","GEB_AD_Help_UseForbiddenItem");

// Apply item effect to user
DB_ItemStatusAffectCharacterOnUse("BURNING");
DB_ItemStatusAffectCharacterOnUse("SHOCKED");

// Score increase based on invisible/sneaking. At 9 or more, NPC will realise where attack
// comes from and go to location of that attacker. Script will actually increase by one more
// for implementation reasons (taken into account in values of table below)
//                                  sneaking   invisible   base increase   random increase (mod, 1 -> 0)
DB_CRIME_CrimeLocationScoreIncrease(0,         0,          3,              1);
DB_CRIME_CrimeLocationScoreIncrease(1,         0,          2,              1);
DB_CRIME_CrimeLocationScoreIncrease(0,         1,          1,              1);
DB_CRIME_CrimeLocationScoreIncrease(1,         1,          2,              1);

// score >= threshold -> perform action
DB_CRIME_CrimeLocationScore_GoToAttackerThreshold(9);
DB_CRIME_CrimeLocationScore_StartAttackingThreshold(13);
// health < threshold -> perform action
DB_CRIME_Assault_HealthStartAttackingThreshold(80.0);

// Flee crime reactions
DB_CRIME_FleeReaction("CRIME_Flee");
DB_CRIME_FleeReaction("CRIME_FleeWithAD");

// non-summon/summon versions of move forbidden item
DB_CRIME_MoveForbiddenCrime(0, "MoveForbiddenItem");
DB_CRIME_MoveForbiddenCrime(1, "SummonMoveForbiddenItem");
KBSECTION
PROC
Proc_GameModeStarted("GameMaster",_)
THEN
GoalCompleted;

//REGION Temporarily suspend and resume all currently enabled crimes
IF
StoryEvent((CHARACTERGUID)_Npc, "CRIMES_SuspendCrimeReactions")
THEN
CharacterDisableAllCrimes(_Npc);

IF
StoryEvent((CHARACTERGUID)_Npc, "CRIMES_ResumeCrimeReactions")
AND
NOT DB_CharacterAllCrimesDisabled(_Npc)
THEN
CharacterEnableAllCrimes(_Npc);

IF
StoryEvent((CHARACTERGUID)_Npc, "CRIMES_ResumeCrimeReactions")
AND
DB_CharacterCrimeDisabled(_Npc,_Crime)
THEN
CharacterDisableCrime(_Npc,_Crime);

IF
StoryEvent((CHARACTERGUID)_Npc, "CRIMES_ResumeCrimeReactions")
AND
DB_CharacterCrimeEnabled(_Npc,_Crime)
THEN
CharacterEnableCrime(_Npc,_Crime);
//END_REGION

//REGION Register crime wrapper to  handle ignoring crimes
QRY
QRY_CRIME_CrimeTriggers_IsCrimeFamilyMember((STRING)_Crime,(STRING)_CrimeOrFamily)
AND
_Crime == _CrimeOrFamily
THEN
DB_NOOP(1);

QRY
QRY_CRIME_CrimeTriggers_IsCrimeFamilyMember((STRING)_Crime,(STRING)_CrimeOrFamily)
AND
DB_LinkedCrimes(_CrimeOrFamily,_Crime)
THEN
DB_NOOP(1);

// Built-in:
// * DB_AssaultIgnoreFor(_Witness, _Victim): _Witness ignores all Assault crimes against victim
// * DB_AssaultFamilyIgnoreFor((CHARACTERGUID)_AnyWitness,(CHARACTERGUID)_Victim): _Witness ignores all Assault-like crimes against victim
PROC
PROC_CRIME_CrimeTriggers_GetSilentWitnessesForCrime((INTEGER)_CrimeID,(CHARACTERGUID)_Perpetrator,"Assault",(GUIDSTRING)_Evidence,(CHARACTERGUID)_Victim)
AND
DB_AssaultIgnoreFor((CHARACTERGUID)_AnyWitness,(CHARACTERGUID)_Victim)
THEN
DB_CRIME_CrimeTriggers_SilentWitnessesForCrime(_AnyWitness);

PROC
PROC_CRIME_CrimeTriggers_GetSilentWitnessesForCrime((INTEGER)_CrimeID,(CHARACTERGUID)_Perpetrator,(STRING)_CrimeType,(GUIDSTRING)_Evidence,(CHARACTERGUID)_Victim)
AND
DB_AssaultFamilyIgnoreFor((CHARACTERGUID)_AnyWitness,(CHARACTERGUID)_Victim)
AND
QRY_CRIME_CrimeTriggers_IsCrimeFamilyMember(_CrimeType,"Assault")
THEN
DB_CRIME_CrimeTriggers_SilentWitnessesForCrime(_AnyWitness);

PROC
ProcCharacterRegisterCrime((CHARACTERGUID)_Char,(STRING)_CrimeType,(GUIDSTRING)_Evidence,(CHARACTERGUID)_CrimeWitness,(INTEGER)_CrimeID,(CHARACTERGUID)_Victim)
AND
NOT QRY_CRIME_BlockRegisterCrime(_Char, _CrimeType, _Evidence, _CrimeWitness, _CrimeID, _Victim)
THEN
ProcCharacterRegisterCrimeHandleIgnoresBefore(_Char,_CrimeType,_Evidence,_CrimeWitness,_CrimeID,_Victim);

PROC
ProcCharacterRegisterCrimeWithPosition((CHARACTERGUID)_Char,(STRING)_CrimeType,(GUIDSTRING)_Evidence,(CHARACTERGUID)_CrimeWitness,(REAL)_X,(REAL)_Y,(REAL)_Z,(INTEGER)_CrimeID,(CHARACTERGUID)_Victim)
AND
NOT QRY_CRIME_BlockRegisterCrime(_Char, _CrimeType, _Evidence, _CrimeWitness, _CrimeID, _Victim)
THEN
ProcCharacterRegisterCrimeHandleIgnoresBefore(_Char,_CrimeType,_Evidence,_CrimeWitness,_CrimeID,_Victim);

PROC
ProcCharacterRegisterCrimeHandleIgnoresBefore((CHARACTERGUID)_Char,(STRING)_CrimeType,(GUIDSTRING)_Evidence,(CHARACTERGUID)_CrimeWitness,(INTEGER)_CrimeID,(CHARACTERGUID)_Victim)
THEN
PROC_CRIME_CrimeTriggers_GetSilentWitnessesForCrime(_CrimeID,_Char,_CrimeType,_Evidence,_Victim);

// If this crime is specifically already disabled for the witness, don't do anything special
// except for ignoring the crime
PROC
ProcCharacterRegisterCrimeHandleIgnoresBefore((CHARACTERGUID)_Char,(STRING)_CrimeType,(GUIDSTRING)_Evidence,(CHARACTERGUID)_CrimeWitness,(INTEGER)_CrimeID,(CHARACTERGUID)_Victim)
AND
DB_CRIME_CrimeTriggers_SilentWitnessesForCrime(_AnyWitness)
AND
DB_CharacterCrimeDisabled(_AnyWitness,_CrimeType)
THEN
// Undefine here instead of directly checking in QRY_CRIME_CrimeTriggers_GetSilentWitnessesForCrime(), as
// QRY_CRIME_CrimeTriggers_GetSilentWitnessesForCrime() may be overloaded in user goals and may miss such checks
NOT DB_CRIME_CrimeTriggers_SilentWitnessesForCrime(_AnyWitness);
DB_CRIME_CrimeTriggers_SilentWitnessIgnoreOnly(_AnyWitness);

// If all crimes are disabled for the witness and this one is not enabled, don't do anything special either
// except for ignoring the crime
PROC
ProcCharacterRegisterCrimeHandleIgnoresBefore((CHARACTERGUID)_Char,(STRING)_CrimeType,(GUIDSTRING)_Evidence,(CHARACTERGUID)_CrimeWitness,(INTEGER)_CrimeID,(CHARACTERGUID)_Victim)
AND
DB_CRIME_CrimeTriggers_SilentWitnessesForCrime(_AnyWitness)
AND
DB_CharacterAllCrimesDisabled(_AnyWitness)
AND
NOT DB_CharacterCrimeEnabled(_AnyWitness,_CrimeType)
THEN
NOT DB_CRIME_CrimeTriggers_SilentWitnessesForCrime(_AnyWitness);
DB_CRIME_CrimeTriggers_SilentWitnessIgnoreOnly(_AnyWitness);

// The remaining witnesses that need to temporarily ignore this crime
PROC
ProcCharacterRegisterCrimeHandleIgnoresBefore((CHARACTERGUID)_Char,(STRING)_CrimeType,(GUIDSTRING)_Evidence,(CHARACTERGUID)_CrimeWitness,(INTEGER)_CrimeID,(CHARACTERGUID)_Victim)
AND
DB_CRIME_CrimeTriggers_SilentWitnessesForCrime(_AnyWitness)
THEN
CharacterDisableCrime(_AnyWitness,_CrimeType);

// Register the crime
PROC
ProcCharacterRegisterCrime((CHARACTERGUID)_Char,(STRING)_CrimeType,(GUIDSTRING)_Evidence,(CHARACTERGUID)_CrimeWitness,(INTEGER)_CrimeID,(CHARACTERGUID)_Victim)
AND
NOT QRY_CRIME_BlockRegisterCrime(_Char,_CrimeType,_Evidence,_CrimeWitness,_CrimeID, _Victim)
THEN
CharacterRegisterCrime(_Char,_CrimeType,_Evidence,_CrimeWitness,_CrimeID);

QRY
QRY_CRIME_BlockRegisterCrime((CHARACTERGUID)_Char,(STRING)_CrimeType,(GUIDSTRING)_Evidence,(CHARACTERGUID)_CrimeWitness,(INTEGER)_CrimeID,(CHARACTERGUID)_Victim)
AND
1 == 0
THEN
DB_NOOP(0);

PROC
ProcCharacterRegisterCrimeWithPosition((CHARACTERGUID)_Char,(STRING)_CrimeType,(GUIDSTRING)_Evidence,(CHARACTERGUID)_CrimeWitness,(REAL)_X,(REAL)_Y,(REAL)_Z,(INTEGER)_CrimeID,(CHARACTERGUID)_Victim)
AND
NOT QRY_CRIME_BlockRegisterCrime(_Char, _CrimeType, _Evidence, _CrimeWitness, _CrimeID, _Victim)

THEN
CharacterRegisterCrimeWithPosition(_Char,_CrimeType,_Evidence,_CrimeWitness,_X,_Y,_Z,_CrimeID);

PROC
ProcCharacterRegisterCrime((CHARACTERGUID)_Char,(STRING)_CrimeType,(GUIDSTRING)_Evidence,(CHARACTERGUID)_CrimeWitness,(INTEGER)_CrimeID,(CHARACTERGUID)_Victim)
THEN
ProcCharacterRegisterCrimeHandleIgnoresAfter(_CrimeType,_CrimeID);

PROC
ProcCharacterRegisterCrimeWithPosition((CHARACTERGUID)_Char,(STRING)_CrimeType,(GUIDSTRING)_Evidence,(CHARACTERGUID)_CrimeWitness,(REAL)_X,(REAL)_Y,(REAL)_Z,(INTEGER)_CrimeID,(CHARACTERGUID)_Victim)
THEN
ProcCharacterRegisterCrimeHandleIgnoresAfter(_CrimeType,_CrimeID);

// Ignore the crime for the silent witnesses (they will also ignore it in case they were not a witness
// and discover the crime scene later on) and then re-enable the crime for them
PROC
ProcCharacterRegisterCrimeHandleIgnoresAfter((STRING)_CrimeType,(INTEGER)_CrimeID)
AND
DB_CRIME_CrimeTriggers_SilentWitnessesForCrime(_AnyWitness)
THEN
CrimeIgnoreCrime(_CrimeID,_AnyWitness);
CharacterEnableCrime(_AnyWitness,_CrimeType);
NOT DB_CRIME_CrimeTriggers_SilentWitnessesForCrime(_AnyWitness);

PROC
ProcCharacterRegisterCrimeHandleIgnoresAfter((STRING)_CrimeType,(INTEGER)_CrimeID)
AND
DB_CRIME_CrimeTriggers_SilentWitnessIgnoreOnly(_AnyWitness)
THEN
NOT DB_CRIME_CrimeTriggers_SilentWitnessIgnoreOnly(_AnyWitness);
CrimeIgnoreCrime(_CrimeID,_AnyWitness);
//END_REGION

//REGION Stopping Dialog
IF
CharacterOnCrimeSensibleActionNotification(_NPC,_Region,_CrimeID,_PriorityName,_Dialog,_Criminal,_Criminal2,_Criminal3,_Criminal4,_)
THEN
ProcForceStopDialog(_NPC); //This will only stop ADs Code stops interactive ones and SensibleAction will fail if he can't react to it
//END_REGION

//REGION Behaviour scripts disabling
IF
CrimeDisabled(_Char,"")
THEN
ProcCharacterDisableAllCrimes((CHARACTERGUID)_Char);

IF
CrimeDisabled(_Char,_Crime)
AND
_Crime != ""
THEN
ProcCharacterDisableCrime(_Char,_Crime);

IF
CrimeEnabled(_Char,"")
THEN
ProcCharacterEnableAllCrimes((CHARACTERGUID)_Char);

IF
CrimeEnabled(_Char,_Crime)
AND
_Crime != ""
THEN
ProcCharacterEnableCrime(_Char,_Crime);
//END_REGION

//REGION Crime Enabling/Disabling
PROC
ProcCharacterDisableAllCrimes((CHARACTERGUID)_Char)
THEN
DB_CharacterAllCrimesDisabled(_Char);
CharacterDisableAllCrimes(_Char);

PROC
ProcCharacterEnableAllCrimes((CHARACTERGUID)_Char)
THEN
NOT DB_CharacterAllCrimesDisabled(_Char);
CharacterEnableAllCrimes(_Char);

PROC
ProcCharacterEnableCrime((CHARACTERGUID)_Char,(STRING)_Crime)
THEN
DB_CharacterCrimeEnabled(_Char,_Crime);
CharacterEnableCrime(_Char,_Crime);

PROC
ProcCharacterDisableCrime((CHARACTERGUID)_Char,(STRING)_Crime)
THEN
DB_CharacterCrimeDisabled(_Char,_Crime);
CharacterDisableCrime(_Char,_Crime);

IF
DB_CharacterCrimeEnabled(_Char,_Crime)
THEN
NOT DB_CharacterCrimeDisabled(_Char,_Crime);

IF
DB_CharacterCrimeDisabled(_Char,_Crime)
THEN
NOT DB_CharacterCrimeEnabled(_Char,_Crime);

//END_REGION

//REGION Warning
IF
DB_CrimeReaction_DoNotWarn((CHARACTERGUID)_Char)
THEN
DB_CrimeReaction_DoNotWarn2(_Char);
CharacterEnableCrimeWarnings(_Char,0);

IF
DB_CrimeReaction_DoNotWarn2((CHARACTERGUID)_Char)
AND
NOT DB_CrimeReaction_DoNotWarn(_Char)
THEN
NOT DB_CrimeReaction_DoNotWarn2(_Char);
CharacterEnableCrimeWarnings(_Char,1);


// Crime Warning Request events
//--- Generic Warning:
IF
CharacterOnCrimeSensibleActionNotification(_Warner,_CrimeRegion,_CrimeID,"CRIME_OsirisReaction",_WarningDialog,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_)
AND
NOT DB_CrimeReaction_DoNotWarn(_Warner)
AND
CrimeGetType(_CrimeID,_CrimeName)
AND
NOT DB_CrimeReaction_CustomWarning((CHARACTERGUID)_Warner,_CrimeName,(STRING)_)
THEN
ProcCrimeCheckCrimeTypeForFlags(_CrimeID,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_CrimeName,_WarningDialog);
ProcCrimeSetupWarning(_CrimeRegion,_CrimeID,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_WarningDialog);
ProcCrimeWarningTryStopDialogs(_CrimeID,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_WarningDialog);
ProcCrimeCheckStartedWarning(_CrimeID,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_WarningDialog);


//--- Custom Warning:
IF
CharacterOnCrimeSensibleActionNotification(_Warner,_CrimeRegion,_CrimeID,"CRIME_OsirisReaction",_WarningDialog,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_)
AND
NOT DB_CrimeReaction_DoNotWarn(_Warner)
//AND
//NOT QryCrimeOnlyHasSummonCriminal(_CrimeID,_Criminal1,_Criminal2,_Criminal3,_Criminal4)
AND
CrimeGetType(_CrimeID,_CrimeName)
AND
DB_CrimeReaction_CustomWarning(_Warner,_CrimeName,_CustomDialog)
THEN
ProcCrimeCheckCrimeTypeForFlags(_CrimeID,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_CrimeName,_CustomDialog);
ProcCrimeSetupWarning(_CrimeRegion,_CrimeID,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_CustomDialog);
ProcCrimeWarningTryStopDialogs(_CrimeID,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_CustomDialog);
ProcCrimeCheckStartedWarning(_CrimeID,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_CustomDialog);

//--- No Warning
IF
CharacterOnCrimeSensibleActionNotification(_Warner,_CrimeRegion,_CrimeID,"CRIME_OsirisReaction",_Dialog,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_)
AND
DB_CrimeReaction_DoNotWarn(_Warner)
THEN
CrimeConfrontationDone(_CrimeID,_Warner);


//--- 1) Prepare a DB and set flag
PROC
ProcCrimeCheckCrimeTypeForFlags((INTEGER)_CrimeID,(CHARACTERGUID)_Warner,(CHARACTERGUID)_Criminal1,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4,(STRING)_CrimeType,(STRING)_WarningDialog)
AND
QryCrimeIsVandalismWithTension(_CrimeType)
THEN
ProcCrimeSetupCountFlag(_CrimeID,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4,"Vandalise",_WarningDialog);

PROC
ProcCrimeCheckCrimeTypeForFlags((INTEGER)_CrimeID,(CHARACTERGUID)_Warner,(CHARACTERGUID)_Criminal1,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4,(STRING)_CrimeType,(STRING)_WarningDialog)
AND
NOT QryCrimeIsVandalismWithTension(_CrimeType)
THEN
ProcCrimeSetupCountFlag(_CrimeID,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_CrimeType,_WarningDialog);

QRY
QryCrimeIsVandalismWithTension((STRING)_CrimeType)
AND
_CrimeType == "Vandalise"
THEN
DB_NOOP(1);

QRY
QryCrimeIsVandalismWithTension((STRING)_CrimeType)
AND
_CrimeType == "ItemDestroy"
THEN
DB_NOOP(1);

PROC
ProcCrimeSetupCountFlag((INTEGER)_CrimeID,(CHARACTERGUID)_Warner,(CHARACTERGUID)_Criminal1,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4,(STRING)_CrimeType,(STRING)_WarningDialog)
AND
CrimeGetTension(_CrimeID,_Tension)
AND
_Tension > 0
THEN
DB_Crime_RequestedDialogWithTension(_CrimeType,_WarningDialog,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4);

PROC
ProcCrimeSetupCountFlag((INTEGER)_CrimeID,(CHARACTERGUID)_Warner,(CHARACTERGUID)_Criminal1,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4,(STRING)_CrimeType,(STRING)_WarningDialog)
AND
DB_Crime_RequestedDialogWithTension(_CrimeType,_WarningDialog,_Warner,_,_,_,_)
THEN
ProcCrimeSetupCountFlag_ForEachCriminal(_CrimeType,_Warner,_Criminal1);
ProcCrimeSetupCountFlag_ForEachCriminal(_CrimeType,_Warner,_Criminal2);
ProcCrimeSetupCountFlag_ForEachCriminal(_CrimeType,_Warner,_Criminal3);
ProcCrimeSetupCountFlag_ForEachCriminal(_CrimeType,_Warner,_Criminal4);

PROC
ProcCrimeSetupCountFlag_ForEachCriminal((STRING)_CrimeType,(CHARACTERGUID)_Warner,(CHARACTERGUID)_Criminal)
AND
_Criminal != NULL_00000000-0000-0000-0000-000000000000
AND
NOT DB_Crime_WarningCount(_,_CrimeType,_Criminal,_Warner) // DB doesn't exist yet, meaning the player has never been warned by that NPC with that dialog (i.e. for that crime)
THEN
DB_Crime_WarningCount(1,_CrimeType,_Criminal,_Warner);

PROC
ProcCrimeSetupCountFlag_ForEachCriminal((STRING)_CrimeType,(CHARACTERGUID)_Warner,(CHARACTERGUID)_Criminal)
AND
_Criminal != NULL_00000000-0000-0000-0000-000000000000
AND
DB_Crime_WarningCount(_Pos,_CrimeType,_Criminal,_Warner)
AND
IntegertoString(_Pos,_StrPos)
AND
StringConcatenate("GEB_CrimeWarning_",_StrPos,_Flag)
THEN
ObjectSetFlag(_Criminal,_Flag);

IF
DialogEnded(_Dialog,_ID)
AND
DB_TemporaryHostilityAfterDialog(_,_ID)
AND
DB_CrimeWarningHostileADs(_Dialog,_AD)
AND
DB_DialogNPCs(_ID,_NPC,1)
THEN
Proc_StartDialog(1,_AD,_NPC);

//--- 2) Set variables in the Warner's script
PROC
ProcCrimeSetupWarning((STRING)_CrimeRegion,(INTEGER)_CrimeID,(CHARACTERGUID)_Warner,(CHARACTERGUID)_Criminal1,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4,(STRING)_WarningDialog)
THEN
ObjectClearFlag(_Criminal1,"GEB_CrimeHasEvidenceInInventory");

PROC
ProcCrimeSetupWarning((STRING)_CrimeRegion,(INTEGER)_CrimeID,(CHARACTERGUID)_Warner,(CHARACTERGUID)_Criminal1,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4,(STRING)_WarningDialog)
AND
CrimeGetType(_CrimeID,"Steal")
AND
CrimeFindEvidence(_CrimeID,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4,1,_,_)
THEN
DB_Interrogation(_Warner,_CrimeID);
ObjectSetFlag(_Criminal1,"GEB_CrimeHasEvidenceInInventory");

PROC
ProcCrimeSetupWarning((STRING)_CrimeRegion,(INTEGER)_CrimeID,(CHARACTERGUID)_Warner,(CHARACTERGUID)_Criminal1,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4,(STRING)_WarningDialog)
THEN
SetVarInteger(_Warner,"CrimeID",_CrimeID);
SetVarFixedString(_Warner,"RegionID",_CrimeRegion);
DB_Crime_SetupCriminalIndex(_CrimeID,1);
ProcCrimeSetupValidWarningCriminals(_CrimeID,_Warner,_Criminal1);
ProcCrimeSetupValidWarningCriminals(_CrimeID,_Warner,_Criminal2);
ProcCrimeSetupValidWarningCriminals(_CrimeID,_Warner,_Criminal3);
ProcCrimeSetupValidWarningCriminals(_CrimeID,_Warner,_Criminal4);
ProcCrimeSetupNullWarningCriminals(_CrimeID,_Warner);

PROC
ProcCrimeSetupValidWarningCriminals((INTEGER)_CrimeID,(CHARACTERGUID)_Warner,(CHARACTERGUID)_Criminal)
AND
NOT QryCrimeCharacterIsSummonOrNull(_Criminal)
AND
DB_Crime_SetupCriminalIndex(_CrimeID,_Index)
AND
IntegertoString(_Index,_StrIndex)
AND
StringConcatenate("Criminal",_StrIndex,_Param)
AND
IntegerSum(_Index,1,_NewIndex)
THEN
SetVarObject(_Warner,_Param,_Criminal);
NOT DB_Crime_SetupCriminalIndex(_CrimeID,_Index);
DB_Crime_SetupCriminalIndex(_CrimeID,_NewIndex);

PROC
ProcCrimeSetupNullWarningCriminals((INTEGER)_CrimeID,(CHARACTERGUID)_Warner)
AND
DB_Crime_SetupCriminalIndex(_CrimeID,_Index)
AND
_Index < 5 //goes from 1 to 4
AND
IntegertoString(_Index,_StrIndex)
AND
StringConcatenate("Criminal",_StrIndex,_Param)
AND
IntegerSum(_Index,1,_NewIndex)
THEN
ClearVarObject(_Warner,_Param);
NOT DB_Crime_SetupCriminalIndex(_CrimeID,_Index);
DB_Crime_SetupCriminalIndex(_CrimeID,_NewIndex);
ProcCrimeSetupNullWarningCriminals(_CrimeID,_Warner);

PROC
ProcCrimeSetupWarning((STRING)_CrimeRegion,(INTEGER)_CrimeID,(CHARACTERGUID)_Warner,(CHARACTERGUID)_Criminal1,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4,(STRING)_WarningDialog)
AND
DB_Crime_SetupCriminalIndex(_CrimeID,_Index)
THEN
NOT DB_Crime_SetupCriminalIndex(_CrimeID,_Index);

PROC
ProcCrimeSetupWarning((STRING)_CrimeRegion,(INTEGER)_CrimeID,(CHARACTERGUID)_Warner,(CHARACTERGUID)_Criminal1,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4,(STRING)_WarningDialog)
AND
GetPosition(_Warner,_x,_y,_z)
THEN
SetVarFloat3(_Warner,"NPCOrgPos",_x,_y,_z);

PROC
ProcCrimeSetupWarning((STRING)_CrimeRegion,(INTEGER)_CrimeID,(CHARACTERGUID)_Warner,(CHARACTERGUID)_Criminal1,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4,(STRING)_WarningDialog)
AND
DB_EvidenceCheckInWarning(_WarningDialog) //Sets up Interrogation DB for evidence check in warning Dialog
THEN
DB_Crime_Interrogation(_CrimeID,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_WarningDialog);


//--- 3) Try to stop the warner's dialog
PROC
ProcCrimeWarningTryStopDialogs((INTEGER)_CrimeID,(CHARACTERGUID)_Warner,(CHARACTERGUID)_Criminal1,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4,(STRING)_WarningDialog)
AND
DB_CrimeWarningIsAD(_WarningDialog)
THEN
ProcCrimeInterruptStoryDialogs(_CrimeID,_WarningDialog,0,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4);

PROC
ProcCrimeWarningTryStopDialogs((INTEGER)_CrimeID,(CHARACTERGUID)_Warner,(CHARACTERGUID)_Criminal1,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4,(STRING)_WarningDialog)
AND
NOT DB_CrimeWarningIsAD(_WarningDialog)
THEN
ProcCrimeInterruptStoryDialogs(_CrimeID,_WarningDialog,1,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4);


//--- 4) Verify if the crime dialog succeeded to start and clean up
PROC
ProcCrimeCheckStartedWarning((INTEGER)_CrimeID,(CHARACTERGUID)_Warner,(CHARACTERGUID)_Criminal1,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4,(STRING)_WarningDialog)
AND
DB_Crime_FailedToInterruptStoryDialogs(_CrimeID,_WarningDialog,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4)
AND
DB_Crime_RequestedDialogWithTension(_CrimeType,_WarningDialog,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4)
AND
DB_Crime_WarningCount(_Pos,_Dialog,_Player,_Warner)
AND
IntegertoString(_Pos,_StrPos)
AND
StringConcatenate("GEB_CrimeWarning_",_StrPos,_Flag)
THEN
NOT DB_Crime_RequestedDialogWithTension(_CrimeType,_WarningDialog,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4);
ObjectClearFlag(_Player,_Flag,0);

PROC
ProcCrimeCheckStartedWarning((INTEGER)_CrimeID,(CHARACTERGUID)_Warner,(CHARACTERGUID)_Criminal1,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4,(STRING)_WarningDialog)
AND
DB_Crime_FailedToInterruptStoryDialogs(_CrimeID,_WarningDialog,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4)
THEN
ProcCrimeFailedToInterruptStoryDialog(_CrimeID,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_WarningDialog);
NOT DB_Crime_FailedToInterruptStoryDialogs(_CrimeID,_WarningDialog,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4);
CrimeConfrontationDone(_CrimeID,_Warner);

PROC
ProcCrimeCheckStartedWarning((INTEGER)_CrimeID,(CHARACTERGUID)_Warner,(CHARACTERGUID)_Criminal1,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4,(STRING)_WarningDialog)
AND
DB_Crime_FailedToInterruptStoryDialogs(_CrimeID,_WarningDialog,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4)
AND
CrimeIsContinuous(_CrimeID,1)
THEN
ProcCrimeFailedToInterruptStoryDialog(_CrimeID,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_WarningDialog);
NOT DB_Crime_FailedToInterruptStoryDialogs(_CrimeID,_WarningDialog,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4);

PROC // Useful for custom scripting
ProcCrimeFailedToInterruptStoryDialog((INTEGER)_CrimeID,(CHARACTERGUID)_Warner,(CHARACTERGUID)_Criminal1,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4,(STRING)_WarningDialog)
THEN
DB_NOOP(1);

PROC
ProcCrimeCheckStartedWarning((INTEGER)_CrimeID,(CHARACTERGUID)_Warner,(CHARACTERGUID)_Criminal1,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4,(STRING)_WarningDialog)
AND
DB_Crime_FailedToInterruptStoryDialogs(_AnyCrimeID,_AnyWarningDialog,_AnyWarner,_AnyCriminal1,_AnyCriminal2,_AnyCriminal3,_AnyCriminal4) // Clean up anything that could have failed previously
THEN
NOT DB_Crime_FailedToInterruptStoryDialogs(_AnyCrimeID,_AnyWarningDialog,_AnyWarner,_AnyCriminal1,_AnyCriminal2,_AnyCriminal3,_AnyCriminal4);


//--- Count the warnings done:
IF
DialogEnded(_Dialog,_Inst)
AND
DB_Crime_RequestedDialogWithTension(_CrimeType,_Dialog,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4)
AND
DB_DialogNPCs(_Inst,_Warner,_)
AND
DB_DialogPlayers(_Inst,_Player,_)
AND
DB_Crime_WarningCount(_Pos,_CrimeType,(CHARACTERGUID)_Player,_Warner)
AND
IntegertoString(_Pos,_StrPos)
AND
StringConcatenate("GEB_CrimeWarning_",_StrPos,_Flag)
AND
ObjectGetFlag(_Player,_Flag,1)
AND
IntegerSum(_Pos,1,_NewPos)
THEN
NOT DB_Crime_RequestedDialogWithTension(_CrimeType,_Dialog,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4);
ObjectClearFlag(_Player,_Flag,0);
NOT DB_Crime_WarningCount(_Pos,_CrimeType,_Player,_Warner);
DB_Crime_WarningCount(_NewPos,_CrimeType,_Player,_Warner);

IF
DB_Crime_WarningCount(_NewPos,_CrimeType,_Player,_Warner)
AND
_NewPos > 3
THEN
NOT DB_Crime_WarningCount(_NewPos,_CrimeType,_Player,_Warner);
DB_Crime_WarningCount(3,_CrimeType,_Player,_Warner);

IF
DialogEnded(_Dialog,_Inst)
AND
DB_CrimeWarner(_CrimeID,_Warner,_Dialog)
AND
DB_DialogNPCs(_Inst,_Warner,_)
THEN
CrimeConfrontationDone(_CrimeID,_Warner);
NOT DB_CrimeWarner(_CrimeID,_Warner,_Dialog);

IF
AutomatedDialogEnded(_Dialog,_Inst)
AND
DB_Crime_RequestedDialogWithTension(_CrimeType,_Dialog,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4)
AND
DB_DialogNPCs(_Inst,_Warner,_)
AND
DB_Crime_WarningAD_Target(_CrimeType,_Warner,_Criminal1)
AND
DB_Crime_WarningCount(_Pos,_CrimeType,(CHARACTERGUID)_Player,_Warner)
AND
IntegertoString(_Pos,_StrPos)
AND
StringConcatenate("GEB_CrimeWarning_",_StrPos,_Flag)
AND
ObjectGetFlag(_Player,_Flag,1)
AND
IntegerSum(_Pos,1,_NewPos)
THEN
NOT DB_Crime_RequestedDialogWithTension(_CrimeType,_Dialog,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4);
ObjectClearFlag(_Player,_Flag,0);
NOT DB_Crime_WarningCount(_Pos,_CrimeType,_Player,_Warner);
DB_Crime_WarningCount(_NewPos,_CrimeType,_Player,_Warner);

IF
AutomatedDialogEnded(_Dialog,_Inst)
AND
DB_DialogNPCs(_Inst,_Warner,_)
AND
DB_Crime_WarningAD_Target(_CrimeType,(CHARACTERGUID)_Warner,(CHARACTERGUID)_TargetPlayer)
THEN
NOT DB_Crime_WarningAD_Target(_CrimeType,_Warner,_TargetPlayer);

PROC
ProcHandleCrimeDialog((CHARACTERGUID)_Warner,(CHARACTERGUID)_Criminal1,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4,(STRING)_Dialog,0,(INTEGER)_MarkForInteractive)
THEN
DB_CrimeDialogStartFailed(_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_Dialog);

IF
OnCrimeResolved(_CrimeID,_Victim,_Criminal1,_Criminal2,_Criminal3,_Criminal4)
AND
DB_CrimeDialogStartFailed(_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_Dialog)
AND
DB_Crime_RequestedDialogWithTension(_CrimeType,_Dialog,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4)
AND
DB_Crime_WarningCount(_Pos,_CrimeType,(CHARACTERGUID)_Player,_Warner)
AND
IntegertoString(_Pos,_StrPos)
AND
StringConcatenate("GEB_CrimeWarning_",_StrPos,_Flag)
AND
ObjectGetFlag(_Player,_Flag,1)
AND
IntegerSum(_Pos,1,_NewPos)
THEN
NOT DB_CrimeDialogStartFailed(_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_Dialog);
NOT DB_Crime_RequestedDialogWithTension(_CrimeType,_Dialog,_Warner,_Criminal1,_Criminal2,_Criminal3,_Criminal4);
ObjectClearFlag(_Player,_Flag,0);
NOT DB_Crime_WarningAD_Target(_CrimeType,_Warner,_Player);
NOT DB_Crime_WarningCount(_Pos,_CrimeType,_Player,_Warner);
DB_Crime_WarningCount(_NewPos,_CrimeType,_Player,_Warner);


//REGION Prepare the characters for the dialog
PROC
ProcHandleCrimeDialog((CHARACTERGUID)_Warner,(CHARACTERGUID)_Criminal1,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4,(STRING)_WarningDialog,1,(INTEGER)_MarkForInteractive)
AND
GetPosition(_Warner,_x,_y,_z)
THEN
SetVarFloat3(_Warner,"NPCOrgPos",_x,_y,_z);

PROC
ProcHandleCrimeDialog((CHARACTERGUID)_Warner,(CHARACTERGUID)_Criminal1,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4,(STRING)_WarningDialog,1,1)
THEN
CharacterLookAt(_Warner,_Criminal1,0);
CharacterLookAt(_Criminal1,_Warner,0);
CharacterMakeStoryNpc(_Warner,1);
CharacterMakeStoryNpc(_Criminal1,1);
CharacterMakeStoryNpc(_Criminal2,1);
CharacterMakeStoryNpc(_Criminal3,1);
CharacterMakeStoryNpc(_Criminal4,1);

PROC
ProcHandleCrimeDialog((CHARACTERGUID)_Warner,(CHARACTERGUID)_Criminal1,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4,(STRING)_WarningDialog,1,0)
THEN
CharacterLookAt(_Warner,_Criminal1,0);

PROC
ProcHandleCrimeDialog((CHARACTERGUID)_Warner,(CHARACTERGUID)_Criminal1,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4,(STRING)_WarningDialog,1,_)
AND
DB_CRIME_ForbiddenStatus(_Status)
AND
HasActiveStatus(_Warner,_Status,1)
THEN
RemoveStatus(_Warner,_Status);

IF
CharacterLeftParty(_Summon)
AND
ObjectExists(_Summon,1)
AND
IsTagged(_Summon,"SUMMON",1)
AND
DB_Crime_WarningCount(_Pos,_CrimeType,_Summon,_Warner)
THEN
NOT DB_Crime_WarningCount(_Pos,_CrimeType,_Summon,_Warner);

//END_REGION

//REGION Check Prison Cell in Warning

IF
CharacterOnCrimeSensibleActionNotification(_Warner,_CrimeRegion,_CrimeID,"CRIME_OsirisReaction",_Dialog,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_)
THEN
ObjectClearFlag(_Warner,"GEB_Arrest_HavePrison",0);

IF
CharacterOnCrimeSensibleActionNotification(_Warner,_CrimeRegion,_CrimeID,"CRIME_OsirisReaction",_Dialog,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_)
AND
DB_RegionPrison(_CrimeRegion,_)
THEN
ObjectSetFlag(_Warner,"GEB_Arrest_HavePrison");

//END_REGION
//END_REGION

//REGION Summon check

//--- Only summon (or null) in criminals
QRY
QryCrimeOnlyHasSummonCriminal((CHARACTERGUID)_Criminal1,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4)
AND
QryCrimeCharacterIsSummonOrNull(_Criminal1)
AND
QryCrimeCharacterIsSummonOrNull(_Criminal2)
AND
QryCrimeCharacterIsSummonOrNull(_Criminal3)
AND
QryCrimeCharacterIsSummonOrNull(_Criminal4)
THEN
DB_NOOP(1);

QRY
QryCrimeCharacterIsSummonOrNull((CHARACTERGUID)_Char)
AND
QRY_CharacterIsNull(_Char)
THEN
DB_NOOP(1);

QRY
QryCrimeCharacterIsSummonOrNull((CHARACTERGUID)_Char)
AND
NOT QRY_CharacterIsNull(_Char)
AND
IsTagged(_Char,"SUMMON",1)
THEN
DB_NOOP(1);


QRY
QryCrimeAssailantIsNotSummon((CHARACTERGUID)_Char,(CHARACTERGUID)_Summon)
AND
_Char == _Summon
THEN
DB_NOOP(1);

QRY
QryCrimeAssailantIsNotSummon((CHARACTERGUID)_Char,(CHARACTERGUID)_Summon)
AND
QRY_CharacterIsNull(_Summon)
THEN
DB_NOOP(1);


//--- Continuous summon crime
IF
CharacterJoinedParty(_Char)
AND
IsTagged(_Char,"SUMMON",1)
THEN
CharacterRegisterCrime(_Char,"ActiveSummon",NULL_00000000-0000-0000-0000-000000000000,NULL_00000000-0000-0000-0000-000000000000,0);

IF
CharacterLeftParty(_Char)
AND
IsTagged(_Char,"SUMMON",1)
THEN
CharacterStopCrime(_Char,"ActiveSummon",NULL_00000000-0000-0000-0000-000000000000);

//END_REGION

//REGION Investigation
// Override crime scene location (needs to be exact to ensure that e.g. in case of assault,
// we don't have a crime scene too far for the victim to see or hear) with a separate investigation
// location if appropriate
IF
StoryEvent((CHARACTERGUID)_Investigator,"CRIME_SetCrimeInvestigationPos")
AND
GetVarInteger(_Investigator,"CrimeID",_CrimeID)
AND
DB_CRIME_CrimeInvestigationPos(_CrimeID,_X,_Y,_Z)
THEN
// In case it's an alternate position, run rather than walk, because it means
// that we probably cannot find anything in the default location
SetVarInteger(_Investigator,"bool_RunToInvestigationScene",1);
SetVarFloat3(_Investigator,"CrimePos",_X,_Y,_Z);

IF
StoryEvent((CHARACTERGUID)_Investigator,"CRIME_SetCrimeInvestigationPos")
THEN
CharacterSetReactionPriority(_Investigator,"WalkToCrimeScene",30000);
//END_REGION

//REGION Interrogation

IF
CrimeInterrogationRequest(_RegionID,_ID,_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_Dialog)
THEN
ObjectClearFlag(_Interrogator,"GEB_Arrest_HavePrison",0);

IF
CrimeInterrogationRequest(_RegionID,_ID,_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_Dialog)
AND
DB_RegionPrison((STRING)_RegionID,(TRIGGERGUID)_)
THEN
ObjectSetFlag(_Interrogator,"GEB_Arrest_HavePrison");

PROC
ProcCrimeCheckInterrogationDialog((STRING)_RegionID,(INTEGER)_ID,(CHARACTERGUID)_Interrogator,(CHARACTERGUID)_Criminal1,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4,(STRING)_Dialog)
AND
IsTagged(_Interrogator,"ANIMAL",0)
AND
IsTagged(_Interrogator,"KID",0)
THEN
DB_Crime_InterrogationStarted(_ID,_Interrogator);
ProcStartInterrogationDialog(_ID,_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_Dialog);

PROC
ProcCrimeCheckInterrogationDialog((STRING)_RegionID,(INTEGER)_ID,(CHARACTERGUID)_Interrogator,(CHARACTERGUID)_Criminal1,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4,(STRING)_Dialog)
AND
NOT DB_Crime_InterrogationStarted(_ID,_Interrogator)
AND
IsTagged(_Interrogator,"ANIMAL",1)
THEN
DB_Crime_InterrogationStarted(_ID,_Interrogator);
CrimeInterrogationDone(_ID,_Interrogator,1,_Criminal1,_Criminal2,_Criminal3,_Criminal4);

PROC
ProcCrimeCheckInterrogationDialog((STRING)_RegionID,(INTEGER)_ID,(CHARACTERGUID)_Interrogator,(CHARACTERGUID)_Criminal1,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4,(STRING)_Dialog)
AND
NOT DB_Crime_InterrogationStarted(_ID,_Interrogator)
AND
IsTagged(_Interrogator,"AGGRESSIVEANIMAL",1)
THEN
DB_Crime_InterrogationStarted(_ID,_Interrogator);
Proc_StartDialog(1,"GEB_AD_Noticed_AnimalAttackedAnimal",_Interrogator);
ProcMakeNPCHostile(_Interrogator,_Criminal1);
ProcMakeNPCHostile(_Interrogator,_Criminal2);
ProcMakeNPCHostile(_Interrogator,_Criminal3);
ProcMakeNPCHostile(_Interrogator,_Criminal4);

PROC
ProcCrimeCheckInterrogationDialog((STRING)_RegionID,(INTEGER)_ID,(CHARACTERGUID)_Interrogator,(CHARACTERGUID)_Criminal1,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4,(STRING)_Dialog)
AND
NOT DB_Crime_InterrogationStarted(_ID,_Interrogator)
AND
IsTagged(_Interrogator,"KID",1)
THEN
DB_Crime_InterrogationStarted(_ID,_Interrogator);
CrimeInterrogationDone(_ID,_Interrogator,1,_Criminal1,_Criminal2,_Criminal3,_Criminal4);

PROC
ProcCrimeCheckInterrogationDialog((STRING)_RegionID,(INTEGER)_ID,(CHARACTERGUID)_Interrogator,(CHARACTERGUID)_Criminal1,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4,(STRING)_Dialog)
THEN
NOT DB_Crime_InterrogationStarted(_ID,_Interrogator);


//--- Interrogation requested:
IF
CrimeInterrogationRequest(_RegionID,_ID,_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_Dialog)
THEN
DB_InterrogationRequested(_RegionID,_ID,_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_Dialog);
CharacterDisableAllCrimes(_Interrogator);
SetHasDialog(_Interrogator,0);	//TODO: this is not great, we assume these guys have dialogs
CharacterMoveToAndTalk(_Interrogator,_Criminal1,"",0,"GEB_InterrogationMove",1,6.0);

IF
CharacterMoveToAndTalkRequestDialog(_Arrester,(CHARACTERGUID)_Criminal,_,_,"GEB_InterrogationMove")
AND
DB_InterrogationRequested(_RegionID,_ID,_Arrester,_Criminal,_Criminal2,_Criminal3,_Criminal4,_Dialog)
THEN
ProcCrimeCheckInterrogationDialog(_RegionID,_ID,_Arrester,_Criminal,_Criminal2,_Criminal3,_Criminal4,_Dialog);

IF
CharacterMoveToAndTalkFailed(_Arrester,_,"GEB_InterrogationMove")
AND
DB_InterrogationRequested(_RegionID,_ID,_Arrester,_Criminal,_Criminal2,_Criminal3,_Criminal4,_Dialog)
THEN
PROC_HandleFailedInterrogation(_Arrester,_ID);

IF
CharacterMoveToAndTalkRequestDialogFailedEvent(_Arrester,_,"GEB_InterrogationMove")
AND
DB_InterrogationRequested(_RegionID,_ID,_Arrester,_Criminal,_Criminal2,_Criminal3,_Criminal4,_Dialog)
THEN
PROC_HandleFailedInterrogation(_Arrester,_ID);

PROC
PROC_HandleFailedInterrogation((CHARACTERGUID)_Arrester,(INTEGER)_ID)
AND
DB_InterrogationRequested(_RegionID,_ID,_Arrester,_Criminal,_Criminal2,_Criminal3,_Criminal4,_Dialog)
THEN
PROC_CancelInterrogation(_Arrester,_ID,0,_Criminal,_Criminal2,_Criminal3,_Criminal4);

PROC
PROC_CancelInterrogation((CHARACTERGUID)_Arrester,(INTEGER)_ID,(INTEGER)_FoundEvidence,(CHARACTERGUID)_Criminal,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4)
THEN
CrimeInterrogationDone(_ID,_Arrester,_FoundEvidence,_Criminal,_Criminal2,_Criminal3,_Criminal4);
ProcCleanUpInterrogation(_Arrester);
NOT DB_IgnoreInterrogation(_Arrester,NULL_00000000-0000-0000-0000-000000000000);
ProcObjectTimer(_Arrester,"GEB_RestoreInterrogation",4500);
CrimeEnableInterrogation(_Arrester,0);

PROC //allow others to interrogate them if no evidence was found
PROC_CancelInterrogation((CHARACTERGUID)_Arrester,(INTEGER)_ID,0,(CHARACTERGUID)_Criminal,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4)
THEN
CrimeResetInterrogationForCriminals(_ID,_Criminal,_Criminal2,_Criminal3,_Criminal4);

PROC
ProcObjectTimerFinished((CHARACTERGUID)_Arrester,"GEB_RestoreInterrogation")
AND
NOT DB_CrimeReaction_DoNotInterrogate(_Arrester)
THEN
CrimeEnableInterrogation(_Arrester,1);

PROC
ProcCleanUpInterrogation((CHARACTERGUID)_Arrester)
AND
DB_InterrogationRequested(_RegionID,_ID,_Arrester,_Criminal,_Criminal2,_Criminal3,_Criminal4,_Dialog)
THEN
ProcRestoreGenericBehaviour(_Arrester);
SetHasDialog(_Arrester,1);
NOT DB_InterrogationRequested(_RegionID,_ID,_Arrester,_Criminal,_Criminal2,_Criminal3,_Criminal4,_Dialog);

IF
CharacterMoveToAndTalkRequestDialog(_Arrester,(CHARACTERGUID)_Criminal,_,_,"GEB_InterrogationMove")
AND
NOT DB_InterrogationRequested(_,_,_Arrester,_Criminal,_,_,_,_)
THEN
CharacterMoveToAndTalkRequestDialogFailed(_Arrester,_Criminal,"GEB_InterrogationMove");

IF
DB_Crime_FailedToInterruptStoryDialogs(_CrimeID,_ArrestDialog,_Arrester,_Criminal,_Criminal2,_Criminal3,_Criminal4)
AND
DB_InterrogationRequested(_RegionID,_CrimeID,_Arrester,_Criminal,_Criminal2,_Criminal3,_Criminal4,_ArrestDialog)
THEN
CharacterMoveToAndTalkRequestDialogFailed(_Arrester,_Criminal,"GEB_InterrogationMove");

IF
DB_Crime_InterrogationStarted(_CrimeID,_Arrester)
AND
DB_InterrogationRequested(_RegionID,_CrimeID,_Arrester,_Criminal,_Criminal2,_Criminal3,_Criminal4,_ArrestDialog)
THEN
ProcCleanUpInterrogation(_Arrester);

IF
OnCrimeResolved(_CrimeID,_,_,_,_,_)
AND
DB_InterrogationRequested(_,_CrimeID,_Arrester,_,_,_,_,_)
THEN
ProcCleanUpInterrogation(_Arrester);

//--- Start dialog:
PROC
ProcStartInterrogationDialog((INTEGER)_CrimeID,(CHARACTERGUID)_Interrogator,(CHARACTERGUID)_Criminal1,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4,(STRING)_Dialog)
AND
_Dialog == ""
THEN
ProcDoStartInterrogationDialog(_CrimeID,_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4,"GEB_Interrogation");

PROC
ProcStartInterrogationDialog((INTEGER)_CrimeID,(CHARACTERGUID)_Interrogator,(CHARACTERGUID)_Criminal1,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4,(STRING)_Dialog)
AND
_Dialog != ""
THEN
ProcDoStartInterrogationDialog(_CrimeID,_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_Dialog);

PROC
ProcDoStartInterrogationDialog((INTEGER)_,(CHARACTERGUID)_Interrogator,(CHARACTERGUID)_Criminal1,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4,(STRING)_Dialog)
AND
DB_Interrogation(_Interrogator,_CrimeID)
THEN
NOT DB_Interrogation(_Interrogator,_CrimeID); // This Database is set on CRIME_Allow_Search

PROC
ProcDoStartInterrogationDialog((INTEGER)_CrimeID,(CHARACTERGUID)_Interrogator,(CHARACTERGUID)_Criminal1,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4,(STRING)_Dialog)
THEN
ProcCrimeInterruptStoryDialogs(_CrimeID,_Dialog,1,_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4);
ProcCrimeCheckInterrogationDialogSucceeded(_CrimeID,_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_Dialog);

PROC
ProcCrimeCheckInterrogationDialogSucceeded((INTEGER)_CrimeID,(CHARACTERGUID)_Interrogator,(CHARACTERGUID)_Criminal1,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4,(STRING)_Dialog)
AND
NOT DB_Crime_FailedToInterruptStoryDialogs(_CrimeID,_Dialog,_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4)
THEN
DB_Crime_Interrogation(_CrimeID,_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_Dialog);
DB_Interrogation(_Interrogator,_CrimeID);

PROC
ProcCrimeCheckInterrogationDialogSucceeded((INTEGER)_CrimeID,(CHARACTERGUID)_Interrogator,(CHARACTERGUID)_Criminal1,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4,(STRING)_Dialog)
AND
DB_Crime_FailedToInterruptStoryDialogs(_CrimeID,_Dialog,_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4)
THEN
CrimeInterrogationDone(_CrimeID,_Interrogator,1,_Criminal1,_Criminal2,_Criminal3,_Criminal4);

IF
ObjectFlagSet("CRIME_Allow_Search",(CHARACTERGUID)_Interrogator,_ID)
THEN
ObjectClearFlag(_Interrogator,"CRIME_Allow_Search",_ID);
ObjectClearFlag(_Interrogator,"CRIME_EvidenceFound",_ID);
ObjectClearFlag(_Interrogator,"CRIME_GuiltFound",_ID);
ObjectClearFlag(_Interrogator,"CRIME_FoundEvidenceCurrentCrime",_ID);
ObjectClearFlag(_Interrogator,"CRIME_FoundGuiltyPlayer",_ID);

IF
ObjectFlagSet("CRIME_Allow_Search",(CHARACTERGUID)_Interrogator,_ID)
AND
DB_Crime_Interrogation(_CrimeID,_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_)
AND
CrimeFindEvidence(_CrimeID,_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_FoundEvidenceCurrentCrime,_FoundEvidence,_FoundGuilty)
AND
QRY_GetCriminalGuilty(_CrimeID,_Interrogator,_FoundEvidenceCurrentCrime,_FoundEvidence,_FoundGuilty)
THEN
DB_Interrogation(_Interrogator,_CrimeID);

IF
ObjectFlagSet("CRIME_Resist_Search",(CHARACTERGUID)_Character,_ID)
THEN
ObjectClearFlag(_Character,"CRIME_Resist_Search",_ID);
DB_Crime_CombatAfterDialog(_ID);

QRY
QRY_GetCriminalGuilty((INTEGER)_CrimeID,(CHARACTERGUID)_Interrogator,(INTEGER)_FoundEvidenceCurrentCrime,(INTEGER)_FoundEvidence,(INTEGER)_FoundGuilty)
AND
_FoundEvidence == 1
THEN
ObjectSetFlag(_Interrogator,"CRIME_EvidenceFound",0);

QRY
QRY_GetCriminalGuilty((INTEGER)_CrimeID,(CHARACTERGUID)_Interrogator,(INTEGER)_FoundEvidenceCurrentCrime,(INTEGER)_FoundEvidence,(INTEGER)_FoundGuilty)
AND
_FoundGuilty == 1
THEN
ObjectSetFlag(_Interrogator,"CRIME_GuiltFound",0);

QRY
QRY_GetCriminalGuilty((INTEGER)_CrimeID,(CHARACTERGUID)_Interrogator,(INTEGER)_FoundEvidenceCurrentCrime,(INTEGER)_FoundEvidence,(INTEGER)_FoundGuilty)
AND
_FoundEvidenceCurrentCrime == 1
THEN
ObjectSetFlag(_Interrogator,"CRIME_FoundEvidenceCurrentCrime",0);

//Resolve Crime
IF
ObjectFlagSet("CRIME_FoundGuiltyPlayer",(CHARACTERGUID)_Interrogator,_ID)
AND
DB_Interrogation(_Interrogator,_CrimeID)
THEN
DB_EvidenceFound(_CrimeID,_Interrogator);
//DebugText(_Interrogator,"Evidence Found");

//Give Evidance Back to investigator
IF
ObjectFlagSet("CRIME_ReturnGoodsToOnwer",(CHARACTERGUID)_Interrogator,_ID)
AND
DB_Interrogation(_Interrogator,_CrimeID)
THEN
ObjectClearFlag(_Interrogator,"CRIME_ReturnGoodsToOnwer",_ID);
CrimeTransferEvidenceTo(_CrimeID,_Interrogator);

IF
ObjectFlagSet("CRIME_CallGuardsFromDialog",(CHARACTERGUID)_Interrogator,_ID) // When A Civilian finds a Thief in Interrogation
AND
DB_DialogPlayers(_ID,_Criminal,1)
THEN
ObjectClearFlag(_Interrogator,"CRIME_CallGuardsFromDialog");
DB_Crime_CallingGuards(_Interrogator,_Criminal,_ID);

IF
DialogEnded(_Dialog,_ID)
AND
DB_DialogNPCs(_ID,_Interrogator,1)
AND
DB_Crime_Interrogation(_CrimeID,(CHARACTERGUID)_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_Dialog)
AND
NOT DB_Crime_CallingGuards(_Interrogator,_,_ID)
THEN
ProcCheckInterrogationDone(_Interrogator,_Dialog);

PROC
ProcCheckInterrogationDone((CHARACTERGUID)_Interrogator,(STRING)_Dialog)
AND
NOT DB_EvidenceCheckInWarning(_Dialog)
AND
DB_Crime_Interrogation(_CrimeID,_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_Dialog)
THEN
NOT DB_Crime_Interrogation(_CrimeID,_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_Dialog);
ProcStopInterrogation(_CrimeID,_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4);


IF
DialogEnded(_Dialog,_ID)
AND
DB_Crime_CallingGuards(_Interrogator,_Criminal,_ID)
AND
DB_Interrogation(_Interrogator,_CrimeID)
THEN
SetVarObject(_Interrogator,"Criminal1",(CHARACTERGUID)_Criminal); // TODO REMOVE THIS HACK!
SetVarString(_Interrogator,"ArrestDialog","GEB_Arrest");
SetVarInteger(_Interrogator,"CrimeID",_CrimeID);
SetStoryEvent(_Interrogator,"CRIME_CallGuardsFromDialog");
NOT DB_Crime_CallingGuards(_Interrogator,_Criminal,_ID);

IF
ObjectFlagSet("CRIME_FleeHelpFromDialog",(CHARACTERGUID)_Interrogator,_ID) // When A Kid finds a Criminal in Interrogation
AND
DB_DialogPlayers(_ID,_Criminal,1)
THEN
DB_Crime_FleeCallforHelp(_Interrogator,_Criminal,_ID);

IF
DialogEnded(_Dialog,_ID)
AND
DB_Crime_FleeCallforHelp(_Interrogator,_Criminal,_ID)
AND
DB_Interrogation(_Interrogator,_CrimeID)
THEN
SetVarObject(_Interrogator,"Criminal1",(CHARACTERGUID)_Criminal); // TODO REMOVE THIS HACK!
SetVarString(_Interrogator,"ArrestDialog","GEB_Arrest");
SetVarInteger(_Interrogator,"CrimeID",_CrimeID);
SetStoryEvent(_Interrogator,"CRIME_FleeHelpFromDialog");
//CrimeInterrogationDone(_CrimeID,_Interrogator,1);
NOT DB_Crime_FleeCallforHelp(_Interrogator,_Criminal,_ID);

IF
DialogEnded(_Dialog,_ID)
AND
DB_DialogPlayers(_ID,_Player,1)
AND
ObjectGetFlag(_Player,"CRIME_PersuasionFailed",1)
THEN
ObjectClearFlag(_Player,"CRIME_PersuasionFailed",0);

// Stop Investigation when join combat


//REGION Dialog Ended
IF
DialogEnded(_Dialog,_ID)
AND
DB_Crime_CombatAfterDialog(_ID)
AND
DB_DialogNPCs(_ID,_Interrogator,1)
AND
DB_DialogPlayers(_ID,_Player,_)
THEN
ProcMakeNPCHostile((CHARACTERGUID)_Player,(CHARACTERGUID)_Interrogator);
NOT DB_Crime_CombatAfterDialog(_ID);

IF
DialogEnded(_Dialog,_ID)
AND
DB_DialogNPCs(_ID,_Interrogator,1)
AND
DB_Crime_Interrogation(_CrimeID,(CHARACTERGUID)_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_Dialog)
THEN
NOT DB_Crime_Interrogation(_CrimeID,(CHARACTERGUID)_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_Dialog);

PROC
ProcStopInterrogation((INTEGER)_CrimeID,(CHARACTERGUID)_Interrogator,(CHARACTERGUID)_Criminal1,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4)
AND
DB_EvidenceFound(_CrimeID,_Interrogator)
THEN
CrimeInterrogationDone(_CrimeID,_Interrogator,1,_Criminal1,_Criminal2,_Criminal3,_Criminal4);

PROC
ProcStopInterrogation((INTEGER)_CrimeID,(CHARACTERGUID)_Interrogator,(CHARACTERGUID)_Criminal1,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4)
AND
NOT DB_EvidenceFound(_CrimeID,_Interrogator)
THEN
CrimeInterrogationDone(_CrimeID,_Interrogator,0,_Criminal1,_Criminal2,_Criminal3,_Criminal4);

PROC
ProcStopInterrogation((INTEGER)_CrimeID,(CHARACTERGUID)_Interrogator,(CHARACTERGUID)_Criminal1,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4)
THEN
NOT DB_EvidenceFound(_CrimeID,_Interrogator);
//END_REGION

//REGION Saw Criminal In Combat While Invesigating
IF
OnCrimeSawCriminalInCombat(_CrimeID,_Witness,_Criminal)
AND
IsTagged(_Witness,"CIVILIAN",0)
AND
IsTagged(_Witness,"ANIMAL",0) //Animals should not investigate should be disabled in excel
THEN
ProcMakeNPCHostile(_Witness,_Criminal);
//END_REGION
//END_REGION

//REGION Trespassing

//--- Registering DB
IF
DB_TrespassTrigger((TRIGGERGUID)_Trigger,(TRIGGERGUID)_OutTrigger)
THEN
DB_TrespassTrigger((TRIGGERGUID)_Trigger,(TRIGGERGUID)_OutTrigger,"Trespassing",(CHARACTERGUID)NULL_00000000-0000-0000-0000-000000000000);

IF
DB_TrespassTrigger((TRIGGERGUID)_Trigger,(TRIGGERGUID)_OutTrigger,(STRING)_CrimeName)
THEN
DB_TrespassTrigger((TRIGGERGUID)_Trigger,(TRIGGERGUID)_OutTrigger,(STRING)_CrimeName,(CHARACTERGUID)NULL_00000000-0000-0000-0000-000000000000);

IF
DB_TrespassTrigger((TRIGGERGUID)_Trigger,(TRIGGERGUID)_OutTrigger,(STRING)_CrimeName,(CHARACTERGUID)_Victim)
THEN
DB_TrespassingCrimes((STRING)_CrimeName);

IF
DB_TrespassTrigger((TRIGGERGUID)_Trigger,(TRIGGERGUID)_,_,_)
THEN
ProcTriggerRegisterForPlayers(_Trigger);


//--- Removing:
PROC
ProcRemoveDBTrespassTrigger((TRIGGERGUID)_Trigger,(TRIGGERGUID)_OutTrigger)
THEN
ProcRemoveDBTrespassTrigger((TRIGGERGUID)_Trigger,(TRIGGERGUID)_OutTrigger,(CHARACTERGUID)NULL_00000000-0000-0000-0000-000000000000);

PROC
ProcRemoveDBTrespassTrigger((TRIGGERGUID)_Trigger,(TRIGGERGUID)_OutTrigger,(CHARACTERGUID)_Victim)
AND
DB_TrespassTrigger(_Trigger,_OutTrigger,_CrimeName,_Victim)
AND
DB_IsPlayer(_Player)
THEN
CharacterStopCrime(_Player, _CrimeName, _Trigger);

PROC
ProcRemoveDBTrespassTrigger((TRIGGERGUID)_Trigger,(TRIGGERGUID)_OutTrigger,(CHARACTERGUID)_Victim)
AND
DB_TrespassTrigger(_Trigger,_OutTrigger,_CrimeName)
AND
DB_IsPlayer(_Player)
THEN
CharacterStopCrime(_Player, _CrimeName, _Trigger);

PROC
ProcRemoveDBTrespassTrigger((TRIGGERGUID)_Trigger,(TRIGGERGUID)_OutTrigger,(CHARACTERGUID)_Victim)
AND
DB_TrespassTrigger(_Trigger,_OutTrigger)
AND
DB_IsPlayer(_Player)
THEN
CharacterStopCrime(_Player, "Trespassing", _Trigger);

PROC
ProcRemoveDBTrespassTrigger((TRIGGERGUID)_Trigger,(TRIGGERGUID)_OutTrigger,(CHARACTERGUID)_Victim)
AND
DB_TrespassTrigger(_Trigger,_OutTrigger,_CrimeName,_Victim)
THEN
NOT DB_TrespassTrigger(_Trigger,_OutTrigger,_CrimeName,_Victim);

PROC
ProcRemoveDBTrespassTrigger((TRIGGERGUID)_Trigger,(TRIGGERGUID)_OutTrigger,(CHARACTERGUID)_Victim)
AND
DB_TrespassTrigger(_Trigger,_OutTrigger)
THEN
NOT DB_TrespassTrigger(_Trigger,_OutTrigger);

PROC
ProcRemoveDBTrespassTrigger((TRIGGERGUID)_Trigger,(TRIGGERGUID)_OutTrigger,(CHARACTERGUID)_Victim)
AND
DB_TrespassTrigger(_Trigger,_OutTrigger,_CrimeName)
THEN
NOT DB_TrespassTrigger(_Trigger,_OutTrigger,_CrimeName);

//--- Register/stop crime
IF
CharacterEnteredTrigger(_Player,_Trigger)
AND
DB_TrespassTrigger(_Trigger,_,_CrimeName,_Victim)
AND
DB_IsPlayer(_Player)
AND
NOT DB_CharacterCrimeDisabled(_Player,_CrimeName)
THEN
ProcCharacterRegisterCrime(_Player, _CrimeName, _Trigger, _Victim, 0, _Victim);

PROC
ProcCharacterRegisterCrime((CHARACTERGUID)_Char,(STRING)_CrimeType,(GUIDSTRING)_Evidence,(CHARACTERGUID)_CrimeWitness,(INTEGER)_CrimeID,(CHARACTERGUID)_Victim)
AND
DB_TrespassTrigger((TRIGGERGUID)_Evidence,_,_CrimeType,_Victim)
AND
NOT QRY_CRIME_BlockRegisterCrime(_Char, _CrimeType, _Evidence, _CrimeWitness, _CrimeID, _Victim)
THEN
DB_PlayerTrespassing(_Char,_Evidence);

IF
CharacterLeftTrigger(_Player,_Trigger)
AND
DB_TrespassTrigger(_Trigger,_,_CrimeName,_Victim)
THEN
CharacterStopCrime(_Player,_CrimeName,_Trigger);
NOT DB_PlayerTrespassing(_Player,_Trigger);

IF
ObjectFlagSet("TeleportOutOfTrespass",_Player,_Inst)
THEN
DB_CrimeTeleportOutOfTrespass(_Player,_Inst);

IF
DialogEnded(_,_ID)
AND
DB_DialogPlayers(_ID,_FirstPlayer,1)
AND
DB_PlayerTrespassing((CHARACTERGUID)_FirstPlayer,_Trigger)
AND
DB_CrimeTeleportOutOfTrespass(_FirstPlayer,_ID)
AND
DB_TrespassTrigger(_Trigger,_Outside,_,_)
AND
DB_DialogPlayers(_ID,_Player,_)
THEN
TeleportTo(_Player,_Outside,"",1);
NOT DB_PlayerTrespassing(_FirstPlayer,_Trigger);
NOT DB_CrimeTeleportOutOfTrespass(_Player,_ID);
ObjectClearFlag(_Player,"TeleportOutOfTrespass",0);
CharacterFlushQueue((CHARACTERGUID)_Player);
FireOsirisEvents();

IF
DialogEnded(_,_ID)
AND
DB_CrimeTeleportOutOfTrespass(_Player,_ID)
THEN
NOT DB_CrimeTeleportOutOfTrespass(_Player,_ID);
ObjectClearFlag(_Player,"TeleportOutOfTrespass",0);

//////////////////////////////
// Unavailable Fallback lead
IF
CharacterSelectedAsBestUnavailableFallbackLead(_NPC,_RegionID,_CrimeID,_BusyCrimeID,_Criminal1,_Criminal2,_Criminal3,_Criminal4)
AND
NOT QryCrimeOnlyHasSummonCriminal(_Criminal1,_Criminal2,_Criminal3,_Criminal4)
AND
CrimeGetType(_CrimeID,_CrimeName)
AND
DB_TrespassingCrimes(_CrimeName)
THEN
ProcCrimeTrespassingCheckDetection(_CrimeID,_NPC,_Criminal1);
ProcCrimeTrespassingCheckDetection(_CrimeID,_NPC,_Criminal2);
ProcCrimeTrespassingCheckDetection(_CrimeID,_NPC,_Criminal3);
ProcCrimeTrespassingCheckDetection(_CrimeID,_NPC,_Criminal4);
ProcCrimeTrespassingCheckValidLead(_CrimeID,_NPC);
ProcCrimeTrespassingStopNPCsDialogAndMakeHostileTo(_CrimeID,_BusyCrimeID,_NPC);

PROC
ProcCrimeTrespassingCheckDetection((INTEGER)_CrimeID,(CHARACTERGUID)_NPC,(CHARACTERGUID)_Player)
AND
_Player != NULL_00000000-0000-0000-0000-000000000000
AND
GetDistanceTo(_NPC,_Player,_Dist)
AND
CrimeGetDetectionRange(_CrimeID,_Range)
AND
_Dist <= _Range
THEN
DB_Crime_TrespassUnavailableLeadDetected((CHARACTERGUID)_NPC,(CHARACTERGUID)_Player);

PROC
ProcCrimeTrespassingCheckValidLead((INTEGER)_CrimeID,(CHARACTERGUID)_NPC)
AND
QryCrimeTrespassUnavailableLeadDetected(_NPC)
THEN
ProcCrimeTrespassingBlockHostileFallback(_CrimeID,_NPC);

QRY
QryCrimeTrespassUnavailableLeadDetected((CHARACTERGUID)_NPC)
AND
DB_Crime_TrespassUnavailableLeadDetected((CHARACTERGUID)_NPC,_)
THEN
DB_NOOP(1);

PROC
ProcCrimeTrespassingBlockHostileFallback((INTEGER)_CrimeID,(CHARACTERGUID)_NPC)
THEN
DB_NOOP(1);

PROC
ProcCrimeTrespassingStopNPCsDialogAndMakeHostileTo((INTEGER)_CrimeID,(INTEGER)_BusyCrimeID,(CHARACTERGUID)_NPC)
AND
DB_Crime_TrespassUnavailableLeadDetected(_NPC,_Player)
AND
NOT DB_CrimeTrespassingBlockHostile(_CrimeID,_NPC)
THEN
ProcTryMergingCrimes(_CrimeID,_BusyCrimeID,_NPC,_Player);

PROC
ProcTryMergingCrimes((INTEGER)_NewCrime,(INTEGER)_OldCrime,(CHARACTERGUID)_NPC,(CHARACTERGUID)_Player)
THEN
NOT DB_CanMergeCrimes(1);

PROC
ProcTryMergingCrimes((INTEGER)_NewCrime,(INTEGER)_OldCrime,(CHARACTERGUID)_NPC,(CHARACTERGUID)_Player)
AND
QryCanMergeCrimes(_NewCrime,_OldCrime,_Player)
THEN
DB_CanMergeCrimes(1);

IF
OnCriminalMergedWithCrime(_Crime,_Criminal)
AND
CrimeGetLeadInvestigator(_Crime,_Lead)
AND
CrimeGetType(_Crime,_Type)
AND
DB_CrimeAttitudeChange(_Type,_Adjust)
THEN
ProcCrimeCheckIfAttitudeCauseCombat(_Lead,_Criminal,_Adjust);

PROC
ProcTryMergingCrimes((INTEGER)_NewCrime,(INTEGER)_OldCrime,(CHARACTERGUID)_NPC,(CHARACTERGUID)_Player)
AND
NOT DB_CanMergeCrimes(1)
AND
QueryOnlyOnce("CRIME_Trespassing_NPCForceStopDialog")
THEN
ProcForceStopDialog(_NPC);

PROC
ProcTryMergingCrimes((INTEGER)_NewCrime,(INTEGER)_OldCrime,(CHARACTERGUID)_NPC,(CHARACTERGUID)_Player)
AND
NOT DB_CanMergeCrimes(1)
THEN
//ignore these 2 crimes, since we're dealing with them in our own way
CrimeIgnoreCrime(_OldCrime,_NPC);
CrimeIgnoreCrime(_NewCrime,_NPC);
DB_CrimeTresPassCombatFallback(_NPC);
ProcTryStartAttackAD(_NPC);
CharacterSetTemporaryHostileRelation(_NPC,_Player);

PROC
ProcTryMergingCrimes((INTEGER)_NewCrime,(INTEGER)_OldCrime,(CHARACTERGUID)_NPC,(CHARACTERGUID)_Player)
AND
DB_CanMergeCrimes(1)
AND
DB_DialogNPCs(_ID,_NPC,_)
THEN
CharacterStopCrimeWithID(_Player,_NewCrime);
DialogAddActor(_ID,_Player);

QRY
QryCanMergeCrimes((INTEGER)_NewCrime,(INTEGER)_OldCrime,(CHARACTERGUID)_Player)
AND
CrimeGetType(_NewCrime,_Type)
AND
CrimeGetType(_OldCrime,_Type)
AND
CrimeAddCriminal(_OldCrime,_Player,1)
THEN
DB_Noop(1);

PROC
ProcTryStartAttackAD((CHARACTERGUID)_NPC)
AND
IsTagged(_NPC,"ANIMAL",0)
AND
HasAppliedStatus(_NPC, "UNCONSCIOUS", 0)
AND
HasAppliedStatus(_NPC, "LIE_DYING", 0)
AND
HasAppliedStatus(_NPC, "MUTED", 0)
THEN
Proc_StartDialog(1,"GEB_AD_AttackHelp",_NPC);

//Clearing
PROC
ProcCrimeTrespassingStopNPCsDialogAndMakeHostileTo((INTEGER)_CrimeID,(INTEGER)_BusyCrimeID,(CHARACTERGUID)_NPC)
AND
DB_Crime_TrespassUnavailableLeadDetected(_NPC,_Player)
THEN
NOT DB_OnlyOnce("CRIME_Trespassing_NPCForceStopDialog");
NOT DB_Crime_TrespassUnavailableLeadDetected(_NPC,_Player);

PROC
ProcCrimeTrespassingStopNPCsDialogAndMakeHostileTo((INTEGER)_CrimeID,(INTEGER)_BusyCrimeID,(CHARACTERGUID)_NPC)
THEN
DB_CrimeTrespassingBlockHostile(_CrimeID,_NPC);

IF
ObjectEnteredCombat((CHARACTERGUID)_NPC,_)
AND
DB_CrimeTresPassCombatFallback(_NPC)
AND
DB_CrimeTrespassingBlockHostile(_CrimeID,_NPC)
THEN
NOT DB_CrimeTrespassingBlockHostile(_CrimeID,_NPC);

IF
OnCrimeResolved(_CrimeID,_,_,_,_,_)
AND
DB_CrimeTrespassingBlockHostile(_CrimeID,_NPC)
THEN
NOT DB_CrimeTrespassingBlockHostile(_CrimeID,_NPC);

//END_REGION

//REGION Crimes against a character that can't react because it's in a dialog
IF
CharacterSelectedAsBestUnavailableFallbackLead(_Char,_Region,_NewCrime,_OldCrime,_NewCriminal1,_NewCriminal2,_NewCriminal3,_NewCriminal4)
AND
CrimeGetTension(_NewCrime,_Tension)
AND
_Tension > 0
AND
CrimeGetType(_NewCrime,_CrimeName)
AND
NOT DB_TrespassingCrimes(_CrimeName)
AND
DB_DialogNPCs(_OldCrimeDialog,_Char,_)
AND
CrimeGetCriminals(_OldCrime, _OldCriminal1, _OldCriminal2, _OldCriminal3, _OldCriminal4)
THEN
CrimeConfrontationDone(_NewCrime,_Char);
ProcForceStopDialog(_Char);
Proc_CharacterSetTemporaryHostileRelation(_Char,_OldCriminal1);
Proc_CharacterSetTemporaryHostileRelation(_Char,_OldCriminal2);
Proc_CharacterSetTemporaryHostileRelation(_Char,_OldCriminal3);
Proc_CharacterSetTemporaryHostileRelation(_Char,_OldCriminal4);
Proc_CharacterSetTemporaryHostileRelation(_Char,_NewCriminal1);
Proc_CharacterSetTemporaryHostileRelation(_Char,_NewCriminal2);
Proc_CharacterSetTemporaryHostileRelation(_Char,_NewCriminal3);
Proc_CharacterSetTemporaryHostileRelation(_Char,_NewCriminal4);
//END_REGION
//----------------------------------- ASSAULT -----------------------------------
//REGION Chicken touch

IF
CharacterStatusAttempt((CHARACTERGUID)_NPC,"CHICKEN",(CHARACTERGUID)_Player)
AND
DB_IsPlayer(_Player)
AND
NOT DB_IsPlayer(_NPC)
AND
NOT DB_IgnoreAssault(_NPC)
AND
NOT DB_CombatCharacters(_NPC,_)
AND
NOT DB_IgnoreAssaultFor(_Player,_NPC)
AND
ObjectIsCharacter(_NPC,1)
AND
IsTagged(_NPC,"GHOST",0)
AND
IsTagged(_NPC,"SUMMON",0)
AND
HasAppliedStatus(_NPC,"CHICKEN",1)
AND
CharacterIsEnemy(_NPC,_Player,0)
THEN
DB_Crime_PolymorphedIgnoreAssault(_NPC,_Player);	//keep this first, the register forces a flush!

//END_REGION

//REGION Player teleported while in dialog with NPC

// Keep track of the original position of the player when the dialog started
QRY
QRY_CRIME_PlayerInDialogTeleportedTooFarInit((INTEGER)_DialogID, (CHARACTERGUID)_Player, (REAL)_OldX, (REAL)_OldY, (REAL)_OldZ)
AND
NOT DB_CRIME_DialogTeleportInitialPosition(_DialogID, _Player, _, _, _)
THEN
DB_CRIME_DialogTeleportInitialPosition(_DialogID, _Player, _OldX, _OldY, _OldZ);

// Ensure it always succeeds
QRY
QRY_CRIME_PlayerInDialogTeleportedTooFarInit((INTEGER)_DialogID, (CHARACTERGUID)_Player, (REAL)_OldX, (REAL)_OldY, (REAL)_OldZ)
THEN
DB_NOOP(1);

// Teleported further than 5 metres away from the NPC than the original position -> too far
QRY
QRY_CRIME_PlayerInDialogTeleportedTooFar((CHARACTERGUID)_Player, (REAL)_OldX, (REAL)_OldY, (REAL)_OldZ)
AND
DB_IsPlayer(_Player)
AND
DB_DialogPlayers(_DialogID, _Player, _)
AND
NOT DB_AutomatedDialog(_DialogID)
AND
QRY_CRIME_PlayerInDialogTeleportedTooFarInit(_DialogID, _Player, _OldX, _OldY, _OldZ)
AND
DB_CRIME_DialogTeleportInitialPosition(_DialogID, _Player, _OrgX, _OrgY, _OrgZ)
AND
DB_DialogNPCs(_DialogID, _NPC, _)
AND
ObjectIsCharacter(_NPC, 1)
AND
GetDistanceToPosition(_NPC, _OrgX, _OrgY, _OrgZ, _OrgDist)
AND
GetDistanceTo(_NPC, _Player, _NewDist)
AND
RealSum(_OrgDist, 5.0, _MaxDist)
AND
_NewDist > _MaxDist
THEN
DB_CRIME_PlayerInDialogTeleportedTooFar(_DialogID, _Player, (CHARACTERGUID)_NPC);

// Clean up
IF
DialogEnded(_, _DialogID)
AND
DB_CRIME_DialogTeleportInitialPosition(_DialogID, _Player, _OldX, _OldY, _OldZ)
THEN
NOT DB_CRIME_DialogTeleportInitialPosition(_DialogID, _Player, _OldX, _OldY, _OldZ);

IF
CharacterTeleported(_Player, _, _OldX, _OldY, _OldZ, _NewX, _NewY, _NewZ, _)
AND
QRY_CRIME_PlayerInDialogTeleportedTooFar(_Player, _OldX, _OldY, _OldZ)
AND
DB_CRIME_PlayerInDialogTeleportedTooFar(_ID, _Player, _NPC)
AND
CharacterIsCrimeEnabled(_NPC, "TeleportPlayerDialog", 1)
AND
RealSum(_NewY,1.0,_NewYUp)
THEN
NOT DB_CRIME_PlayerInDialogTeleportedTooFar(_ID, _Player, _NPC);
// In case this results in investigation, ensures the NPC can start investigating
// instead of waiting until the end of the dialog (unless it's in a dialog that
// must not be interrupted due to a crime)
ProcCrimeTryForceStopDialog(_NPC);
// OldX/OldY/OldZ would be better, but then investigations fail because they abort
// when the investigator can see the crime scene, but not the criminal
ProcCharacterRegisterCrimeWithPosition(_Player, "TeleportPlayerDialog", NULL_00000000-0000-0000-0000-000000000000, _NPC, _NewX, _NewYUp, _NewZ, 0, _NPC);

//END_REGION

//REGION Assault

QRY
QryHasNeutralBlockTag((CHARACTERGUID)_NPC)
AND
DB_NeutralTagIgnore((STRING)_Tag)
AND
IsTagged(_NPC,_Tag,1)
THEN
DB_NOOP(1);

//--- Checks if the NPC and/or the player/summon are in combat while being neutral to each other, then makes them hostile
IF
AttackedByObject((CHARACTERGUID)_NPC,(CHARACTERGUID)_Player,(CHARACTERGUID)_Summon,_,_DamageSource)
AND
// Can be equal in case of a hostile status enter due to equiping something
_NPC != _Summon
AND
NOT DB_Crime_Assault(_,_,_NPC)
AND
NOT DB_Crime_Assault(_,_Player,_)
AND
NOT DB_Crime_PolymorphedIgnoreAssault(_NPC,_Player)
AND
NOT QryIgnoreDamageSource(_DamageSource)
AND
ObjectIsCharacter(_NPC,1)
AND
CharacterIsPlayer(_Player,1)
AND
CharacterIsDeadOrFeign(_Player,0)
AND
CharacterIsPlayer(_NPC,0)
AND
Qry_AreInCombat(_Player,_NPC)
AND
CharacterCanFight(_NPC,1)
AND
CharacterIsDead(_NPC,0)
AND
CharacterIsNeutral(_NPC,_Player,1)
AND
NOT QryHasNeutralBlockTag(_NPC)
AND
IsTagged(_NPC,"ANIMAL",0)
AND
DB_CombatCharacters(_NPC,_ID)
THEN
ProcWarnPlayerOfAttack(_NPC,_Player,_ID);

//REGION Combat warnings
IF
ObjectLeftCombat((CHARACTERGUID)_NPC,_)
AND
DB_CombatWarnings(_NPC,_Cnt)
THEN
NOT DB_CombatWarnings(_NPC,_Cnt);

PROC
ProcWarnPlayerOfAttack((CHARACTERGUID)_NPC,(CHARACTERGUID)_Player,(INTEGER)_ID)
AND
NOT DB_CombatWarnings(_NPC,_)
THEN
DB_CombatWarnings(_NPC,0);

PROC
ProcWarnPlayerOfAttack((CHARACTERGUID)_NPC,(CHARACTERGUID)_Player,(INTEGER)_ID)
AND
NOT DB_CombatCharacters(_Player,_)
AND
DB_CombatWarnings(_NPC,_Count)
THEN
NOT DB_CombatWarnings(_NPC,_Count);
DB_CombatWarnings(_NPC,3);

PROC
ProcWarnPlayerOfAttack((CHARACTERGUID)_NPC,_,_)
THEN
ObjectClearFlag(_NPC,"GEB_Crime_LastNeutralWarning");
ObjectClearFlag(_NPC,"GEB_Crime_AttackNeutralWarning");

PROC
ProcWarnPlayerOfAttack((CHARACTERGUID)_NPC,(CHARACTERGUID)_Player,(INTEGER)_ID)
AND
DB_CombatWarnings(_NPC,_Old)
AND
IntegerSum(_Old,1,_Count)
THEN
NOT DB_CombatWarnings(_NPC,_Old);
DB_CombatWarnings(_NPC,_Count);

PROC
ProcWarnPlayerOfAttack((CHARACTERGUID)_NPC,(CHARACTERGUID)_Player,(INTEGER)_ID)
AND
DB_CombatWarnings(_NPC,_Count)
AND
_Count > 3
THEN
ObjectSetFlag(_NPC,"GEB_Crime_AttackNeutralWarning");
ProcMakeNPCHostile(_NPC,_Player);

PROC
ProcWarnPlayerOfAttack((CHARACTERGUID)_NPC,(CHARACTERGUID)_Player,(INTEGER)_ID)
AND
DB_CombatWarnings(_NPC,3)
THEN
ObjectSetFlag(_NPC,"GEB_Crime_LastNeutralWarning");

PROC
ProcWarnPlayerOfAttack((CHARACTERGUID)_NPC,(CHARACTERGUID)_Player,(INTEGER)_ID)
AND
DB_CombatWarnings(_NPC,_Count)
AND
QryDoNeutralAttackWarning(_Count)
THEN
Proc_StartDialog(1,"GEB_AD_WarnFriendlyFire",_NPC);

QRY
QryDoNeutralAttackWarning((INTEGER)_Count)
AND
_Count < 3
AND
Random(100,_Rnd)
AND
_Rnd <= 40
THEN
DB_Noop(1);

QRY
QryDoNeutralAttackWarning(3)
THEN
DB_Noop(1);

//END_REGION
QRY
Qry_AreInCombat((CHARACTERGUID)_Player,(CHARACTERGUID)_NPC)
AND
DB_CombatCharacters(_NPC,_)
THEN
DB_NOOP(1);

QRY
Qry_AreInCombat((CHARACTERGUID)_Player,(CHARACTERGUID)_NPC)
AND
DB_CombatCharacters(_Player,_)
THEN
DB_NOOP(1);

PROC
ProcClearAssaultDBForCrime((INTEGER)_CrimeID)
AND
DB_Crime_Assault(_CrimeID,_Criminal,_Victim)
THEN
NOT DB_Crime_Assault(_CrimeID,_Criminal,_Victim);

IF
OnCrimeRemoved(_CrimeID,_Victim,_Criminal1,_Criminal2,_Criminal3,_Criminal4)
THEN
ProcClearAssaultDBForCrime(_CrimeID);

IF
OnCrimeResolved(_CrimeID,_Victim,_Criminal1,_Criminal2,_Criminal3,_Criminal4)
AND
_Victim != NULL_00000000-0000-0000-0000-000000000000
AND
DB_Crime_Assault(_CrimeID,_,_)
AND
IntegertoString(_CrimeID,_CrimeSuffix)
AND
StringConcatenate("Timer_ClearAttackDB",_CrimeSuffix,_TimerName)
THEN
DB_Crime_PlayerAttacked(_CrimeID,_Criminal1,_Victim); // This is For Murder crime
DB_Crime_PlayerAttacked(_CrimeID,_Criminal2,_Victim);
DB_Crime_PlayerAttacked(_CrimeID,_Criminal3,_Victim);
DB_Crime_PlayerAttacked(_CrimeID,_Criminal4,_Victim);
DB_AttackTimer(_CrimeID,_TimerName);
ProcObjectTimer(_Victim,_TimerName,1500);
NOT DB_Crime_PlayerAttacked(_CrimeID,NULL_00000000-0000-0000-0000-000000000000,_Victim); //Future Feature if needed Generate Murder for every on in combat with the OG DB_Crime_PlayerAttacked _Victim

IF
OnCrimeResolved(_CrimeID,_Victim,_Criminal1,_Criminal2,_Criminal3,_Criminal4)
THEN
ProcClearAssaultDBForCrime(_CrimeID);

PROC
ProcObjectTimerFinished((CHARACTERGUID)_Victim,_TimerName)
AND
DB_AttackTimer(_CrimeID,_TimerName)
AND
DB_Crime_PlayerAttacked(_CrimeID,_Player,_Victim)
AND
NOT DB_CombatCharacters(_Victim, _)
THEN
NOT DB_Crime_PlayerAttacked(_CrimeID,_Player,_Victim);

PROC
ProcObjectTimerFinished(_Victim,_TimerName)
AND
DB_AttackTimer(_CrimeID,_TimerName)
THEN
NOT DB_AttackTimer(_CrimeID,_TimerName);

IF
CrimeInterrogationRequest(_RegionID,_CrimeID,_Interrogator,_Criminal1,_Criminal2,_Criminal3,_Criminal4,_Dialog)
THEN
ProcClearAssaultDBForCrime(_CrimeID);

IF
OnCrimeMergedWith(_Old,_New)
AND
DB_Crime_Assault(_Old,_Criminal1,_Victim)
THEN
NOT DB_Crime_Assault(_Old,_Criminal1,_Victim);
DB_Crime_Assault(_New,_Criminal1,_Victim);

//if our vicitim is not selected as lead (incapacitated), don't track this DB because that will mean he won't be able to react anymore
//update it with the new lead
IF
CharacterOnCrimeSensibleActionNotification(_NPC,_,_CrimeID,_,_,_Criminal1,_,_,_,1)
AND
DB_Crime_Assault(_CrimeID,_Criminal1,_Victim)
THEN
NOT DB_Crime_Assault(_CrimeID,_Criminal1,_Victim);
DB_Crime_Assault(_CrimeID,_Criminal1,_NPC);

//END_REGION

//REGION General Assault crime -- verifies if the assailant is a summon or not and registers the Assault or AttackAnimal crime

QRY
QryIgnoreDamageSource((STRING)_Dmg)
AND
DB_IgnoreDamageSources(_Dmg)
THEN
DB_NOOP(1);

IF
AttackedByObject((CHARACTERGUID)_NPC,(CHARACTERGUID)_Player,(CHARACTERGUID)_Summon,_,_DamageSource)
AND
_NPC != _Summon
AND
NOT DB_IgnoreAssault(_NPC)
AND
NOT DB_Crime_PolymorphedIgnoreAssault(_NPC,_Player)
AND
NOT DB_CombatCharacters(_NPC,_)
AND
NOT DB_Crime_Assault(_,_,_NPC)
AND
CharacterIsPlayer(_Player,1)
AND
NOT QryIgnoreDamageSource(_DamageSource)
AND
CharacterIsDeadOrFeign(_Player,0)
AND
ObjectIsCharacter(_NPC,1)
AND
CharacterIsPlayer(_NPC,0)
AND
CharacterIsDead(_NPC,0)
AND
IsTagged(_NPC,"GHOST",0)
AND
IsTagged(_NPC,"SUMMON",0)
THEN
ProcCrimeCheckAssailant(_NPC,_Player,_Summon);


//--- Assailant is not a summon
PROC
ProcCrimeCheckAssailant((CHARACTERGUID)_NPC,(CHARACTERGUID)_Player,(CHARACTERGUID)_Summon)
AND
NOT QRY_CharacterIsNull(_Summon)
AND
IsTagged(_Summon,"SUMMON",1)
AND
NOT DB_IgnoreAssaultFor(_Summon,_NPC)
AND
NOT DB_Crime_Assault(_,_Summon,_)
AND
CharacterIsEnemy(_NPC,_Summon,0)
THEN
ProcCrimeRegisterAssault(_Summon,_NPC,1);

//--- Assailant is a summon
PROC
ProcCrimeCheckAssailant((CHARACTERGUID)_NPC,(CHARACTERGUID)_Player,(CHARACTERGUID)_Summon)
AND
QryCrimeAssailantIsNotSummon(_Player,_Summon)
AND
NOT DB_IgnoreAssaultFor(_Player,_NPC)
AND
NOT DB_Crime_Assault(_,_Player,_)
AND
CharacterIsEnemy(_NPC,_Player,0)
THEN
ProcCrimeRegisterAssault(_Player,_NPC,0);

//--- Split the type of assault
// Normal
PROC
ProcCrimeRegisterAssault((CHARACTERGUID)_Assailant,(CHARACTERGUID)_NPC,0) //_AssailantIsSummon
AND
IsTagged(_NPC,"ANIMAL",0)
THEN
ProcCrimeRegisterAssaultType(_Assailant,_NPC,"Assault");

PROC
ProcCrimeRegisterAssault((CHARACTERGUID)_Assailant,(CHARACTERGUID)_NPC,0)
AND
IsTagged(_NPC,"ANIMAL",1)
THEN
ProcCrimeRegisterAssaultType(_Assailant,_NPC,"AttackAnimal");

// Summon
PROC
ProcCrimeRegisterAssault((CHARACTERGUID)_Assailant,(CHARACTERGUID)_NPC,1)
AND
IsTagged(_NPC,"ANIMAL",0)
THEN
ProcCrimeRegisterAssaultType(_Assailant,_NPC,"SummonAssault");

PROC
ProcCrimeRegisterAssault((CHARACTERGUID)_Assailant,(CHARACTERGUID)_NPC,1)
AND
IsTagged(_NPC,"ANIMAL",1)
THEN
ProcCrimeRegisterAssaultType(_Assailant,_NPC,"SummonAttackAnimal");

//REGION Assault investigation location determination
// Default: victim location
// Problem: if attacked from out of sight range, they won't be able to find the attacker
// Solution: after a while, report the assailant's rather than the victim's location as investigation location
// If assaulted even more: force combat
//
// Reasoning: the more an NPC has been attacked, the more they'll pay attention
//   regarding where the attack came from. Factors influencing them homing in on
//   the source: sneaking, invisibility, wits difference between victim and assailant

QRY
QRY_CRIMES_AssaultCrimeGetCrimeLocationScoreIncrease((CHARACTERGUID)_Assailant,(CHARACTERGUID)_Victim)
AND
DB_CRIME_AssaultCrimeGetCrimeLocationScoreIncrease(_Total)
THEN
NOT DB_CRIME_AssaultCrimeGetCrimeLocationScoreIncrease(_Total);

QRY
QRY_CRIMES_AssaultCrimeGetCrimeLocationScoreIncrease((CHARACTERGUID)_Assailant,(CHARACTERGUID)_Victim)
AND
HasActiveStatus(_Assailant,"SNEAKING",_IsSneaking)
AND
HasActiveStatus(_Assailant,"INVISIBLE",_IsInvisible)
AND
CharacterGetAttribute(_Assailant,"WITS",_AssailantWits)
AND
CharacterGetAttribute(_Assailant,"WITS",_VictimWits)
AND
IntegerSubtract(_VictimWits,_AssailantWits,_WitsRes)
AND
QRY_IntegerSign(_WitsRes)
AND
DB_IntegerSign(_WitsBonus)
AND
DB_CRIME_CrimeLocationScoreIncrease(_IsSneaking,_IsInvisible,_Base,_Rand)
AND
Random(_Rand,_Extra)
AND
IntegerSum(_Base,_Extra,_BaseTotal)
AND
IntegerSum(_BaseTotal,_WitsBonus,_Total)
THEN
DB_CRIME_AssaultCrimeGetCrimeLocationScoreIncrease(_Total);

QRY
QRY_CRIME_AssaultCrimeGetInvestigationPos((CHARACTERGUID)_Assailant,(CHARACTERGUID)_Victim)
AND
DB_CRIME_AssaultCrimeInvestigationPos(_x,_yUp,_z)
THEN
NOT DB_CRIME_AssaultCrimeInvestigationPos(_x,_yUp,_z);

QRY
QRY_CRIME_AssaultCrimeGetInvestigationPos((CHARACTERGUID)_Assailant,(CHARACTERGUID)_Victim)
THEN
Proc_CharCountHelper(_Victim,"CRIME_CrimeTriggers_AssaultCrimeLocation");

// Update assault score
QRY
QRY_CRIME_AssaultCrimeGetInvestigationPos((CHARACTERGUID)_Assailant,(CHARACTERGUID)_Victim)
AND
QRY_CRIMES_AssaultCrimeGetCrimeLocationScoreIncrease(_Assailant,_Victim)
AND
DB_CRIME_AssaultCrimeGetCrimeLocationScoreIncrease(_Increase)
THEN
Proc_CharCountHelper(_Victim,"CRIME_CrimeTriggers_AssaultCrimeLocation",_Increase);

// Assaulted many times -> investigate location of assailant
QRY
QRY_CRIME_AssaultCrimeGetInvestigationPos((CHARACTERGUID)_Assailant,(CHARACTERGUID)_Victim)
AND
DB_CharCountHelper(_Victim,"CRIME_CrimeTriggers_AssaultCrimeLocation",_Count)
AND
DB_CRIME_CrimeLocationScore_GoToAttackerThreshold(_Threshold)
AND
_Count >= _Threshold
AND
GetPosition(_Assailant,_x,_y,_z)
AND
RealSum(_y,1.0,_yUp)
THEN
DB_CRIME_AssaultCrimeInvestigationPos(_x,_yUp,_z);

// Fallback if not yet assaulted many times
QRY
QRY_CRIME_AssaultCrimeGetInvestigationPos((CHARACTERGUID)_Assailant,(CHARACTERGUID)_Victim)
AND
NOT DB_CRIME_AssaultCrimeInvestigationPos(_,_,_)
AND
GetPosition(_Victim,_x,_y,_z)
AND
RealSum(_y,1.0,_yUp)
THEN
DB_CRIME_AssaultCrimeInvestigationPos(_x,_yUp,_z);

// Clean up when dying
IF
CharacterDied(_Victim)
AND
DB_CharCountHelper(_Victim,"CRIME_CrimeTriggers_AssaultCrimeLocation",_Count)
THEN
NOT DB_CharCountHelper(_Victim,"CRIME_CrimeTriggers_AssaultCrimeLocation",_Count);

//END_REGION

//REGION Assaulted really a lot or down on health -> start combat
// Allows for at least three assaults -> don't cut off warning system
PROC
ProcCrimeRegisterAssaultType((CHARACTERGUID)_Assailant,(CHARACTERGUID)_Victim,(STRING)_AssaultType)
AND
QRY_CRIME_AssaultCrimeGetInvestigationPos(_Assailant,_Victim)
AND
CharacterIsCrimeEnabled(_Victim,_AssaultType,1)
AND
DB_CharCountHelper(_Victim,"CRIME_CrimeTriggers_AssaultCrimeLocation",_Count)
AND
DB_CRIME_CrimeLocationScore_StartAttackingThreshold(_Threshold)
AND
_Count >= _Threshold
AND
CharacterCanFight(_Victim,1)
THEN
DB_CrimeRegisterAssaultType_Handled(1);
ProcTryStartAttackAD(_Victim);
Proc_CharacterSetTemporaryHostileRelation(_Victim,_Assailant);
EnterCombat(_Victim,_Assailant);

PROC
ProcCrimeRegisterAssaultType((CHARACTERGUID)_Assailant,(CHARACTERGUID)_Victim,(STRING)_AssaultType)
AND
CharacterIsCrimeEnabled(_Victim,_AssaultType,1)
AND
CharacterGetHitpointsPercentage(_Victim,_Percentage)
AND
DB_CRIME_Assault_HealthStartAttackingThreshold(_Threshold)
AND
_Percentage < _Threshold
AND
CharacterCanFight(_Victim,1)
AND
CharacterIsDead(_Victim,0)
THEN
DB_CrimeRegisterAssaultType_Handled(1);
ProcTryStartAttackAD(_Victim);
Proc_CharacterSetTemporaryHostileRelation(_Victim,_Assailant);
EnterCombat(_Victim,_Assailant);
//END_REGION

PROC
ProcCrimeRegisterAssaultType((CHARACTERGUID)_Assailant,(CHARACTERGUID)_Victim,(STRING)_AssaultType)
AND
NOT DB_CrimeRegisterAssaultType_Handled(1)
AND
GetPosition(_Victim,_x,_y,_z)
AND
RealSum(_y,1.0,_yUp)
AND
CrimeIsAnyNPCGoingToReact(_Assailant,_AssaultType,_Victim,_x,_yUp,_z,_WillReact)
AND
CrimeGetNewID(_CrimeID)
AND
DB_CRIME_AssaultCrimeInvestigationPos(_XInv,_YInv,_ZInv)
THEN
NOT DB_CRIME_AssaultCrimeInvestigationPos(_XInv,_YInv,_ZInv);
DB_CRIME_CrimeInvestigationPos(_CrimeID,_XInv,_YInv,_ZInv);
DB_Crime_Assault(_CrimeID,_Assailant,_Victim);
ProcCheckRegisterAssault(_Assailant,_Victim,_AssaultType,_x,_yUp,_z,_CrimeID,_WillReact);

PROC
ProcCrimeRegisterAssaultType((CHARACTERGUID)_Assailant,(CHARACTERGUID)_Victim,(STRING)_AssaultType)
AND
DB_CrimeRegisterAssaultType_Handled(1)
THEN
NOT DB_CrimeRegisterAssaultType_Handled(1);

PROC
ProcClearAssaultDBForCrime((INTEGER)_CrimeID)
AND
DB_CRIME_CrimeInvestigationPos(_CrimeID,_XInv,_YInv,_ZInv)
THEN
NOT DB_CRIME_CrimeInvestigationPos(_CrimeID,_XInv,_YInv,_ZInv);

PROC
ProcCheckRegisterAssault((CHARACTERGUID)_Assailant,(CHARACTERGUID)_Victim,(STRING)_AssaultType,(REAL)_X,(REAL)_Y,(REAL)_Z,(INTEGER)_CrimeID,1)
THEN
ProcCharacterRegisterCrimeWithPosition(_Assailant,_AssaultType,NULL_00000000-0000-0000-0000-000000000000,_Victim,_X,_Y,_Z,_CrimeID,_Victim);

//noone reacted to this one, so assume the victim was incapacitated
PROC
ProcCheckRegisterAssault((CHARACTERGUID)_Assailant,(CHARACTERGUID)_Victim,(STRING)_AssaultType,(REAL)_X,(REAL)_Y,(REAL)_Z,(INTEGER)_CrimeID,0)
THEN
ProcCharacterRegisterCrimeWithPosition(_Assailant,"IncapacitatedAssault",NULL_00000000-0000-0000-0000-000000000000,_Victim,_X,_Y,_Z,_CrimeID,_Victim);

//END_REGION

//REGION Clear PolymorphedIgnoreAssault fact

IF
AttackedByObject((CHARACTERGUID)_NPC,(CHARACTERGUID)_Player,(CHARACTERGUID)_Summon,_,_)
AND
_NPC != _Summon
AND
DB_Crime_PolymorphedIgnoreAssault(_NPC,_Player)
AND
GetPosition(_NPC,_x,_y,_z)
AND
RealSum(_y,1.0,_yUp)
AND
CrimeGetNewID(_CrimeID)
THEN
NOT DB_Crime_PolymorphedIgnoreAssault(_NPC,_Player);
CharacterRegisterCrimeWithPosition(_Player,"Polymorphed",NULL_00000000-0000-0000-0000-000000000000,_NPC,_x,_yUp,_z,_CrimeID);
PROC_CRIME_TryPolymorphedCrimeAttitudeAdjustment(_NPC,_Player);

PROC
PROC_CRIME_TryPolymorphedCrimeAttitudeAdjustment((CHARACTERGUID)_NPC, (CHARACTERGUID)_Player)
AND
CharacterCanSee(_NPC, _Player, 1)
THEN
ProcCheckAdjustAttitude(_NPC,_NPC,_Player,NULL_00000000-0000-0000-0000-000000000000,NULL_00000000-0000-0000-0000-000000000000,NULL_00000000-0000-0000-0000-000000000000,-5,1);

//END_REGION

//REGION Teleportation Netherswap
IF
CharacterUsedSkillOnTarget(_Player,(CHARACTERGUID)_Npc,"Teleportation_Netherswap",_,_)
AND
NOT Qry_AreInCombat(_Player,_NPC)
AND
CharacterIsPlayer(_Player,1)
AND
ObjectIsCharacter(_Npc,1)
AND
CharacterIsDeadOrFeign(_Player,0)
AND
CharacterIsPlayer(_NPC,0)
AND
CharacterIsDead(_NPC,0)
THEN
ProcDoCrimeCheckAssailant(_Player,_NPC);

PROC
ProcDoCrimeCheckAssailant((CHARACTERGUID)_Summon,(CHARACTERGUID)_NPC)
AND
CharacterIsSummon(_Summon,1)
AND
CharacterGetOwner(_Summon,_Player)
THEN
ProcCrimeCheckAssailant(_NPC,_Player,_Summon);

PROC
ProcDoCrimeCheckAssailant((CHARACTERGUID)_Player,(CHARACTERGUID)_NPC)
AND
CharacterIsSummon(_Player,0)
THEN
ProcCrimeCheckAssailant(_NPC,_Player,_Player);

IF
CharacterUsedSkillOnTarget(_Player,(CHARACTERGUID)_Npc,"Teleportation_Netherswap",_,_)
AND
DB_CombatCharacters(_NPC, _)
AND
NOT DB_CombatCharacters(_Player, _)
AND
CharacterIsPlayer(_Player,1)
AND
CharacterIsDeadOrFeign(_Player,0)
AND
CharacterIsPlayer(_NPC,0)
AND
CharacterIsDead(_NPC,0)
THEN
EnterCombat(_Player, _NPC);

//END_REGION

//----------------------------------- /ASSAULT -----------------------------------

//REGION GEB_FleeOutOfSight
IF
AutomatedDialogEnded("GEB_AD_CallForHelp",_ID) // For kids looking for help
AND
DB_DialogNPCs(_ID,_NPC,1)
AND
IsTagged(_NPC,"KID",1)
AND
ObjectGetFlag(_NPC,"GEB_FleeOutOfSight",0)
THEN
ObjectSetFlag(_NPC,"GEB_FleeOutOfSight");

IF
ObjectFlagSet("GEB_FleeOutOfSight",(CHARACTERGUID)_NPC,_)
THEN
SetHasDialog(_NPC,0);
ProcCharacterDisappearOutOfSight((CHARACTERGUID)_NPC,0,1,"GEB_NPCFledOutOfSight",1);
Proc_StartDialog(1,"GEB_AD_CallForHelp",_NPC);
ProcForceStopDialog(_NPC);

IF
ObjectFlagSet("GEB_FleeOutOfSight",_NPC,_)
AND
NOT DB_GEB_FledOutOfSight(_NPC,_,_,_)
AND
GetPosition(_NPC,_X,_Y,_Z)
THEN
DB_GEB_FledOutOfSight(_NPC,_X,_Y,_Z);

IF
ObjectFlagSet("GEB_FleeOutOfSight",(CHARACTERGUID)_NPC,_)
AND
DB_Crime_Assault(_CrimeID,_Player,_NPC)
THEN
ProcClearAssaultDBForCrime(_CrimeID);

IF
CharacterWentOnStage(_Victim,0)
AND
DB_Crime_Assault(_CrimeID,_Player,_Victim)
THEN
ProcClearAssaultDBForCrime(_CrimeID);

IF
CharacterDied(_Victim)
AND
DB_Crime_Assault(_CrimeID,_Player,_Victim)
THEN
ProcClearAssaultDBForCrime(_CrimeID);

IF
CharacterDied(_Player)
AND
DB_Crime_Assault(_CrimeID,_Player,_Victim)
THEN
ProcClearAssaultDBForCrime(_CrimeID);

IF
CharacterLeftParty(_Player)
AND
DB_Crime_Assault(_CrimeID,_Player,_Victim)
THEN
ProcClearAssaultDBForCrime(_CrimeID);

IF
RegionStarted(_NewRegion)
AND
DB_Crime_Assault(_CrimeID,_Player,_Victim)
THEN
ProcClearAssaultDBForCrime(_CrimeID);

IF
StoryEvent(_NPC,"GEB_NPCFledOutOfSight")
AND
ObjectGetFlag(_NPC,"GEB_DontAppearAfter",0)
THEN
ProcObjectTimer(_NPC,"GEB_AppearNPCOutOfSight",15000);

IF
ObjectFlagSet("GEB_DontAppearAfter",_Char,_)
THEN
ProcObjectTimerCancel(_Char,"GEB_AppearNPCOutOfSight");

IF
ObjectFlagSet("GEB_DontAppearAfter",(CHARACTERGUID)_Char,_)
AND
DB_GEB_NPCAppearAfterCombat(_Char,_CombatID)
THEN
NOT DB_GEB_NPCAppearAfterCombat(_Char,_CombatID);

//--- Start trying to reappear
PROC
ProcObjectTimerCancel((CHARACTERGUID)_NPC,"GEB_AppearNPCOutOfSight")
AND
DB_GEB_FledOutOfSight(_NPC,_X,_Y,_Z)
THEN
NOT DB_GEB_FledOutOfSight(_NPC,_X,_Y,_Z);

PROC
ProcObjectTimerFinished((CHARACTERGUID)_NPC,"GEB_AppearNPCOutOfSight")
AND
DB_GEB_FledOutOfSight(_NPC,_X,_Y,_Z)
AND
GetClosestPlayerToPosition(_X,_Y,_Z,_Player,_Dist)
THEN
ProcCrimeAppearOutOfSightChecks(_NPC,_Player,_Dist);

//--- Check the distance and if the player is dead, in dialog or in combat
PROC
ProcCrimeAppearOutOfSightChecks((CHARACTERGUID)_NPC,(CHARACTERGUID)_Player,(REAL)_Dist)
AND
_Dist > 20.0
THEN
ProcAppearOutOfSightAfterFleeing(_NPC);

PROC
ProcCrimeAppearOutOfSightChecks((CHARACTERGUID)_NPC,(CHARACTERGUID)_Player,(REAL)_Dist)
AND
_Dist <= 20.0
AND
Query_CharacterIsAliveAndNotInCombat(_Player)
AND
IsSpeakerReserved(_Player,0)
THEN
ProcAppearOutOfSightAfterFleeing(_NPC);

PROC
ProcCrimeAppearOutOfSightChecks((CHARACTERGUID)_NPC,(CHARACTERGUID)_Player,(REAL)_Dist)
AND
_Dist <= 20.0
AND
DB_CombatCharacters(_Player,_CombatID)
THEN
DB_GEB_NPCAppearAfterCombat(_NPC,_CombatID);

PROC
ProcCrimeAppearOutOfSightChecks((CHARACTERGUID)_NPC,(CHARACTERGUID)_Player,(REAL)_Dist)
AND
_Dist <= 20.0
AND
CharacterIsDeadOrFeign(_Player,1)
THEN
ProcAppearOutOfSight_DeadClosestPlayer(_NPC,_Player);

PROC
ProcCrimeAppearOutOfSightChecks((CHARACTERGUID)_NPC,(CHARACTERGUID)_Player,(REAL)_Dist)
AND
NOT DB_GEB_NPCAppearAfterCombat(_NPC,_)
AND
_Dist <= 20.0
AND
IsSpeakerReserved(_Player,1)
AND
DB_DialogPlayers(_Inst,_Player,1)
THEN
DB_GEB_NPCAppearAfterDialog(_NPC,_Inst);

// Try to find a live player
PROC
ProcAppearOutOfSight_DeadClosestPlayer((CHARACTERGUID)_NPC,(CHARACTERGUID)_Player)
AND
GetClosestAlivePlayer(_Player,_AlivePlayer,_)
THEN
DB_GEB_AppearOutOfSight_AlivePlayerFound(_NPC,_AlivePlayer);

PROC
ProcAppearOutOfSight_DeadClosestPlayer((CHARACTERGUID)_NPC,(CHARACTERGUID)_Player)
AND
NOT DB_GEB_AppearOutOfSight_AlivePlayerFound(_NPC,_)
THEN
ProcAppearOutOfSightAfterFleeing(_NPC);

PROC
ProcAppearOutOfSight_DeadClosestPlayer((CHARACTERGUID)_NPC,(CHARACTERGUID)_)
AND
DB_GEB_AppearOutOfSight_AlivePlayerFound(_NPC,_AlivePlayer)
AND
DB_GEB_FledOutOfSight(_NPC,_X,_Y,_Z)
AND
GetDistanceToPosition(_AlivePlayer,_X,_Y,_Z,_Dist)
THEN
NOT DB_GEB_AppearOutOfSight_AlivePlayerFound(_NPC,_AlivePlayer);
ProcCrimeAppearOutOfSightChecks(_NPC,(CHARACTERGUID)_AlivePlayer,_Dist);

//--- Recheck after dialog & combat
IF
DialogEnded(_,_Inst)
AND
DB_GEB_NPCAppearAfterDialog(_NPC,_Inst)
THEN
NOT DB_GEB_NPCAppearAfterDialog(_NPC,_Inst);
ProcObjectTimer(_NPC,"GEB_AppearNPCOutOfSight",3000); // restart from the beginning (delay in case combat starts after the dialog)

IF
CombatEnded(_CombatID)
AND
DB_GEB_NPCAppearAfterCombat(_NPC,_CombatID)
THEN
NOT DB_GEB_NPCAppearAfterCombat(_NPC,_CombatID);
ProcObjectTimer(_NPC,"GEB_AppearNPCOutOfSight",3000); // restart the checks from the beginning

//--- Appear
PROC
ProcAppearOutOfSightAfterFleeing((CHARACTERGUID)_NPC)
AND
DB_GEB_FledOutOfSight(_NPC,_X,_Y,_Z)
THEN
NOT DB_GEB_FledOutOfSight(_NPC,_X,_Y,_Z);
SetHasDialog(_NPC,1);
CharacterAppearAtPositionOutOfSightTo((CHARACTERGUID)_NPC,_X,_Y,_Z,0,0,"GEB_NPCAppeared");
ObjectClearFlag(_NPC,"GEB_FleeOutOfSight",0);
Proc_CharacterFullRestore(_NPC);

//END_REGION

//REGION Source Magic

IF
CharacterUsedSkill(_Character,_Skill,_,_)
AND
DB_IsPlayer(_Character)
AND
IsSourceSkill(_Skill,1)
THEN
CharacterRegisterCrime(_Character,"SourceMagic",NULL_00000000-0000-0000-0000-000000000000,NULL_00000000-0000-0000-0000-000000000000,0);

//END_REGION

//REGION Stealing
IF
CharacterStoleItem(_Character,_Item,_X,_Y,_Z,_Victim,_SrcContainer,_)
AND
CharacterIsPlayer(_Character,1)
AND
_SrcContainer==NULL_00000000-0000-0000-0000-000000000000
THEN
//TODO: do not register Steal for stelaing from a container? IE: the problem with doing this is, that NPCs will detect missign items from a barrel without looking into it
ProcCharacterRegisterCrimeWithPosition(_Character,"Steal",_Item,_Victim,_X,_Y,_Z,0,_Victim);

//END_REGION

//REGION Murder (animals and non-animals)

//REGION Helpers
// A killed character may get removed from a combat before the CharacterKilledByCharacter event gets triggered
// -> also check DB_WasInCombat for the _Victim
QRY
QryCrimeKillerVictimWereInSameCombat((CHARACTERGUID)_Killer,(CHARACTERGUID)_Victim)
AND
DB_CombatCharacters(_Killer,_ID)
AND
DB_WasInCombat(_Victim,_ID)
THEN
DB_NOOP(1);

QRY
QryCrimeKillerVictimWereInSameCombat((CHARACTERGUID)_Killer,(CHARACTERGUID)_Victim)
AND
DB_CombatCharacters(_Killer,_ID)
AND
DB_CombatCharacters(_Victim,_ID)
THEN
DB_NOOP(1);

// Killing a totem or a summon is not murder
QRY
QryCrimeCharacterCanCreateMurder((CHARACTERGUID)_Char)
AND
IsTagged(_Char,"SUMMON",0)
AND
IsTagged(_Char,"TOTEM",0)
THEN
DB_NOOP(1);
//END_REGION

//REGION Determine crime type
// By default, murdering an animal results in "KilledAnimal" and murdering anyone
// else in "Murder". Can override QryCrimeMurderGetCrimeTypeCustom() to return custom results.
//
// Note: QryCrimeMurderGetCrimeTypeCustom() can be called multiple times for the same murder
//   (-> should not keep state, e.g. don't assume second call is for second murder)

// Define signature for custom query
QRY
QryCrimeMurderGetCrimeTypeCustom((CHARACTERGUID)_Killer,(CHARACTERGUID)_Victim)
AND
DB_CrimeNeverEverSet__INVALID(1)
THEN
DB_NOOP(1);

// Reset previous result, if any
QRY
QryCrimeMurderGetCrimeType((CHARACTERGUID)_Killer,(CHARACTERGUID)_Victim)
AND
DB_CrimeMurderCrimeType(_Type)
THEN
NOT DB_CrimeMurderCrimeType(_Type);

// Query custom overrides
QRY
QryCrimeMurderGetCrimeType((CHARACTERGUID)_Killer,(CHARACTERGUID)_Victim)
AND
QryCrimeMurderGetCrimeTypeCustom(_Killer,_Victim)
THEN
DB_NOOP(1);

// Default fallbacks
QRY
QryCrimeMurderGetCrimeType((CHARACTERGUID)_Killer,(CHARACTERGUID)_Victim)
AND
NOT DB_CrimeMurderCrimeType(_)
AND
IsTagged(_Victim,"ANIMAL",_Animal)
AND
HasActiveStatus(_Killer,"SNEAKING",_Sneaking)
AND
CharacterIsSummon(_Killer,_Summon)
AND
DB_CRIME_MurderType(_Sneaking,_Animal,_Summon,_MurderType)
THEN
DB_CrimeMurderCrimeType(_MurderType);
//END_REGION

//REGION Witnesses that should ignore this murder crime
// Only have to do something before registering the crime if
// the witness does not ignore crimes like this in general
PROC
ProcCrimeMurderDefineSilentWitness((INTEGER)_CrimeID,(CHARACTERGUID)_Witness,(CHARACTERGUID)_Killer,(CHARACTERGUID)_Victim)
AND
QryCrimeMurderGetCrimeType(_Killer,_Victim)
AND
DB_CrimeMurderCrimeType(_CrimeType)
AND
NOT DB_CharacterCrimeDisabled(_Witness,_CrimeType)
THEN
DB_CrimeSilentWitness(_CrimeID,_CrimeType,_Witness);
// Don't set it to ignore this crime yet, as another crime (murder)
// could occur between now and when this murder is registered due to
// the use of an iterator) -- that will be done by ProcCrimeCreateMurder)

// Convert DB_CrimeSilentWitness() to DB_CRIME_CrimeTriggers_SilentWitnessesForCrime(), as used by ProcCharacterRegisterCrimeWithPosition()
PROC
PROC_CRIME_CrimeTriggers_GetSilentWitnessesForCrime((INTEGER)_CrimeID,(CHARACTERGUID)_Perpetrator,(STRING)_CrimeType,(GUIDSTRING)_Evidence,(CHARACTERGUID)_Victim)
AND
DB_CrimeSilentWitness(_CrimeID,_CrimeType,_Witness)
THEN
NOT DB_CrimeSilentWitness(_CrimeID,_CrimeType,_Witness);
DB_CRIME_CrimeTriggers_SilentWitnessesForCrime(_Witness);

// NPCs that should ignore the murder of this victim should be treated as silent witnesses
PROC
PROC_CRIME_CrimeTriggers_GetSilentWitnessesForCrime((INTEGER)_CrimeID,(CHARACTERGUID)_Perpetrator,(STRING)_CrimeType,(GUIDSTRING)_Evidence,(CHARACTERGUID)_Victim)
AND
DB_MurderIgnoreFor((CHARACTERGUID)_Witness,(CHARACTERGUID)_Victim)
THEN
DB_CRIME_CrimeTriggers_SilentWitnessesForCrime(_Witness);
//END_REGION

//REGION Register the murder crime
PROC
ProcCrimeCreateMurder((CHARACTERGUID)_Killer,(CHARACTERGUID)_Victim,(INTEGER)_CrimeID)
AND
QryCrimeMurderGetCrimeType(_Killer,_Victim)
AND
DB_CrimeMurderCrimeType(_CrimeType)
AND
GetPosition(_Victim,_x,_y,_z)
AND
RealSum(_y,1.0,_yUp)
THEN
ProcCharacterRegisterCrimeWithPosition(_Killer,_CrimeType,NULL_00000000-0000-0000-0000-000000000000,NULL_00000000-0000-0000-0000-000000000000,_x,_yUp,_z,_CrimeID,_Victim);
//END_REGION

//REGION 1) Killed a non-enemy NPC outside of combat (one-shot, so combat did not have a chance to start)
IF
CharacterKilledBy(_Defender,_AttackerOwner,_Attacker)
AND
NOT DB_IsPlayer(_Defender)
AND
CharacterIsPlayer(_Attacker,1)
AND
CharacterIsPartyFollower(_Attacker,0)
AND
CharacterIsEnemy(_Defender,_Attacker,0)
AND
NOT DB_DontCreateMurder(_Defender)
AND
NOT QryCrimeKillerVictimWereInSameCombat(_Attacker,_Defender)
AND
QryCrimeCharacterCanCreateMurder(_Defender)
AND
CrimeGetNewID(_CrimeID)
THEN
DebugText(_Defender,"OneShot Murder Crime Scene");
DB_CrimeMurderCreated(_Defender,_Attacker);
ProcCrimeCreateMurder(_Attacker,_Defender,_CrimeID);
//END_REGION

//REGION 2) Killed an NPC while it was investigating
IF
CharacterKilledBy(_Defender,_AttackerOwner,_Attacker)
AND
NOT DB_CrimeMurderCreated(_Defender,_Attacker)
AND
NOT DB_IsPlayer(_Defender)
AND
NOT DB_DontCreateMurder(_Defender)
AND
DB_Crime_Assault(_,_,_Defender) // This DB Will be filled in if the character is still investigating
AND
QryCrimeCharacterCanCreateMurder(_Defender)
AND
CharacterIsPlayer(_Attacker,1)
AND
CharacterIsPartyFollower(_Attacker,0)
AND
CrimeGetNewID(_CrimeID)
THEN
DebugText(_Defender,"Mid Investigate Murder Crime Scene");
ProcCrimeCreateMurder(_Attacker,_Defender,_CrimeID);
//END_REGION

//REGION 3) Killed an NPC in a combat following an assault crime
// Current logic:
//  - Create a murder for any NPC that you kill in this combat
//  - This murder is, however, ignored by anyone within a 25 metre range that was not in combat
// Reasoning: the characters that joined in the combat due to the assault, presumably would
// have done the same for murder. The ones that did not, might not join for murder either. They also
// might, but we don't have a good way to determine this. Creating a murder in this case can easily
// lead to an avalache where a whole city starts fighting a player, which is not good -> be very
// restrictive about who will care about such a murder
//
// Don't check for CharacterIsEnemy(_NPC,0), because when someone attacks you after you assaulted them,
// they will obviously be an enemty to you.
IF
CharacterKilledBy(_Defender,_AttackerOwner,_Attacker)
AND
NOT DB_CrimeMurderCreated(_Defender,_Attacker)
AND
// This DB is set after an assault crime, and also for other
// characters that join a combat in which an assault victim is involved
DB_Crime_PlayerAttacked(_,_,_Defender)
AND
DB_CombatCharacters(_Defender,_ID)
AND
NOT DB_IsPlayer(_Defender)
AND
NOT DB_DontCreateMurder(_Defender)
AND
CharacterIsPlayer(_Attacker,1)
AND
CharacterIsPartyFollower(_Attacker,0)
AND
QryCrimeCharacterCanCreateMurder(_Defender)
AND
CrimeGetNewID(_CrimeID)
AND
IntegertoString(_CrimeID,_Iterator)
AND
StringConcatenate(_Iterator,"GEB_IgnoreCrime",_IteratorID)
THEN
DebugText(_Defender,"Assault murder scene");
DB_CrimeMurderSilentWitnessCollectionContext(_CrimeID,_Defender,_IteratorID,_Attacker);
CharacterLaunchIteratorAroundObject(_Defender,25.0,_IteratorID);

PROC
ProcCrimeMurderMaybeMakeSilentWitness((INTEGER)_CrimeID,(CHARACTERGUID)_Witness,(CHARACTERGUID)_Killer,(CHARACTERGUID)_Victim)
AND
NOT DB_CombatCharacters(_Witness,_)
THEN
ProcCrimeMurderDefineSilentWitness(_CrimeID,_Witness,_Killer,_Victim);

// Allies let allies commit murders! That's what real friendship is all about.
PROC
ProcCrimeMurderMaybeMakeSilentWitness((INTEGER)_CrimeID,(CHARACTERGUID)_Witness,(CHARACTERGUID)_Killer,(CHARACTERGUID)_Victim)
AND
DB_CombatCharacters(_Witness,_)
AND
CharacterIsAlly(_Witness,_Killer,1)
THEN
ProcCrimeMurderDefineSilentWitness(_CrimeID,_Witness,_Killer,_Victim);

// Neutral against killer -> not attacking now -> should not care afterwards either
PROC
ProcCrimeMurderMaybeMakeSilentWitness((INTEGER)_CrimeID,(CHARACTERGUID)_Witness,(CHARACTERGUID)_Killer,(CHARACTERGUID)_Victim)
AND
DB_CombatCharacters(_Witness,_)
AND
CharacterIsNeutral(_Witness,_Killer,1)
THEN
ProcCrimeMurderDefineSilentWitness(_CrimeID,_Witness,_Killer,_Victim);

// An ally of my ally is my friend (e.g. Butter in Fort Joy is only allied to the player that charmed her).
PROC
ProcCrimeMurderMaybeMakeSilentWitness((INTEGER)_CrimeID,(CHARACTERGUID)_Witness,(CHARACTERGUID)_Killer,(CHARACTERGUID)_Victim)
AND
DB_CombatCharacters(_Witness,_)
AND
DB_IsPlayer(_Player)
AND
CharacterIsAlly(_Witness,_Player,1)
AND
CharacterIsAlly(_Player,_Killer,1)
THEN
ProcCrimeMurderDefineSilentWitness(_CrimeID,_Witness,_Killer,_Victim);

// Ignore murder seen in combat
IF
StoryEvent((CHARACTERGUID)_NPC,_IteratorID)
AND
DB_CrimeMurderSilentWitnessCollectionContext(_CrimeID,_DeadMan,_IteratorID,_Killer)
AND
_NPC != NULL_00000000-0000-0000-0000-000000000000
AND
NOT DB_dead((CHARACTERGUID)_NPC)
THEN
ProcCrimeMurderMaybeMakeSilentWitness(_CrimeID,_NPC,_Killer,_DeadMan);

// Create Murder (Last NPC in the Iterator is NULL_00000000-0000-0000-0000-000000000000)
IF
StoryEvent(_NPC,_IteratorID)
AND
DB_CrimeMurderSilentWitnessCollectionContext(_CrimeID,_DeadMan,_IteratorID,_Killer)
AND
_NPC == NULL_00000000-0000-0000-0000-000000000000
THEN
NOT DB_CrimeMurderSilentWitnessCollectionContext(_CrimeID,_DeadMan,_IteratorID,_Killer);
DebugText(_DeadMan,"Normal Murder Crime Scene");
ProcCrimeCreateMurder(_Killer,_DeadMan,_CrimeID);

QRY
Qry_HasDontCreateMurderInCombat((INTEGER)_ID)
AND
DB_CombatCharacters(_NPCS,_ID)
AND
DB_DontCreateMurder((CHARACTERGUID)_NPCS)
THEN
DB_NOOP(1);

// One DB_DontCreateMurder() NPC in a combat -> killing others that join the combat should not create murders either
// (TODO: check that they're allies of one of the DB_DontCreateMurder() NPCs -- especially now that neutrals don't
//  join random combats anymore)
IF
ObjectEnteredCombat(_Obj,_ID)
AND
ObjectIsCharacter(_Obj,1)
AND
Qry_HasDontCreateMurderInCombat(_ID)
AND
DB_CombatCharacters(_NPC,_ID)
AND
NOT DB_IsPlayer(_NPC)
AND
NOT DB_DontCreateMurder(_NPC)
THEN
DB_DontCreateMurder(_NPC);
DB_CrimeCreateMurderAfterCombat(_NPC,_ID);
DebugText(_NPC," Killing me won't create a murder in this combat, because I joined a combat with others whose murder gets ignored");

IF
ObjectSwitchedCombat((CHARACTERGUID)_NPC,_OldCombatID,_NewCombatID)
AND
DB_CrimeCreateMurderAfterCombat(_NPC,_OldCombatID)
THEN
NOT DB_CrimeCreateMurderAfterCombat(_NPC,_OldCombatID);
DB_CrimeCreateMurderAfterCombat(_NPC,_NewCombatID);

IF
CombatEnded(_CombatID)
AND
DB_CrimeCreateMurderAfterCombat(_NPC,_CombatID)
THEN
NOT DB_CrimeCreateMurderAfterCombat(_NPC,_CombatID);
NOT DB_DontCreateMurder(_NPC);

IF
ObjectEnteredCombat(_NPC,_)
AND
ObjectIsCharacter(_NPC,1)
THEN
ProcCrimeAddToAttackedDBIfAssaultCombat((CHARACTERGUID)_NPC);

IF
ObjectSwitchedCombat(_NPC,_,_)
AND
ObjectIsCharacter(_NPC,1)
THEN
ProcCrimeAddToAttackedDBIfAssaultCombat((CHARACTERGUID)_NPC);

IF
DB_Crime_PlayerAttacked(_CrimeID,_Player,_NPC)
THEN
ProcCrimeAddToAttackedDBIfAssaultCombat((CHARACTERGUID)_NPC);

PROC
ProcCrimeAddToAttackedDBIfAssaultCombat((CHARACTERGUID)_NPC)
AND
DB_CombatCharacters(_NPC,_ID)
AND
DB_Crime_PlayerAttacked(_CrimeID,_Player,_OrigVic)
AND
DB_CombatCharacters(_Player,_ID)
AND
DB_CombatCharacters(_NPC2,_ID)
AND
NOT DB_Crime_PlayerAttacked(_CrimeID,_Player,_NPC2)
AND
CharacterIsPlayer(_NPC2,0)
AND
CharacterIsAlly(_OrigVic,_NPC2,1)
THEN
DB_Crime_PlayerAttacked(_CrimeID,_Player,_NPC2);
DebugText(_NPC2," Killing me will create a murder scene (probably joined combat to help assaulted NPC), although it will be ignored by anyone within a 25m radius of this combat");

IF
ObjectLeftCombat((CHARACTERGUID)_NPC,_)
AND
DB_Crime_PlayerAttacked(_CrimeID,_Player,_NPC)
THEN
NOT DB_Crime_PlayerAttacked(_CrimeID,_Player,_NPC);

IF
OnCrimeMergedWith(_Old,_New)
AND
DB_CrimeMurderSilentWitnessCollectionContext(_Old,_DeadMan,_IteratorID,_Killer)
THEN
NOT DB_CrimeMurderSilentWitnessCollectionContext(_Old,_DeadMan,_IteratorID,_Killer);
DB_CrimeMurderSilentWitnessCollectionContext(_New,_DeadMan,_IteratorID,_Killer);

IF
OnCrimeMergedWith(_Old,_New)
AND
DB_CrimeSilentWitness(_Old,_CrimeType,_NPC)
THEN
NOT DB_CrimeSilentWitness(_Old,_CrimeType,_NPC);
DB_CrimeSilentWitness(_New,_CrimeType,_NPC);
//END_REGION

//REGION Reset DB_CrimeMurderCreated
IF
CharacterKilledBy(_Defender,_AttackerOwner,_Attacker)
AND
DB_CrimeMurderCreated(_Defender,_Attacker)
THEN
NOT DB_CrimeMurderCreated(_Defender,_Attacker);
//END_REGION

//END_REGION

//REGION Pickpocket

IF
RequestPickpocket(_Player,_Npc)
AND
DB_CannotPickpocketTags(_Tag)
AND
IsTagged(_Npc, _Tag, 1)
AND
CharacterIsPartyMember(_Npc, 0)
THEN
DB_PickpocketingBlocked(1);
Proc_StartDialog(1,"GEB_AD_CannotPickpocket",_Player);

IF
RequestPickpocket(_Player,_Npc)
AND
NOT DB_PickpocketingBlocked(1)
THEN
RemoveStatus(_Player,"INVISIBLE");

IF
CharacterPickpocketFailed(_Player,_)
THEN
RemoveStatus(_Player,"INVISIBLE");


IF
RequestPickpocket(_Player,_Npc)
AND
DB_PickpocketingBlocked(1)
THEN
StartPickpocket(_Player,_Npc,0);

IF
RequestPickpocket(_Player,_Npc)
AND
NOT DB_PickpocketingBlocked(1)
AND
CharacterIsPartyMember(_Npc, 0)
THEN
GenTradeItems(_Player,_Npc);
StartPickpocket(_Player,_Npc,1);

IF
RequestPickpocket(_Player,_Npc)
THEN
NOT DB_PickpocketingBlocked(1);

IF
RequestPickpocket(_Player,_OtherPlayer)
AND
CharacterIsPartyMember(_OtherPlayer, 1)
THEN
StartPickpocket(_Player,_OtherPlayer,1);


//--- PICKPOCKET SUCCESS
IF
CharacterPickpocketSuccess(_Thief,_Victim,_Item,_Amount) //TODO: Only trigger on HighValueItems
AND
CharacterIsCrimeEnabled(_Victim,"EmptyPocketNoticed",1)
AND
CharacterCanSpotCrimes(_Victim,1)
AND
Random(10000,_Rand)
AND
IntegerSum(_Rand,5000,_Time)
THEN
DB_Pickpocketed(_Thief,_Victim,_Item);
ProcObjectTimerCancel(_Victim,"CRIME_Pickpocket_CheckPockets");
ProcObjectTimer(_Victim,"CRIME_Pickpocket_CheckPockets",_Time);


PROC
ProcObjectTimerFinished((CHARACTERGUID)_Victim,"CRIME_Pickpocket_CheckPockets")
AND
CharacterIsDead(_Victim,0)
AND
IsSpeakerReserved(_Victim,1) // Victim is in dialog, restart timer to delay reaction
AND
Random(10000,_Rand)
AND
IntegerSum(_Rand,5000,_Time)
THEN
ProcObjectTimerCancel(_Victim,"CRIME_Pickpocket_CheckPockets");
ProcObjectTimer(_Victim,"CRIME_Pickpocket_CheckPockets",_Time);

PROC
ProcObjectTimerFinished((CHARACTERGUID)_Victim,"CRIME_Pickpocket_CheckPockets")
AND
QRY_SpeakerIsAvailable(_Victim)
AND
DB_Pickpocketed(_Thief,_Victim,_)
AND
QueryOnlyOnce("CRIME_Pickpocket_PlayAnimation")
THEN
RemoveStatus(_Victim,"SITTING");
RemoveStatus(_Victim,"LYING");
PlayAnimation(_Victim,"PickPocket_01");

PROC
ProcObjectTimerFinished((CHARACTERGUID)_Victim,"CRIME_Pickpocket_CheckPockets")
AND
QRY_SpeakerIsAvailable(_Victim)
AND
DB_Pickpocketed(_Thief,_Victim,_Item)
AND
GetPosition(_Victim,_x,_y,_z)
THEN
NOT DB_OnlyOnce("CRIME_Pickpocket_PlayAnimation");
NOT DB_Pickpocketed(_Thief,_Victim,_Item);
CharacterRegisterCrimeWithPosition(_Thief,"EmptyPocketNoticed",_Item,_Victim,_x,_y,_z,0);


//--- PICKPOCKET FAIL
//--- Don't create a crime if it failed because of a tag
IF
CharacterPickpocketFailed(_Player,_Npc)
AND
CharacterIsPartyMember(_Npc, 0)
AND
DB_CannotPickpocketTags(_Tag)
AND
IsTagged(_Npc, _Tag, 1)
THEN
DB_PickpocketingBlocked(1);

//--- Check if player already stole items on that NPC
//--- Pass the item as evidence if it's the case.
IF
CharacterPickpocketFailed(_Player,_Npc)
AND
NOT DB_PickpocketingBlocked(1)
AND
CharacterIsPartyMember(_Npc, 0)
THEN
ProcCrimePickpocketFailedFlow(_Player,_Npc);

PROC
ProcCrimePickpocketFailedFlow((CHARACTERGUID)_Player,(CHARACTERGUID)_Npc)
THEN
ProcObjectTimerCancel(_Npc,"CRIME_Pickpocket_CheckPockets");

PROC
ProcCrimePickpocketFailedFlow((CHARACTERGUID)_Player,(CHARACTERGUID)_Npc)
AND
CharacterIsCrimeEnabled(_Npc,"PickPocketFailed",1)
THEN
RemoveStatus(_Player,"SNEAKING");
RemoveStatus(_Npc,"SLEEPING");
RemoveStatus(_Npc,"LYING");

PROC
ProcCrimePickpocketFailedFlow((CHARACTERGUID)_Player,(CHARACTERGUID)_Npc)
AND
NOT DB_Pickpocketed(_Player,_Npc,_)
THEN
ProcRegisterPickPocketFailed(_Player,_Npc,NULL_00000000-0000-0000-0000-000000000000);

PROC
ProcCrimePickpocketFailedFlow((CHARACTERGUID)_Player,(CHARACTERGUID)_Npc)
AND
DB_Pickpocketed(_Player,_Npc,_)
AND
QryCrimeWarningPickPocketFailed_NpcDoesNOTCheckEvidence(_Npc)
AND
NOT DB_PickpocketFailedNoEvidenceRegistered(1)
THEN
DB_PickpocketFailedNoEvidenceRegistered(1);
ProcRegisterPickPocketFailed(_Player,_Npc,NULL_00000000-0000-0000-0000-000000000000);

PROC
ProcCrimePickpocketFailedFlow((CHARACTERGUID)_Player,(CHARACTERGUID)_Npc)
THEN
NOT DB_PickpocketFailedNoEvidenceRegistered(1);

// pass item as evidence if NPC must perform a search
PROC
ProcCrimePickpocketFailedFlow((CHARACTERGUID)_Player,(CHARACTERGUID)_Npc)
AND
DB_Pickpocketed(_Player,_Npc,_Item)
AND
NOT QryCrimeWarningPickPocketFailed_NpcDoesNOTCheckEvidence(_Npc)
THEN
ProcRegisterPickPocketFailed(_Player,_Npc,_Item);
NOT DB_Pickpocketed(_Player,_Npc,_Item);

PROC
ProcRegisterPickPocketFailed((CHARACTERGUID)_Player,(CHARACTERGUID)_Npc,(GUIDSTRING)_Evidence)
AND
GetPosition(_Npc,_X,_Y,_Z)
AND
RealSum(_Y,1.0,_YUp)
THEN
CharacterRegisterCrimeWithPosition(_Player,"PickPocketFailed",_Evidence,_Npc,_X,_YUp,_Z,0);

QRY
QryCrimeWarningPickPocketFailed_NpcDoesNOTCheckEvidence((CHARACTERGUID)_Npc)
AND
CharacterIsPartyMember(_Npc, 0)
AND
NOT QryNPCIsGuard(_Npc)
THEN
DB_NOOP(1);

PROC
ProcCrimePickpocketFailedFlow((CHARACTERGUID)_Player,(CHARACTERGUID)_Npc)
THEN
NOT DB_PickpocketingBlocked(1);


//END_REGION

//REGION NPC Draw Weapons
// -------------------------- CRIME_Draw Reaction ----------------------------->
IF
CharacterOnCrimeSensibleActionNotification(_NPC,_,_CrimeID,"CRIME_Draw",_,_Criminal,_Criminal2,_Criminal3,_Criminal4,_)
AND
NOT DB_CombatCharacters(_Criminal,_)
AND
NOT DB_CombatCharacters(_NPC,_)
AND
NOT DB_NPCDrawForCrimial(_NPC,_CrimeID,_Criminal)
AND
CharacterCanSee(_NPC,_Criminal,_)
THEN
DB_NPCDrawForCrimial(_NPC,_CrimeID,_Criminal);

IF
CharacterLostSightOfCharacter(_NPC,_Criminal)
AND
NOT DB_CombatCharacters(_NPC,_)
AND
DB_NPCDrawForCrimial(_NPC,_CrimeID,_Criminal)
THEN
CharacterSetFightMode(_NPC,0,0);
NOT DB_NPCDrawForCrimial(_NPC,_CrimeID,_Criminal);

// -------------------------- WeaponsDrawn Crime ----------------------------->
PROC
ProcStoreFightMode((CHARACTERGUID)_Npc)
AND
NOT DB_FightModeState(_Npc,_)
AND
CharacterIsInFightMode(_Npc,_FightMode)
THEN
DB_FightModeState(_Npc,_FightMode);

PROC
ProcRestoreFightMode((CHARACTERGUID)_Npc)
AND
DB_FightModeState(_Npc,_State)
AND
NOT DB_CombatCharacters(_NPC,_)
THEN
CharacterSetFightMode(_Npc,_State,0);
NOT DB_FightModeState(_Npc,_State);

IF
StoryEvent(_Npc,"CRIME_RestoreUnsheath")
AND
ObjectExists(_Npc,1)
THEN
ProcRestoreFightMode((CHARACTERGUID)_Npc);

IF
CharacterOnCrimeSensibleActionNotification(_NPC,_,_CrimeID,_,_,_Criminal,_Criminal2,_Criminal3,_Criminal4,_)
AND
NOT DB_CombatCharacters(_NPC,_)
AND
CrimeGetType(_CrimeID,"WeaponsDrawn")
AND
NOT DB_NPCSheathWeapon(_NPC,_Criminal)
THEN
DB_NPCSheathWeapon(_NPC,_Criminal);
DB_NPCSheathWeapon(_NPC,_Criminal2);
DB_NPCSheathWeapon(_NPC,_Criminal3);
DB_NPCSheathWeapon(_NPC,_Criminal4);
NOT DB_NPCSheathWeapon(_NPC,NULL_00000000-0000-0000-0000-000000000000);
ProcStoreFightMode(_Npc);
CharacterSetFightMode(_NPC,1,0);

IF
CharacterStatusRemoved(_Player,"UNSHEATHED",_)
AND
DB_IsPlayer(_Player)
AND
DB_NPCSheathWeapon(_NPC,_Player)
AND
NOT DB_CombatCharacters(_NPC,_)
THEN
NOT DB_NPCSheathWeapon(_NPC,_Player);
ProcCrimeCheckIfPlayersWeaponsOut((CHARACTERGUID)_NPC);

PROC
ProcCrimeCheckIfPlayersWeaponsOut((CHARACTERGUID)_NPC)
AND
NOT DB_NPCSheathWeapon(_NPC,_)
AND
NOT DB_CombatCharacters(_NPC,_)
THEN
ProcRestoreFightMode(_NPC);
SetStoryEvent(_NPC,"NPCReturnToOrginalPos");

IF
ObjectLeftCombat((CHARACTERGUID)_NPC,_)
AND
DB_NPCSheathWeapon(_NPC,_)
AND
ObjectExists(_NPC,1)
AND
CharacterIsDead(_NPC,0)
THEN
ProcRestoreFightMode(_NPC);

IF
CharacterLostSightOfCharacter(_NPC,_Player)
AND
DB_NPCSheathWeapon(_NPC,_Player)
THEN
NOT DB_NPCSheathWeapon(_NPC,_Player);
ProcCrimeCheckIfPlayersWeaponsOut(_NPC);

IF
DB_BlockThreatenedDialog((CHARACTERGUID)_Char)
THEN
CharacterDisableCrime(_Char,"WeaponsDrawn");
DB_CheckWeaponsDrawnCrime(_Char);

IF
DB_CheckWeaponsDrawnCrime((CHARACTERGUID)_Char)
AND
NOT DB_BlockThreatenedDialog(_Char)
AND
NOT DB_CharacterCrimeDisabled(_Char,"WeaponsDrawn")
THEN
CharacterEnableCrime(_Char,"WeaponsDrawn");

//END_REGION

//REGION Sneaking Spotted
IF
CharacterSawSneakingCharacter(_NPC,_Player)
AND
CharacterIsPlayer(_NPC,0)
THEN
CharacterRegisterCrime(_Player,"Sneaking",NULL_00000000-0000-0000-0000-000000000000,_NPC,0);
//END_REGION

//REGION Vandalise - AttackItem
QRY
QRY_Crime_ItemHasHPorIndestructible((ITEMGUID)_Item)
AND
ItemIsDestructible(_Item,0)
THEN
DB_NOOP(1);

QRY
QRY_Crime_ItemHasHPorIndestructible((ITEMGUID)_Item)
AND
ItemIsDestructible(_Item,1)
AND
ItemGetHealthPoints(_Item,_INT)
AND
_INT > 0
THEN
DB_NOOP(1);

//--- 1) Item attacked
IF
AttackedByObject((ITEMGUID)_Item,(CHARACTERGUID)_Player,(CHARACTERGUID)_Summon,_,_DamageSource)
AND
NOT QryIgnoreDamageSource(_DamageSource)
AND
ObjectIsItem(_Item,1)
AND
CharacterIsPlayer(_Player,1)
AND
QRY_Crime_ItemHasHPorIndestructible(_Item)
THEN
ProcCrimeVandaliseCheckOwner(_Item,_Player,_Summon);

//--- 2) Check if the item has an owner
PROC
ProcCrimeVandaliseCheckOwner((ITEMGUID)_Item,(CHARACTERGUID)_Player,(CHARACTERGUID)_Summon)
AND
ItemGetOwner(_Item,_Owner)
AND
_Owner != NULL_00000000-0000-0000-0000-000000000000
AND
CharacterIsPlayer(_Owner,0)
THEN
ProcCrimeVandaliseCheckVandal(_Item,_Owner,_Player,_Summon,"");

PROC
ProcCrimeVandaliseCheckOwner((ITEMGUID)_Item,(CHARACTERGUID)_Player,(CHARACTERGUID)_Summon)
AND
ItemGetOwner(_Item,_Owner)
AND
_Owner == NULL_00000000-0000-0000-0000-000000000000
AND
NOT QryCheckforVandaliseTags(_Item)
THEN
ProcCrimeVandaliseCheckVandal(_Item,NULL_00000000-0000-0000-0000-000000000000,_Player,_Summon,"NoOwner");


//--- 3) Check if the vandal is a summon
PROC
ProcCrimeVandaliseCheckVandal((ITEMGUID)_Item,(CHARACTERGUID)_Owner,(CHARACTERGUID)_Player,(CHARACTERGUID)_Summon,(STRING)_Postfix)
AND
NOT QRY_CharacterIsNull(_Summon)
AND
CharacterIsSummon(_Summon,1)
AND
QryShouldTriggerVandaliseCrime(_Item,_Summon)
AND
NOT DB_Crime_Vandalise((CHARACTERGUID)_Summon,(ITEMGUID)_Item,(INTEGER)_)
THEN
ProcCrimeRegisterVandalise(_Item,_Owner,_Summon,"Summon",_Postfix);

PROC
ProcCrimeVandaliseCheckVandal((ITEMGUID)_Item,(CHARACTERGUID)_Owner,(CHARACTERGUID)_Player,(CHARACTERGUID)_Summon,(STRING)_Postfix)
AND
_Player == _Summon
AND
QryShouldTriggerVandaliseCrime(_Item,_Player)
AND
NOT DB_Crime_Vandalise(_Player,_Item,_)
THEN
ProcCrimeRegisterVandalise(_Item,_Owner,_Player,"",_Postfix);


//--- 4) Concatenate the crime's name & register it
PROC
ProcCrimeRegisterVandalise((ITEMGUID)_Item,(CHARACTERGUID)_Owner,(CHARACTERGUID)_Vandal)
THEN
ProcCrimeRegisterVandalise(_Item,_Owner,_Vandal,"","");

PROC
ProcCrimeRegisterVandalise((ITEMGUID)_Item,(CHARACTERGUID)_Owner,(CHARACTERGUID)_Vandal,(STRING)_Prefix,(STRING)_Postfix)
AND
StringConcatenate(_Prefix,"Vandalise",_Part1)
AND
StringConcatenate(_Part1,_Postfix,_CrimeName)
AND
GetPosition(_Item,_x,_y,_z)
AND
RealSum(_y,1.0,_yUp)
AND
CrimeGetNewID(_CrimeID)
THEN
DB_Crime_Vandalise(_Vandal,_Item,_CrimeID);
CharacterRegisterCrimeWithPosition(_Vandal,_CrimeName,_Item,_Owner,_x,_yUp,_z,_CrimeID);


QRY
QryCheckforVandaliseTags((ITEMGUID)_Item)
AND
DB_IgnoreVandaliseTag((STRING)_Tag)
AND
IsTagged(_Item,_Tag,1)
THEN
DB_NOOP(1);

QRY
QryShouldTriggerVandaliseCrime((ITEMGUID)_Item,(CHARACTERGUID)_Player)
AND
NOT DB_CombatCharacters(_Player,_)
THEN
DB_NOOP(1);

QRY
QryShouldTriggerVandaliseCrime((ITEMGUID)_Item,(CHARACTERGUID)_Player)
AND
DB_TriggerVandaliseInCombat(_Item)
THEN
DB_NOOP(1);

IF
OnCrimeMergedWith(_Old,_New)
AND
DB_Crime_Vandalise(_Player,_Item,_Old)
THEN
NOT DB_Crime_Vandalise(_Player,_Item,_Old);
DB_Crime_Vandalise(_Player,_Item,_New);

QRY
QryCheckforVandaliseTags((ITEMGUID)_Item)
AND
DB_IgnoreVandaliseTag((STRING)_Tag)
AND
IsTagged(_Item,_Tag,1)
THEN
DB_NOOP(1);

//REGION Resolve Vandalise
IF
OnCrimeRemoved(_CrimeID,_Victim,_Criminal1,_Criminal2,_Criminal3,_Criminal4)
THEN
ProcCrimeClearVandaliseDB(_Criminal1,_CrimeID);
ProcCrimeClearVandaliseDB(_Criminal2,_CrimeID);
ProcCrimeClearVandaliseDB(_Criminal3,_CrimeID);
ProcCrimeClearVandaliseDB(_Criminal4,_CrimeID);

IF
OnCrimeResolved(_CrimeID,_Victim,_Criminal1,_Criminal2,_Criminal3,_Criminal4)
AND
CrimeGetType(_CrimeID,"Vandalise")
THEN
ProcCrimeClearVandaliseDB(_Criminal1,_CrimeID);
ProcCrimeClearVandaliseDB(_Criminal2,_CrimeID);
ProcCrimeClearVandaliseDB(_Criminal3,_CrimeID);
ProcCrimeClearVandaliseDB(_Criminal4,_CrimeID);

IF
OnCrimeResolved(_CrimeID,_Victim,_Criminal1,_Criminal2,_Criminal3,_Criminal4)
AND
CrimeGetType(_CrimeID,"VandaliseNoOwner")
THEN
ProcCrimeClearVandaliseDB(_Criminal1,_CrimeID);
ProcCrimeClearVandaliseDB(_Criminal2,_CrimeID);
ProcCrimeClearVandaliseDB(_Criminal3,_CrimeID);
ProcCrimeClearVandaliseDB(_Criminal4,_CrimeID);

PROC
ProcCrimeClearVandaliseDB((CHARACTERGUID)_Player,(INTEGER)_CrimeID)
AND
DB_Crime_Vandalise(_Player,_Item,_CrimeID)
THEN
NOT DB_Crime_Vandalise(_Player,_Item,_CrimeID);
//END_REGION
//END_REGION

//REGION Vandalise - Destroy Item

IF
AttackedByObject((ITEMGUID)_Item,(CHARACTERGUID)_Player,(CHARACTERGUID)_Summon,_,_DamageSource)
AND
NOT QryIgnoreDamageSource(_DamageSource)
AND
ObjectIsItem(_Item,1)
AND
CharacterIsPlayer(_Player,1)
AND
NOT DB_CombatCharacters(_Player,_)
AND
ItemIsDestructible(_Item,1)
AND
ItemGetHealthPoints(_Item,_INT)
AND
_INT < 1
AND
NOT DB_Crime_ItemDestroyed(_Item,_Player)
AND
ItemGetOwner(_Item,_Owner)
AND
_Owner != NULL_00000000-0000-0000-0000-000000000000
AND
CharacterIsPlayer(_Owner,0)
THEN
ProcCrimeItemDestroyCheckVandal(_Item,_Owner,_Player,_Summon);

//2. check the criminal
PROC
ProcCrimeItemDestroyCheckVandal((ITEMGUID)_Item,(CHARACTERGUID)_Owner,(CHARACTERGUID)_Player,(CHARACTERGUID)_Summon)
AND
NOT QRY_CharacterIsNull(_Summon)
AND
CharacterIsSummon(_Summon,1)
AND
QryShouldTriggerVandaliseCrime(_Item,_Summon)
AND
NOT DB_Crime_Vandalise((CHARACTERGUID)_Summon,(ITEMGUID)_Item,(INTEGER)_)
THEN
ProcCrimeRegisterItemDestroy(_Item,_Owner,_Summon,"Summon");

PROC
ProcCrimeItemDestroyCheckVandal((ITEMGUID)_Item,(CHARACTERGUID)_Owner,(CHARACTERGUID)_Player,(CHARACTERGUID)_Summon)
AND
_Player == _Summon
AND
QryShouldTriggerVandaliseCrime(_Item,_Player)
AND
NOT DB_Crime_Vandalise(_Player,_Item,_)
THEN
ProcCrimeRegisterItemDestroy(_Item,_Owner,_Player,"");

//3. register the crime
PROC
ProcCrimeRegisterItemDestroy((ITEMGUID)_Item,(CHARACTERGUID)_Owner,(CHARACTERGUID)_Vandal,(STRING)_Prefix)
AND
StringConcatenate(_Prefix,"ItemDestroy",_CrimeName)
AND
GetPosition(_Item,_x,_y,_z)
AND
RealSum(_y,1.0,_yUp)
THEN
DB_Crime_ItemDestroyed(_Item,_Vandal);
CharacterRegisterCrimeWithPosition(_Vandal,_CrimeName,_Item,_Owner,_x,_yUp,_z,0);

//END_REGION

//REGION Status Reaction
IF
CharacterStatusApplied(_Player,_Status,_)
AND
_Status != "UNSHEATHED"
AND
DB_IsPlayer(_Player)
AND
DB_StatusReaction(_Status,_Crime)
AND
HasActiveStatus(_Player,_Status,1)
THEN
DB_StatusReactingToPlayer(_Player,_Status);
CharacterRegisterCrime(_Player,_Crime,NULL_00000000-0000-0000-0000-000000000000,NULL_00000000-0000-0000-0000-000000000000,0);

IF
CharacterStatusApplied(_Player,_Status,_)
AND
_Status == "UNSHEATHED"
AND
DB_IsPlayer(_Player)
AND
NOT DB_CombatCharacters(_Player,_)
AND
DB_StatusReaction(_Status,_Crime)
AND
HasActiveStatus(_Player,_Status,1)
THEN
DB_StatusReactingToPlayer(_Player,_Status);
CharacterRegisterCrime(_Player,_Crime,NULL_00000000-0000-0000-0000-000000000000,NULL_00000000-0000-0000-0000-000000000000,0);


IF
CharacterStatusRemoved(_Player, _Status, _)
AND
DB_IsPlayer(_Player)
AND
DB_StatusReaction(_Status,_Crime)
THEN
CharacterStopCrime(_Player,_Crime,NULL_00000000-0000-0000-0000-000000000000);
NOT DB_StatusReactingToPlayer(_Player,_Status);

//END_REGION

//REGION Is Not Messing Around
IF
DB_IsNotMessingAround((CHARACTERGUID)_Char)
THEN
DB_AttackOnAssault(_Char);
SetTag(_Char,"NOT_MESSING_AROUND");
ProcCharacterEnableCrime(_Char,"Assault");

IF
DB_RemoveIsNotMessingAround((CHARACTERGUID)_Char)
THEN
NOT DB_IsNotMessingAround(_Char);
NOT DB_RemoveIsNotMessingAround(_Char);
ClearTag(_Char,"NOT_MESSING_AROUND");

IF
DB_AttackOnAssault(_Char)
AND
NOT DB_IsNotMessingAround(_Char)
THEN
NOT DB_AttackOnAssault(_Char);
ClearTag(_Char,"NOT_MESSING_AROUND");
//END_REGION

//REGION Attitude Change
QRY
QryNPCCaresAboutVictim((CHARACTERGUID)_NPC,(CHARACTERGUID)_Victim,(INTEGER)_)
AND
IsTagged(_NPC,"ANIMAL",1)
AND
IsTagged(_Victim,"ANIMAL",1)
THEN
DB_NOOP(1);

QRY
QryNPCCaresAboutVictim((CHARACTERGUID)_NPC,(CHARACTERGUID)_Victim,_Primary)
AND
IsTagged(_NPC,"ANIMAL",0)
AND
QryNonAnimalNPCCaresAboutVictim(_NPC,_Victim,_Primary)
THEN
DB_NOOP(1);


QRY
QryNonAnimalNPCCaresAboutVictim((CHARACTERGUID)_NPC,(CHARACTERGUID)_Victim,0)
AND
ObjectIsCharacter(_Victim,0)
THEN
DB_NOOP(1);

QRY
QryNonAnimalNPCCaresAboutVictim((CHARACTERGUID)_NPC,(CHARACTERGUID)_Victim,0)
AND
ObjectIsCharacter(_Victim,1)
AND
CharacterIsAlly(_NPC,_Victim,1)
THEN
DB_NOOP(1);

QRY
QryNonAnimalNPCCaresAboutVictim((CHARACTERGUID)_NPC,(CHARACTERGUID)_Victim,1)
THEN
DB_NOOP(1);

IF
CharacterOnCrimeSensibleActionNotification(_NPC,_Region,_CrimeID,_PriorityName,_Dialog,_Criminal,_Criminal2,_Criminal3,_Criminal4,_Primary)
AND
CrimeGetType(_CrimeID,_CrimeName)
AND
NOT DB_NPC_CrimeAttitude_DoNotChange(_NPC,_CrimeName)
AND
DB_CrimeAttitudeChange(_CrimeName,_AttitudeAmountToSub)
AND
CrimeGetVictim(_CrimeID,_Victim)
THEN
ProcCheckAdjustAttitude(_NPC,_Victim,_Criminal,_Criminal2,_Criminal3,_Criminal4,_AttitudeAmountToSub,_Primary);

PROC
ProcCheckAdjustAttitude((CHARACTERGUID)_NPC,(CHARACTERGUID)_Victim,(CHARACTERGUID)_Criminal,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4,(INTEGER)_AttitudeAmountToSub, (INTEGER)_Primary)
AND
QryNPCCaresAboutVictim(_NPC,_Victim,_Primary)
THEN
ProcCrimeCheckIfAttitudeCauseCombat(_NPC,_Criminal,_AttitudeAmountToSub);
ProcCrimeCheckIfAttitudeCauseCombat(_NPC,_Criminal2,_AttitudeAmountToSub);
ProcCrimeCheckIfAttitudeCauseCombat(_NPC,_Criminal3,_AttitudeAmountToSub);
ProcCrimeCheckIfAttitudeCauseCombat(_NPC,_Criminal4,_AttitudeAmountToSub);

PROC
ProcCrimeCheckIfAttitudeCauseCombat((CHARACTERGUID)_NPC,(CHARACTERGUID)_Criminal,(INTEGER)_AttitudeAmountToSub)
THEN
CharacterAddAttitudeTowardsPlayer(_NPC,_Criminal,_AttitudeAmountToSub);

PROC
ProcCrimeCheckIfAttitudeCauseCombat((CHARACTERGUID)_NPC,(CHARACTERGUID)_Criminal,(INTEGER)_AttitudeAmountToSub)
AND
CharacterGetAttitudeTowardsPlayer(_NPC,_Criminal,_NPCCurrentAttitude)
AND
_NPCCurrentAttitude <= -75 //We Doin't want Lowering Attitude To Start Combat
AND
IntegerSubtract(-74,_NPCCurrentAttitude,_NewAttitudeToAdd)
THEN
CharacterAddAttitudeTowardsPlayer(_NPC,_Criminal,_NewAttitudeToAdd);

//END_REGION

//REGION Dialog interrupting

QRY
QRY_CrimeNPCUnAvailableForDialog((CHARACTERGUID)_NPC,(CHARACTERGUID)_Criminal,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4)
AND
IsSpeakerReserved(_NPC,1)
THEN
DB_NOOP(1);

QRY
QRY_CrimeNPCUnAvailableForDialog((CHARACTERGUID)_NPC,(CHARACTERGUID)_Criminal,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4)
AND
_Criminal != NULL_00000000-0000-0000-0000-000000000000
AND
IsSpeakerReserved(_Criminal,1)
THEN
DB_NOOP(1);

QRY
QRY_CrimeNPCUnAvailableForDialog((CHARACTERGUID)_NPC,(CHARACTERGUID)_Criminal,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4)
AND
_Criminal2 != NULL_00000000-0000-0000-0000-000000000000
AND
IsSpeakerReserved(_Criminal2,1)
THEN
DB_NOOP(1);

QRY
QRY_CrimeNPCUnAvailableForDialog((CHARACTERGUID)_NPC,(CHARACTERGUID)_Criminal,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4)
AND
_Criminal3 != NULL_00000000-0000-0000-0000-000000000000
AND
IsSpeakerReserved(_Criminal3,1)
THEN
DB_NOOP(1);

QRY
QRY_CrimeNPCUnAvailableForDialog((CHARACTERGUID)_NPC,(CHARACTERGUID)_Criminal,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4)
AND
_Criminal4 != NULL_00000000-0000-0000-0000-000000000000
AND
IsSpeakerReserved(_Criminal4,1)
THEN
DB_NOOP(1);

QRY
QRY_CrimeNPCUnAvailableForDialog((CHARACTERGUID)_NPC,(CHARACTERGUID)_Criminal,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4)
AND
CharacterIsDead(_NPC,1)
THEN
DB_NOOP(1);

QRY
QRY_CrimeNPCUnAvailableForDialog((CHARACTERGUID)_NPC,(CHARACTERGUID)_Criminal,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4)
AND
GetRegion(_NPC,_Region)
AND
NOT DB_CurrentLevel(_Region)
THEN
DB_NOOP(1);

QRY
QRY_CrimeNPCUnAvailableForDialog((CHARACTERGUID)_NPC,(CHARACTERGUID)_Criminal,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4)
AND
CombatGetIDForCharacter(_NPC,_ID)
AND
_ID!=0
THEN
DB_NOOP(1);

QRY
QRY_CrimeNPCUnAvailableForDialog((CHARACTERGUID)_NPC,(CHARACTERGUID)_Criminal,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4)
AND
CharacterIsEnemy(_NPC,_Criminal,1)
THEN
DB_NOOP(1);

QRY
QRY_CrimeNPCUnAvailableForDialog((CHARACTERGUID)_NPC,(CHARACTERGUID)_Criminal,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4)
AND
_Criminal2 != NULL_00000000-0000-0000-0000-000000000000
AND
CharacterIsEnemy(_NPC,_Criminal2,1)
THEN
DB_NOOP(1);

QRY
QRY_CrimeNPCUnAvailableForDialog((CHARACTERGUID)_NPC,(CHARACTERGUID)_Criminal,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4)
AND
_Criminal3 != NULL_00000000-0000-0000-0000-000000000000
AND
CharacterIsEnemy(_NPC,_Criminal3,1)
THEN
DB_NOOP(1);

QRY
QRY_CrimeNPCUnAvailableForDialog((CHARACTERGUID)_NPC,(CHARACTERGUID)_Criminal,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4)
AND
_Criminal4 != NULL_00000000-0000-0000-0000-000000000000
AND
CharacterIsEnemy(_NPC,_Criminal4,1)
THEN
DB_NOOP(1);

PROC
ProcTryStopDialogFor((CHARACTERGUID)_Char)
AND
_Char != NULL_00000000-0000-0000-0000-000000000000
AND
CharacterIsPlayer(_Char,1)
AND
DB_DialogPlayers(_Inst,_Char,_)
AND
DB_DialogName(_CurrentDialog,_Inst)
AND
NOT DB_Crime_DoNotStopDialog((STRING)_CurrentDialog)
THEN
DialogRequestStop(_Char);
DB_StoppedDialog(1);

PROC
ProcTryStopDialogFor((CHARACTERGUID)_Char)
AND
_Char != NULL_00000000-0000-0000-0000-000000000000
AND
CharacterIsPlayer(_Char,0)
AND
DB_DialogNPCs(_Inst,_Char,_)
AND
DB_DialogName(_CurrentDialog,_Inst)
AND
NOT DB_Crime_DoNotStopDialog(_CurrentDialog)
THEN
DialogRequestStop(_Char);
DB_StoppedDialog(1);

PROC
ProcCrimeInterruptStoryDialogs((INTEGER)_CrimeID,(STRING)_CrimeDialog,1,(CHARACTERGUID)_NPC,(CHARACTERGUID)_Criminal,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4)
THEN
ProcTryStopDialogFor(_NPC);
ProcTryStopDialogFor(_Criminal);
ProcTryStopDialogFor(_Criminal2);
ProcTryStopDialogFor(_Criminal3);
ProcTryStopDialogFor(_Criminal4);

PROC
ProcCrimeInterruptStoryDialogs(_,_,1,_,_,_,_,_)
AND
DB_StoppedDialog(1)
THEN
NOT DB_StoppedDialog(1);
FireOsirisEvents();

PROC
ProcCrimeInterruptStoryDialogs((INTEGER)_CrimeID,(STRING)_CrimeDialog,0,(CHARACTERGUID)_NPC,(CHARACTERGUID)_Criminal,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4)
AND
DB_DialogNPCs(_Inst,_NPC,_)
AND
DB_DialogName(_CurrentDialog,_Inst)
AND
NOT DB_Crime_DoNotStopDialog(_CurrentDialog)
THEN
DialogRequestStop(_NPC);
FireOsirisEvents();

PROC
ProcCrimeInterruptStoryDialogs((INTEGER)_CrimeID,(STRING)_CrimeDialog,0,(CHARACTERGUID)_NPC,(CHARACTERGUID)_Criminal,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4)
AND
NOT QRY_CrimeNPCUnAvailableForDialog(_NPC,NULL_00000000-0000-0000-0000-000000000000,NULL_00000000-0000-0000-0000-000000000000,NULL_00000000-0000-0000-0000-000000000000,NULL_00000000-0000-0000-0000-000000000000)
THEN
ProcStartCrimeDialog(_CrimeID,_CrimeDialog,0,_NPC,_Criminal,_Criminal2,_Criminal3,_Criminal4);

PROC
ProcCrimeInterruptStoryDialogs((INTEGER)_CrimeID,(STRING)_CrimeDialog,1,(CHARACTERGUID)_NPC,(CHARACTERGUID)_Criminal,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4)
AND
NOT QRY_CrimeNPCUnAvailableForDialog(_NPC,_Criminal,_Criminal2,_Criminal3,_Criminal4)
THEN
ProcStartCrimeDialog(_CrimeID,_CrimeDialog,1,_NPC,_Criminal,_Criminal2,_Criminal3,_Criminal4);

PROC
ProcHandleCrimeDialog((CHARACTERGUID)_Warner,(CHARACTERGUID)_Criminal1,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4,(STRING)_CrimeDialog,1,_)
AND
DB_CheckInterrupt(_CrimeID,_Warner)
THEN
DB_Interrupted(_CrimeID,_Warner,1);

PROC
ProcHandleCrimeDialog((CHARACTERGUID)_Warner,(CHARACTERGUID)_Criminal1,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4,(STRING)_CrimeDialog,1,_)
AND
DB_CheckInterrupt(_CrimeID,_Warner)
THEN
NOT DB_CheckInterrupt(_CrimeID,_Warner);

PROC
ProcStartCrimeDialog((INTEGER)_CrimeID,(STRING)_CrimeDialog,(INTEGER)_IsInteractive,(CHARACTERGUID)_NPC,(CHARACTERGUID)_Criminal,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4)
THEN
DB_NOOP(1);

PROC
ProcStartCrimeDialog((INTEGER)_CrimeID,(STRING)_CrimeDialog,1,(CHARACTERGUID)_NPC,(CHARACTERGUID)_Criminal,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4)
AND
DialogStartCrimeDialog(_CrimeID,_CrimeDialog,1,_NPC,_Criminal,_Criminal2,_Criminal3,_Criminal4,_Success)
THEN
DB_CheckInterrupt(_CrimeID,_NPC);
DB_CrimeWarner(_CrimeID,_NPC,_CrimeDialog);
ProcHandleCrimeDialog(_NPC,_Criminal,_Criminal2,_Criminal3,_Criminal4,_CrimeDialog,_Success,1);

PROC
ProcStartCrimeDialog((INTEGER)_CrimeID,(STRING)_CrimeDialog,0,(CHARACTERGUID)_NPC,(CHARACTERGUID)_Criminal,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4)
AND
DialogStartCrimeDialog(_CrimeID,_CrimeDialog,0,_NPC,NULL_00000000-0000-0000-0000-000000000000,NULL_00000000-0000-0000-0000-000000000000,NULL_00000000-0000-0000-0000-000000000000,NULL_00000000-0000-0000-0000-000000000000,_Success)
AND
CrimeGetType(_CrimeID,_CrimeType)
THEN
DB_Crime_WarningAD_Target(_CrimeType,_NPC,_Criminal); // in AD we don't have player, so to clear Warning flags, store target player in this DB
DB_CheckInterrupt(_CrimeID,_NPC);
CrimeConfrontationDone(_CrimeID,_NPC); // confrontation done for ADs
ProcHandleCrimeDialog(_NPC,_Criminal,_Criminal2,_Criminal3,_Criminal4,_CrimeDialog,_Success,0);
DB_Interrupted(_CrimeID,_NPC,1);

PROC
ProcCrimeInterruptStoryDialogs((INTEGER)_CrimeID,(STRING)_CrimeDialog,(INTEGER)_MarkForInteractive,(CHARACTERGUID)_NPC,(CHARACTERGUID)_Criminal,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4)
AND
NOT DB_Interrupted(_CrimeID,_NPC,1)
THEN
//NPC not available for dialog anymore
DB_Crime_FailedToInterruptStoryDialogs((INTEGER)_CrimeId,(STRING)_CrimeDialog,(CHARACTERGUID)_NPC,(CHARACTERGUID)_Criminal,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4);

PROC
ProcCrimeInterruptStoryDialogs((INTEGER)_CrimeID,(STRING)_CrimeDialog,(INTEGER)_MarkForInteractive,(CHARACTERGUID)_NPC,(CHARACTERGUID)_Criminal,(CHARACTERGUID)_Criminal2,(CHARACTERGUID)_Criminal3,(CHARACTERGUID)_Criminal4)
THEN
NOT DB_Interrupted(_CrimeID,_NPC,1);

// Only stop an NPCs dialog without starting a new one
PROC
ProcCrimeTryForceStopDialog((CHARACTERGUID)_Char)
THEN
ProcTryStopDialogFor(_Char);

PROC
ProcCrimeTryForceStopDialog((CHARACTERGUID)_Char)
AND
DB_StoppedDialog(1)
THEN
NOT DB_StoppedDialog(1);
// Ensure that if story wants to start a new dialog on DialogEnded, it
// can do so before the crime system starts its own dialog
FireOsirisEvents();

//END_REGION

//REGION -ForbiddenItem crime. Action Requests handling.

/***************************************/
//--- Crime reactions & Move crime
/***************************************/
IF
DialogStarted("GEB_Warning_UseForbiddenItem",_Inst)
AND
DB_DialogPlayers(_Inst,_Player,1)
AND
DB_CRIME_ForbiddenStatus(_Status)
AND
HasActiveStatus(_Player,_Status,1)
THEN
RemoveStatus(_Player,_Status);

IF
CharacterUsedSkillOnTarget(_Player,_Item,_,"teleportation",_)
AND
CharacterIsPlayer(_Player,1)
AND
ObjectIsItem(_Item,1)
AND
ItemCanSitOn((ITEMGUID)_Item,0)
AND
ItemGetOwner(_Item,_Owner)
AND
NOT QRY_CharacterIsNull(_Owner)
AND
CharacterIsPlayer(_Owner,0)
THEN
CharacterRegisterCrime(_Player,"MoveForbiddenItem",_Item,(CHARACTERGUID)_Owner,0);

PROC
ProcCrimeTryRegisteringMoveForbiddenItem((CHARACTERGUID)_Player,(ITEMGUID)_Item,(INTEGER)_RequestID)
AND
CharacterIsPlayer(_Player,1)
AND
ItemCanSitOn(_Item,0)
AND
ItemGetOwner(_Item,_Owner)
AND
NOT QRY_CharacterIsNull(_Owner)
AND
CharacterIsPlayer(_Owner,0)
AND
CharacterIsSummon(_Player,_IsSummon)
AND
DB_CRIME_MoveForbiddenCrime(_IsSummon, _CrimeName)
THEN
ProcSendMoveRequestResult(_Player,_Item,_RequestID);
CharacterRegisterCrime(_Player,_CrimeName,_Item,(CHARACTERGUID)_Owner,0);
DB_MoveCrimeRegistered(1);

PROC
ProcSendMoveRequestResult((CHARACTERGUID)_Player,(ITEMGUID)_Item,(INTEGER)_RequestID)
AND
GetPosition(_Item,_X,_Y,_Z)
AND
ItemGetOwner(_Item,_Owner)
AND
CrimeIsAnyNPCGoingToReact(_Player,"MoveForbiddenItem",_Owner,_X,_Y,_Z,_Result)
AND
DB_Negate(_Result,_Inverse)
THEN
RequestProcessed(_Player,_RequestID,_Inverse);

PROC
ProcCrimeTryRegisteringMoveForbiddenItem((CHARACTERGUID)_Player,(ITEMGUID)_Item,(INTEGER)_RequestID)
AND
NOT DB_MoveCrimeRegistered(1)
THEN
RequestProcessed(_Player,_RequestID,1);

PROC
ProcCrimeTryRegisteringMoveForbiddenItem((CHARACTERGUID)_Player,(ITEMGUID)_Item,(INTEGER)_RequestID)
THEN
NOT DB_MoveCrimeRegistered(1);

/***************************************/
//--- REQUESTS
/***************************************/
IF
CanUseItem(_Char,_Item,_RequestID)
THEN
ProcBlockUseOfItem(_Char,_Item);
ProcProcessUseOfItemWithStatus(_Char,_Item);
ProcProcessUseOfItem(_Char,_Item,_RequestID);

IF
CanMoveItem(_Char,_Item,_RequestID)
THEN
ProcBlockMoveOfItem(_Char,_Item);
ProcProcessMoveOfItem(_Char,_Item,_RequestID);

IF
CanPickupItem(_Char,_Item,_RequestID)
THEN
ProcBlockPickupOfItem(_Char,_Item);
ProcProcessPickupOfItem(_Char,_Item,_RequestID);

IF
CanLockpickItem(_Char,_Item,_RequestID)
THEN
ProcBlockLockpickItem(_Char,_Item);
ProcProcessLockpickItem(_Char,_Item,_RequestID);

IF
CanCombineItem(_Char,_ItemA,_ItemB,_ItemC,_ItemD,_ItemE,_RequestID)
THEN
ProcBlockCombineItem(_Char,_ItemA);
ProcBlockCombineItem(_Char,_ItemB);
ProcBlockCombineItem(_Char,_ItemC);
ProcBlockCombineItem(_Char,_ItemD);
ProcBlockCombineItem(_Char,_ItemE);
ProcProcessCombineItem(_Char,_ItemA,_ItemB,_ItemC,_ItemD,_ItemE,_RequestID);


/***************************************/
//--- BLOCK ACTIONS
/***************************************/
/*	Catch one of the following PROCs to set the appropriate DB:
	DB_CustomUseItemResponse((CHARACTERGUID)_Char,(ITEMGUID)_Item,(INTEGER)_Result)
	DB_CustomMoveItemResponse((CHARACTERGUID)_Char,(ITEMGUID)_Item,(INTEGER)_Result)
	DB_CustomPickupItemResponse((CHARACTERGUID)_Char,(ITEMGUID)_Item,(INTEGER)_Result)
	DB_CustomLockpickItemResponse((CHARACTERGUID)_Char,(ITEMGUID)_Item,(INTEGER)_Result)
	DB_CustomCombineItemResponse((CHARACTERGUID)_Char,(ITEMGUID)_Item,(INTEGER)_Result)
*/

PROC
ProcBlockUseOfItem((CHARACTERGUID)_Char,(ITEMGUID)_Item)
THEN
DB_NOOP(1);

PROC
ProcBlockMoveOfItem((CHARACTERGUID)_Char,(ITEMGUID)_Item)
THEN
DB_NOOP(1);

PROC
ProcBlockPickupOfItem((CHARACTERGUID)_Char,(ITEMGUID)_Item)
THEN
DB_NOOP(1);

PROC
ProcBlockLockpickItem((CHARACTERGUID)_Char,(ITEMGUID)_Item)
THEN
DB_NOOP(1);

PROC
ProcBlockCombineItem((CHARACTERGUID)_Char,(ITEMGUID)_Item)
THEN
DB_NOOP(1);


/***************************************/
//--- BURNING AND ELECTRIFIED items apply status
/***************************************/
PROC
ProcProcessUseOfItemWithStatus((CHARACTERGUID)_Char,(ITEMGUID)_Item)
AND
DB_IsPlayer(_Char) // apply only on player not to break story events with NPCs using items
AND
NOT DB_CustomUseItemResponse(_Char,_Item,0) // if handled in story, don't apply effect
AND
DB_ItemStatusAffectCharacterOnUse(_Status)
AND
HasActiveStatus(_Item,_Status,1)
AND
NOT QRYItemStatusIsNotAppliedToUser(_Item,_Status)
THEN
ApplyStatus(_Char,_Status,12.0);

QRY
QRYItemStatusIsNotAppliedToUser((ITEMGUID)_Item,(STRING)_Status)
AND
_Status == "BURNING"
AND
ItemIsTorch(_Item,1)
THEN
DB_NOOP(1);

/***************************************/
//--- PROCESS
/***************************************/
// Use
PROC
ProcProcessUseOfItem((CHARACTERGUID)_Char,(ITEMGUID)_Item,(INTEGER)_RequestID)
AND
DB_CustomUseItemResponse(_Char,_Item,(INTEGER)_Result)
THEN
RequestProcessed(_Char,_RequestID,_Result);

PROC
ProcProcessUseOfItem((CHARACTERGUID)_Char,(ITEMGUID)_Item,(INTEGER)_RequestID)
AND
NOT DB_CustomUseItemResponse(_Char,_Item,_)
AND
ItemCanSitOn(_Item,0)
AND
ItemIsLadder(_Item,0)
AND
ItemIsPublicDomain(_Item,0)
THEN
DB_HandledRequest(_Char,_Item,_RequestID);
ProcCrimeTryRegisteringUseForbiddenItem(_Char,_Item,_RequestID);

PROC
ProcProcessUseOfItem((CHARACTERGUID)_Char,(ITEMGUID)_Item,(INTEGER)_RequestID)
AND
NOT DB_CustomUseItemResponse(_Char,_Item,_)
AND
NOT DB_HandledRequest(_Char,_Item,_RequestID)
THEN
RequestProcessed(_Char,_RequestID,1);

PROC
ProcProcessUseOfItem((CHARACTERGUID)_Char,(ITEMGUID)_Item,(INTEGER)_RequestID)
AND
DB_HandledRequest(_Char,_Item,_RequestID)
THEN
NOT DB_HandledRequest(_Char,_Item,_RequestID);

// Move (registers MoveForbiddenItem instead of UseForbiddenItem)
PROC
ProcProcessMoveOfItem((CHARACTERGUID)_Char,(ITEMGUID)_Item,(INTEGER)_RequestID)
AND
DB_CustomMoveItemResponse(_Char,_Item,(INTEGER)_Result)
THEN
RequestProcessed(_Char,_RequestID,_Result);

PROC
ProcProcessMoveOfItem((CHARACTERGUID)_Char,(ITEMGUID)_Item,(INTEGER)_RequestID)
AND
NOT DB_CustomMoveItemResponse(_Char,_Item,_)
THEN
ProcCrimeTryRegisteringMoveForbiddenItem(_Char,_Item,_RequestID);

// Pickup
PROC
ProcProcessPickupOfItem((CHARACTERGUID)_Char,(ITEMGUID)_Item,(INTEGER)_RequestID)
AND
DB_CustomPickupItemResponse(_Char,_Item,(INTEGER)_Result)
THEN
RequestProcessed(_Char,_RequestID,_Result);

PROC
ProcProcessPickupOfItem((CHARACTERGUID)_Char,(ITEMGUID)_Item,(INTEGER)_RequestID)
AND
NOT DB_CustomPickupItemResponse(_Char,_Item,_)
THEN
ProcCrimeTryRegisteringStealItem(_Char,_Item,_RequestID);

// Lockpick
PROC
ProcProcessLockpickItem((CHARACTERGUID)_Char,(ITEMGUID)_Item,(INTEGER)_RequestID)
AND
DB_CustomLockpickItemResponse(_Char,_Item,(INTEGER)_Result)
THEN
RequestProcessed(_Char,_RequestID,_Result);

PROC
ProcProcessLockpickItem((CHARACTERGUID)_Char,(ITEMGUID)_Item,(INTEGER)_RequestID)
AND
NOT DB_CustomLockpickItemResponse(_Char,_Item,_)
THEN
ProcCrimeTryRegisteringUseForbiddenItem(_Char,_Item,_RequestID);

// Combine
PROC
ProcProcessCombineItem(_Player,_ItemA,_ItemB,_ItemC,_ItemD,_ItemE,_RequestID)
AND
NOT QryCombineItemHasCustomResult(_Player,_ItemA,_ItemB,_ItemC,_ItemD,_ItemE)
AND
CharacterIsPlayer(_Player,1)
THEN
ProcCrimeCheckRegisterUseForbiddenItem(_Player,_ItemA,_RequestID);
ProcCrimeCheckRegisterUseForbiddenItem(_Player,_ItemB,_RequestID);
ProcCrimeCheckRegisterUseForbiddenItem(_Player,_ItemC,_RequestID);
ProcCrimeCheckRegisterUseForbiddenItem(_Player,_ItemD,_RequestID);
ProcCrimeCheckRegisterUseForbiddenItem(_Player,_ItemE,_RequestID);

PROC
ProcProcessCombineItem((CHARACTERGUID)_Char,(ITEMGUID)_ItemA,(ITEMGUID)_ItemB,(ITEMGUID)_ItemC,(ITEMGUID)_ItemD,(ITEMGUID)_ItemE,(INTEGER)_RequestID)
AND
QryCombineItemHasCustomResult(_Char,_ItemA,_ItemB,_ItemC,_ItemD,_ItemE)
THEN
ProcProcessCustomCombineResponse(_Char,_ItemA,_ItemB,_ItemC,_ItemD,_ItemE,_RequestID);

PROC
ProcProcessCustomCombineResponse((CHARACTERGUID)_Char,(ITEMGUID)_ItemA,(ITEMGUID)_ItemB,(ITEMGUID)_ItemC,(ITEMGUID)_ItemD,(ITEMGUID)_ItemE,(INTEGER)_RequestID)
AND
QryCombineItemIsBlocked(_Char,_ItemA,_ItemB,_ItemC,_ItemD,_ItemE)
THEN
RequestProcessed(_Char,_RequestID,0);

PROC
ProcProcessCustomCombineResponse((CHARACTERGUID)_Char,(ITEMGUID)_ItemA,(ITEMGUID)_ItemB,(ITEMGUID)_ItemC,(ITEMGUID)_ItemD,(ITEMGUID)_ItemE,(INTEGER)_RequestID)
AND
NOT QryCombineItemIsBlocked(_Char,_ItemA,_ItemB,_ItemC,_ItemD,_ItemE)
THEN
RequestProcessed(_Char,_RequestID,1);


//--- General proc:
PROC
ProcCrimeTryRegisteringUseForbiddenItem((CHARACTERGUID)_Char,(ITEMGUID)_Item,(INTEGER)_RequestID)
AND
CharacterIsPlayer(_Char,1)
THEN
ProcCrimeCheckRegisterUseForbiddenItem(_Char,_Item,_RequestID);

PROC
ProcCrimeTryRegisteringUseForbiddenItem((CHARACTERGUID)_Char,(ITEMGUID)_Item,(INTEGER)_RequestID)
AND
CharacterIsPlayer(_Char,0)
THEN
RequestProcessed(_Char,_RequestID,1);

PROC
ProcCrimeTryRegisteringStealItem((CHARACTERGUID)_Char,(ITEMGUID)_Item,(INTEGER)_RequestID)
AND
CharacterIsPlayer(_Char,0)
THEN
DB_StealRequestHandled(1);
RequestProcessed(_Char,_RequestID,1);

PROC
ProcCrimeTryRegisteringStealItem((CHARACTERGUID)_Char,(ITEMGUID)_Item,(INTEGER)_RequestID)
AND
NOT DB_StealRequestHandled(1)
AND
NOT QryCrimeItemHasNPCOwner(_Item)
THEN
DB_StealRequestHandled(1);
RequestProcessed(_Char,_RequestID,1);

//we only register a crime here if they're going ot react, sicne we then block the pickup
//in the case they won't the reaction to the steal event will register the crime
PROC
ProcCrimeTryRegisteringStealItem((CHARACTERGUID)_Char,(ITEMGUID)_Item,(INTEGER)_RequestID)
AND
NOT DB_StealRequestHandled(1)
AND
ItemGetOwner(_Item,_Victim)
AND
CharacterIsPlayer(_Victim,0)
AND
GetPosition(_Item,_X,_Y,_Z)
AND
CrimeIsAnyNPCGoingToReact(_Char,"Steal",_Victim,_X,_Y,_Z,1)
THEN
DB_StealRequestHandled(1);
RequestProcessed(_Char,_RequestID,0);
CharacterRegisterCrimeWithPosition(_Char,"Steal",_Item,_Victim,_X,_Y,_Z,0);

PROC
ProcCrimeTryRegisteringStealItem((CHARACTERGUID)_Char,(ITEMGUID)_Item,(INTEGER)_RequestID)
AND
NOT DB_StealRequestHandled(1)
THEN
RequestProcessed(_Char,_RequestID,1);

PROC
ProcCrimeTryRegisteringStealItem(_,_,_)
THEN
NOT DB_StealRequestHandled(1);

/***************************************/
//--- CLEAR custom response facts
/***************************************/
PROC
ProcProcessUseOfItem((CHARACTERGUID)_Char,(ITEMGUID)_Item,(INTEGER)_RequestID)
AND
DB_CustomUseItemResponse(_Char,_Item,_Result)
THEN
NOT DB_CustomUseItemResponse(_Char,_Item,_Result);

PROC
ProcProcessMoveOfItem((CHARACTERGUID)_Char,(ITEMGUID)_Item,(INTEGER)_RequestID)
AND
DB_CustomMoveItemResponse(_Char,_Item,_Result)
THEN
NOT DB_CustomMoveItemResponse(_Char,_Item,_Result);

PROC
ProcProcessPickupOfItem((CHARACTERGUID)_Char,(ITEMGUID)_Item,(INTEGER)_RequestID)
AND
DB_CustomPickupItemResponse(_Char,_Item,_Result)
THEN
NOT DB_CustomPickupItemResponse(_Char,_Item,_Result);

PROC
ProcProcessLockpickItem((CHARACTERGUID)_Char,(ITEMGUID)_Item,(INTEGER)_RequestID)
AND
DB_CustomLockpickItemResponse(_Char,_Item,_Result)
THEN
NOT DB_CustomLockpickItemResponse(_Char,_Item,_Result);

PROC
ProcProcessCombineItem((CHARACTERGUID)_Char,(ITEMGUID)_Item,(INTEGER)_RequestID)
AND
DB_CustomCombineItemResponse(_Char,_Item,_Result)
THEN
NOT DB_CustomCombineItemResponse(_Char,_Item,_Result);


/***************************************/
//--- REGISTERING CRIMES and responding to the requests
/***************************************/
PROC
ProcCrimeCheckRegisterUseForbiddenItem((CHARACTERGUID)_Player,(ITEMGUID)_Item,(INTEGER)_RequestID)
AND
NOT QryCrimeItemHasNPCOwner(_Item)
AND
NOT DB_DontCreateUseForbiddenItem(_Item)
THEN
RequestProcessed(_Player,_RequestID,1);

PROC
ProcCrimeCheckRegisterUseForbiddenItem((CHARACTERGUID)_Player,(ITEMGUID)_Item,(INTEGER)_RequestID)
AND
DB_DontCreateUseForbiddenItem(_Item)
THEN
RequestProcessed(_Player,_RequestID,1);

PROC
ProcCrimeCheckRegisterUseForbiddenItem((CHARACTERGUID)_Player,(ITEMGUID)_Item,(INTEGER)_RequestID)
AND
NOT DB_DontCreateUseForbiddenItem(_Item)
AND
QryCrimeItemHasNPCOwner(_Item)
AND
HasActiveStatus(_Player,"SNEAKING",1)
THEN
DB_Crime_UseForbiddenItem(_Player,"SneakUseForbiddenItem",_Item);
RequestProcessed(_Player,_RequestID,1);
CharacterRegisterCrime(_Player,"SneakUseForbiddenItem",_Item,NULL_00000000-0000-0000-0000-000000000000,0);

PROC
ProcCrimeCheckRegisterUseForbiddenItem((CHARACTERGUID)_Player,(ITEMGUID)_Item,(INTEGER)_RequestID)
AND
NOT DB_DontCreateUseForbiddenItem(_Item)
AND
QryCrimeItemHasNPCOwner(_Item)
AND
HasActiveStatus(_Player,"SNEAKING",0)
AND
GetPosition(_Item,_X,_Y,_Z)
AND
ItemGetOwner(_Item,_Owner)
AND
CrimeIsAnyNPCGoingToReact(_Player,"UseForbiddenItem",_Owner,_X,_Y,_Z,_NPCWillReact)
THEN
ProcCrimeRegisterUseForbiddenItem(_Player,_Item,_RequestID,_NPCWillReact);

PROC
ProcCrimeRegisterUseForbiddenItem((CHARACTERGUID)_Player,(ITEMGUID)_Item,(INTEGER)_RequestID,(INTEGER)_NPCWillReact)
AND
DB_Negate(_NPCWillReact,_Result)
THEN
DB_Crime_UseForbiddenItem(_Player,"UseForbiddenItem",_Item);
RequestProcessed(_Player,_RequestID,_Result);
CharacterRegisterCrime(_Player,"UseForbiddenItem",_Item,NULL_00000000-0000-0000-0000-000000000000,0);

/***************************************/
//--- CHECK CRIME REACTIONS
/***************************************/
/*
IF
CharacterOnCrimeSensibleActionNotification(_,_,_CrimeID,_,_,_,_Criminal1,_Criminal2,_Criminal3,_Criminal4)
AND
CrimeGetType(_CrimeID,"UseForbiddenItem")
THEN
ProcCrimeForbiddenItemGetEvidence(_CrimeID,_Criminal1,"UseForbiddenItem");

IF
CharacterOnCrimeSensibleActionNotification(_,_,_CrimeID,_,_,_,_Criminal1,_Criminal2,_Criminal3,_Criminal4)
AND
CrimeGetType(_CrimeID,"SneakUseForbiddenItem")
THEN
ProcCrimeForbiddenItemGetEvidence(_CrimeID,_Criminal1,"SneakUseForbiddenItem");
*/

IF
OnCrimeConfrontationDone(_CrimeID,_Investigator,1,_Criminal1,_Criminal2,_Criminal3,_Criminal4)
AND
CrimeGetType(_CrimeID,"UseForbiddenItem")
THEN
ProcCrimeForbiddenItemGetEvidence(_CrimeID,_Criminal1,"UseForbiddenItem");

IF
OnCrimeConfrontationDone(_CrimeID,_Investigator,1,_Criminal1,_Criminal2,_Criminal3,_Criminal4)
AND
CrimeGetType(_CrimeID,"SneakUseForbiddenItem")
THEN
ProcCrimeForbiddenItemGetEvidence(_CrimeID,_Criminal1,"SneakUseForbiddenItem");

PROC
ProcCrimeForbiddenItemGetEvidence((INTEGER)_CrimeID,(CHARACTERGUID)_Criminal,(STRING)_CrimeType)
AND
NOT QRY_CharacterIsNull(_Criminal)
AND
CrimeGetNumberOfEvidence(_CrimeID,_NumEvidence)
AND
_NumEvidence > 0
AND
CrimeGetEvidence(_CrimeID,1,(ITEMGUID)_Item)
THEN
ProcCrimeStopForbiddenItem(_Criminal,_CrimeType,_Item);

PROC
ProcCrimeForbiddenItemGetEvidence((INTEGER)_CrimeID,(CHARACTERGUID)_Criminal,(STRING)_CrimeType)
AND
NOT QRY_CharacterIsNull(_Criminal)
AND
CrimeGetNumberOfEvidence(_CrimeID,_NumEvidence)
AND
_NumEvidence < 1
THEN
ProcCrimeStopForbiddenItem(_Criminal,_CrimeType,NULL_00000000-0000-0000-0000-000000000000);

PROC
ProcCrimeStopForbiddenItem((CHARACTERGUID)_Criminal,(STRING)_CrimeType,(ITEMGUID)_Evidence)
THEN
CharacterStopCrime(_Criminal,_CrimeType,_Evidence);

PROC
ProcCrimeStopForbiddenItem((CHARACTERGUID)_Criminal,(STRING)_CrimeType,(ITEMGUID)_Evidence)
AND
DB_Crime_UseForbiddenItem(_Player,_CrimeType,_Evidence)
THEN
NOT DB_Crime_UseForbiddenItem(_Player,_CrimeType,_Evidence);


/***************************************/
//--- STOPPING CRIMES
/***************************************/
IF
CharacterStoppedUsingItem(_Player,_Item)
AND
DB_Crime_UseForbiddenItem(_Player,_CrimeType,_Item)
THEN
NOT DB_Crime_UseForbiddenItem(_Player,_CrimeType,_Item);
CharacterStopCrime(_Player,_CrimeType,_Item);

/*
IF
CharacterMovedItem(_Player,_Item)
CharacterStoppedMovingItem(_Player,_Item)
AND
DB_Crime_UseForbiddenItem(_Player,_CrimeType,_Item)
THEN
NOT DB_Crime_UseForbiddenItem(_Player,_CrimeType,_Item);
CharacterStopCrime(_Player,_CrimeType,_Item);

IF
CharacterStoppedPickingUpItem(_Player,_Item)
AND
DB_Crime_UseForbiddenItem(_Player,_CrimeType,_Item)
THEN
NOT DB_Crime_UseForbiddenItem(_Player,_CrimeType,_Item);
CharacterStopCrime(_Player,_CrimeType,_Item);
*/

IF
CharacterStoppedLockpickingItem(_Player,_Item)
AND
DB_Crime_UseForbiddenItem(_Player,_CrimeType,_Item)
THEN
NOT DB_Crime_UseForbiddenItem(_Player,_CrimeType,_Item);
CharacterStopCrime(_Player,_CrimeType,_Item);

IF
CharacterStoppedCombiningItems(_Player,_ItemA,_ItemB,_ItemC,_ItemD,_ItemE)
THEN
ProcCrimeStopCombineItemCrime(_Player,_ItemA);
ProcCrimeStopCombineItemCrime(_Player,_ItemB);
ProcCrimeStopCombineItemCrime(_Player,_ItemC);
ProcCrimeStopCombineItemCrime(_Player,_ItemD);
ProcCrimeStopCombineItemCrime(_Player,_ItemE);

PROC
ProcCrimeStopCombineItemCrime((CHARACTERGUID)_Player,(ITEMGUID)_Item)
AND
DB_Crime_UseForbiddenItem(_Player,_CrimeType,_Item)
THEN
CharacterStopCrime(_Player,_CrimeType,_Item);

QRY
QryCrimeClearCombineItemBD((CHARACTERGUID)_Player,(STRING)_CrimeType)
AND
DB_Crime_UseForbiddenItem(_Player,_CrimeType,_Item)
THEN
NOT DB_Crime_UseForbiddenItem(_Player,_CrimeType,_Item);


/***************************************/
//--- QUERIES
/***************************************/

QRY
QryCrimeIsValidItemRequest((CHARACTERGUID)_Char,(ITEMGUID)_Item)
AND
CharacterIsPlayer(_Char,0)
THEN
DB_NOOP(1);

QRY
QryCrimeIsValidItemRequest((CHARACTERGUID)_Char,(ITEMGUID)_Item)
AND
CharacterIsPlayer(_Char,1)
AND
NOT QryCrimeItemHasNPCOwner((ITEMGUID)_Item)
THEN
DB_NOOP(1);

QRY
QryCrimeCombinedItemsAreValid((ITEMGUID)_ItemA,(ITEMGUID)_ItemB,(ITEMGUID)_ItemC,(ITEMGUID)_ItemD,(ITEMGUID)_ItemE)
AND
NOT QryCrimeItemHasNPCOwner(_ItemA)
AND
NOT QryCrimeItemHasNPCOwner(_ItemB)
AND
NOT QryCrimeItemHasNPCOwner(_ItemC)
AND
NOT QryCrimeItemHasNPCOwner(_ItemD)
AND
NOT QryCrimeItemHasNPCOwner(_ItemE)
THEN
DB_NOOP(1);

QRY
QryCrimeItemHasNPCOwner((ITEMGUID)_Item)
AND
ItemGetOwner(_Item,_Char)
AND
NOT QRY_CharacterIsNull(_Char)
AND
CharacterIsPlayer(_Char,0)
THEN
DB_NOOP(1);

/**** Combine item custom result ****/
QRY
QryCombineItemHasCustomResult((CHARACTERGUID)_Player,(ITEMGUID)_ItemA,(ITEMGUID)_ItemB,(ITEMGUID)_ItemC,(ITEMGUID)_ItemD,(ITEMGUID)_ItemE)
AND
DB_CustomCombineItemResponse(_Player,_ItemA,_)
THEN
DB_NOOP(1);

QRY
QryCombineItemHasCustomResult((CHARACTERGUID)_Player,(ITEMGUID)_ItemA,(ITEMGUID)_ItemB,(ITEMGUID)_ItemC,(ITEMGUID)_ItemD,(ITEMGUID)_ItemE)
AND
DB_CustomCombineItemResponse(_Player,_ItemB,_)
THEN
DB_NOOP(1);

QRY
QryCombineItemHasCustomResult((CHARACTERGUID)_Player,(ITEMGUID)_ItemA,(ITEMGUID)_ItemB,(ITEMGUID)_ItemC,(ITEMGUID)_ItemD,(ITEMGUID)_ItemE)
AND
DB_CustomCombineItemResponse(_Player,_ItemC,_)
THEN
DB_NOOP(1);

QRY
QryCombineItemHasCustomResult((CHARACTERGUID)_Player,(ITEMGUID)_ItemA,(ITEMGUID)_ItemB,(ITEMGUID)_ItemC,(ITEMGUID)_ItemD,(ITEMGUID)_ItemE)
AND
DB_CustomCombineItemResponse(_Player,_ItemD,_)
THEN
DB_NOOP(1);

QRY
QryCombineItemHasCustomResult((CHARACTERGUID)_Player,(ITEMGUID)_ItemA,(ITEMGUID)_ItemB,(ITEMGUID)_ItemC,(ITEMGUID)_ItemD,(ITEMGUID)_ItemE)
AND
DB_CustomCombineItemResponse(_Player,_ItemE,_)
THEN
DB_NOOP(1);


/**** Combine item is blocked ****/
QRY
QryCombineItemIsBlocked((CHARACTERGUID)_Player,(ITEMGUID)_ItemA,(ITEMGUID)_ItemB,(ITEMGUID)_ItemC,(ITEMGUID)_ItemD,(ITEMGUID)_ItemE)
AND
DB_CustomCombineItemResponse(_Player,_ItemA,1)
THEN
DB_NOOP(1);

QRY
QryCombineItemIsBlocked((CHARACTERGUID)_Player,(ITEMGUID)_ItemA,(ITEMGUID)_ItemB,(ITEMGUID)_ItemC,(ITEMGUID)_ItemD,(ITEMGUID)_ItemE)
AND
DB_CustomCombineItemResponse(_Player,_ItemB,1)
THEN
DB_NOOP(1);

QRY
QryCombineItemIsBlocked((CHARACTERGUID)_Player,(ITEMGUID)_ItemA,(ITEMGUID)_ItemB,(ITEMGUID)_ItemC,(ITEMGUID)_ItemD,(ITEMGUID)_ItemE)
AND
DB_CustomCombineItemResponse(_Player,_ItemC,1)
THEN
DB_NOOP(1);

QRY
QryCombineItemIsBlocked((CHARACTERGUID)_Player,(ITEMGUID)_ItemA,(ITEMGUID)_ItemB,(ITEMGUID)_ItemC,(ITEMGUID)_ItemD,(ITEMGUID)_ItemE)
AND
DB_CustomCombineItemResponse(_Player,_ItemD,1)
THEN
DB_NOOP(1);

QRY
QryCombineItemIsBlocked((CHARACTERGUID)_Player,(ITEMGUID)_ItemA,(ITEMGUID)_ItemB,(ITEMGUID)_ItemC,(ITEMGUID)_ItemD,(ITEMGUID)_ItemE)
AND
DB_CustomCombineItemResponse(_Player,_ItemE,1)
THEN
DB_NOOP(1);

//END_REGION

//----------------------------------- CUSTOM -----------------------------------
//REGION Override Sensible Action

// ------ Setting
PROC
ProcCrimeSetAllCustomSensibleAction((CHARACTERGUID)_Character,(STRING)_CrimeName,(STRING)_CustomReactionName)
THEN
ProcCrimeSetCustomPrimarySensibleAction(_Character,_CrimeName,_CustomReactionName);
ProcCrimeSetCustomSecondarySensibleAction(_Character,_CrimeName,_CustomReactionName);


// Primary
PROC
ProcCrimeSetCustomPrimarySensibleAction((CHARACTERGUID)_Character,(STRING)_CrimeName,(STRING)_CustomReactionName)
AND
DB_CrimeReaction_CustomSensibleAction(_Character,_CrimeName,1)
AND
StringConcatenate("Setting a custom primary sensible action [",_CustomReactionName,_Part1)
AND
StringConcatenate(_Part1,"] on a character that already have one for crime: ",_Part2)
AND
StringConcatenate(_Part2,_CrimeName,_Message)
THEN
DebugBreak(_Message);

PROC
ProcCrimeSetCustomPrimarySensibleAction((CHARACTERGUID)_Character,(STRING)_CrimeName,(STRING)_)
THEN
DB_CrimeReaction_CustomSensibleAction(_Character,_CrimeName,1);

PROC
ProcCrimeSetCustomPrimarySensibleAction((CHARACTERGUID)_Character,(STRING)_CrimeName,(STRING)_CustomReactionName)
AND
_CustomReactionName == ""
THEN
ProcCrimeSetCustomSensibleActionVariable(_Character,_CrimeName,"CRIME_UndefinedSensibleAction","Primary_");

PROC
ProcCrimeSetCustomPrimarySensibleAction((CHARACTERGUID)_Character,(STRING)_CrimeName,(STRING)_CustomReactionName)
AND
_CustomReactionName != ""
THEN
ProcCrimeSetCustomSensibleActionVariable(_Character,_CrimeName,_CustomReactionName,"Primary_");


// Secondary
PROC
ProcCrimeSetCustomSecondarySensibleAction((CHARACTERGUID)_Character,(STRING)_CrimeName,(STRING)_CustomReactionName)
AND
DB_CrimeReaction_CustomSensibleAction(_Character,_CrimeName,0)
AND
StringConcatenate("Setting a custom secondary sensible action [",_CustomReactionName,_Part1)
AND
StringConcatenate(_Part1,"] on a character that already have one for crime: ",_Part2)
AND
StringConcatenate(_Part2,_CrimeName,_Message)
THEN
DebugBreak(_Message);

PROC
ProcCrimeSetCustomSecondarySensibleAction((CHARACTERGUID)_Character,(STRING)_CrimeName,(STRING)_)
THEN
DB_CrimeReaction_CustomSensibleAction(_Character,_CrimeName,0);

PROC
ProcCrimeSetCustomSecondarySensibleAction((CHARACTERGUID)_Character,(STRING)_CrimeName,(STRING)_CustomReactionName)
AND
_CustomReactionName == ""
THEN
ProcCrimeSetCustomSensibleActionVariable(_Character,_CrimeName,"CRIME_UndefinedSensibleAction","Secondary_");

PROC
ProcCrimeSetCustomSecondarySensibleAction((CHARACTERGUID)_Character,(STRING)_CrimeName,(STRING)_CustomReactionName)
AND
_CustomReactionName != ""
THEN
ProcCrimeSetCustomSensibleActionVariable(_Character,_CrimeName,_CustomReactionName,"Secondary_");

PROC
ProcCrimeSetCustomSensibleActionVariable((CHARACTERGUID)_Character,(STRING)_CrimeName,(STRING)_CustomReactionName,(STRING)_Type)
AND
StringConcatenate("Custom",_Type,_Prefix)
AND
StringConcatenate(_Prefix,_CrimeName,_VarName)
THEN
SetVarFixedString(_Character,_VarName,_CustomReactionName);


// --- Clearing
PROC
ProcCrimeClearCustomPrimarySensibleAction((CHARACTERGUID)_Character,(STRING)_CrimeName)
AND
StringConcatenate("CustomPrimary_",_CrimeName,_VarName)
THEN
SetVarFixedString(_Character,_VarName,"");

PROC
ProcCrimeClearCustomPrimarySensibleAction((CHARACTERGUID)_Character,(STRING)_CrimeName)
AND
DB_CrimeReaction_CustomSensibleAction(_Character,_CrimeName,1)
THEN
NOT DB_CrimeReaction_CustomSensibleAction(_Character,_CrimeName,1);

PROC
ProcCrimeClearCustomSecondarySensibleAction((CHARACTERGUID)_Character,(STRING)_CrimeName)
AND
StringConcatenate("CustomSecondary_",_CrimeName,_VarName)
THEN
SetVarFixedString(_Character,_VarName,"");

PROC
ProcCrimeClearCustomSecondarySensibleAction((CHARACTERGUID)_Character,(STRING)_CrimeName)
AND
DB_CrimeReaction_CustomSensibleAction(_Character,_CrimeName,0)
THEN
NOT DB_CrimeReaction_CustomSensibleAction(_Character,_CrimeName,0);

PROC
ProcCrimeClearAllCustomSensibleAction((CHARACTERGUID)_Character,(STRING)_CrimeName)
AND
StringConcatenate("CustomPrimary_",_CrimeName,_PrimaryVarName)
AND
StringConcatenate("CustomSecondary_",_CrimeName,_SecondaryVarName)
THEN
SetVarFixedString(_Character,_PrimaryVarName,"");
SetVarFixedString(_Character,_SecondaryVarName,"");

PROC
ProcCrimeClearAllCustomSensibleAction((CHARACTERGUID)_Character,(STRING)_CrimeName)
AND
DB_CrimeReaction_CustomSensibleAction(_Character,_CrimeName,_Type)
THEN
NOT DB_CrimeReaction_CustomSensibleAction(_Character,_CrimeName,_Type);


// --- Throwing a proc to allow reacting in story
IF
CharacterOnCrimeSensibleActionNotification(_NPC,_Region,_CrimeID,_PriorityName,_Dialog,_Criminal,_Criminal2,_Criminal3,_Criminal4,_IsPrimary)
AND
CrimeGetType(_CrimeID,_CrimeName)
AND
DB_CrimeReaction_CustomSensibleAction(_NPC,_CrimeName,_IsPrimary)
THEN
ProcCrimeOnCustomSensibleAction(_NPC,_Region,_CrimeID,_PriorityName,_Dialog,_Criminal,_Criminal2,_Criminal3,_Criminal4,_IsPrimary);

PROC
ProcCrimeOnCustomSensibleAction((CHARACTERGUID)_NPC, (STRING)_RegionID, (INTEGER)_CrimeID, (STRING)_PriorityName, (STRING)_PrimaryDialog, (CHARACTERGUID)_Criminal1, (CHARACTERGUID)_Criminal2, (CHARACTERGUID)_Criminal3, (CHARACTERGUID)_Criminal4, (INTEGER)_IsPrimary)
THEN
DB_NOOP(1);

/**
 * IMPORTANT! Call this event on the NPC who's reacting to the crime:

SetStoryEvent(_NPC,"Crime_CustomSensibleActionDone");

 */
//END_REGION

//REGION Override investigation

/* Put your character in this fact to disable the interractive interrogation dialog:
	DB_CrimeReaction_DoNotInterrogate(_Interrogator)
*/

IF
DB_CrimeReaction_DoNotInterrogate((CHARACTERGUID)_Char)
THEN
DB_Crime_CheckInterrogate(_Char);
CrimeEnableInterrogation(_Char,0);

IF
DB_Crime_CheckInterrogate(_Char)
AND
NOT DB_CrimeReaction_DoNotInterrogate(_Char)
THEN
NOT DB_Crime_CheckInterrogate(_Char);
CrimeEnableInterrogation(_Char,1);

PROC
ProcCrimeSetCustomInvestigationAD((CHARACTERGUID)_Character,(STRING)_Dialog)
THEN
SetVarString(_Character,"CRIME_InvestigateAD",_Dialog);


//END_REGION

//REGION Linked crimes
PROC
ProcCharacterDisableCrime((CHARACTERGUID)_Char,_Crime)
AND
DB_LinkedCrimes(_Crime,_LinkedCrime)
THEN
DB_CharacterCrimeDisabled(_Char,_LinkedCrime);
CharacterDisableCrime(_Char,_LinkedCrime);

PROC
ProcCharacterEnableCrime((CHARACTERGUID)_Char,_Crime)
AND
DB_LinkedCrimes(_Crime,_LinkedCrime)
THEN
DB_CharacterCrimeEnabled(_Char,_LinkedCrime);
CharacterEnableCrime(_Char,_LinkedCrime);

IF
DB_CrimeAttitudeChange("Assault",_Amount)
THEN
DB_CrimeAttitudeChange("IncapacitatedAssault",_Amount);

//END_REGION


//REGION Zero-tension crimes without fleeing
// Zero-tension crimes that don't cause people to flee explicitly should not cause people to
// return to their starting position at the end (DOSTWO-24283)
IF
CharacterOnCrimeSensibleActionNotification(_Char,_,_ID,_Reaction,_,_,_,_,_,_)
AND
DB_CRIME_FleeReaction(_Reaction)
AND
CrimeGetTension(_ID,0)
THEN
DB_CRIME_ZeroTensionFlee(_ID,_Char);

IF
OnCrimeConfrontationDone(_ID,_Investigator,_,_,_,_,_)
AND
CrimeGetTension(_ID,0)
AND
NOT DB_CRIME_ZeroTensionFlee(_ID,_Investigator)
THEN
SetStoryEvent(_Investigator,"ClearCrimeReturnPos");

IF
OnCrimeConfrontationDone(_ID,_Investigator,_,_,_,_,_)
THEN
NOT DB_CRIME_ZeroTensionFlee(_ID,_Investigator);
//END_REGION
EXITSECTION
	
ENDEXITSECTION
ParentTargetEdge "__Start"

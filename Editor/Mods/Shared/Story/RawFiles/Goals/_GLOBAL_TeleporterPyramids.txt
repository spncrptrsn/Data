Version 1
SubGoalCombiner SGC_AND
INITSECTION
// PUBLIC PROCs:
//   Proc_PyramidBlockerTriggerAdd	    - add trigger that blocks pyramid usage
//   Proc_PyramidBlockerTriggerRemove   - remove trigger from blocking list
//   Proc_PyramidGlobalBlockerOn        - global pyramids blocker turn on
//   Proc_PyramidGlobalBlockerOff       - global pyramids blocker turn off
//   Proc_PyramidCustomBlockAdd         - add custom blocker of a pyramid (used for Tenebrium chests)
//   Proc_PyramidCustomBlockRemove      - remove custom blocker of a pyramid (used for Tenebrium chests)


// Inner DBs:
//   DB_TeleporterPyramidUnlocked((ITENGUID)_Pyramid) - the ones found by players
//   DB_PyramidBlockerTrigger((TRIGGERGUID)_Trigger) 	- trigger blockers of pyramid usage
//   DB_PyramidUsageBlocked(1) 						- global pyramid blocker
//   DB_PyramidInBlockerTrigger((ITEMGUID)_Pyramid,(TRIGGERGUID)_Trigger)  - used to store which pyramids are in blocking triggers
//   DB_PyramidCustomBlock((ITEMGUID)_Pyramid,(STRING)_Reason)             - used to store which pyramids are customly blocked
KBSECTION
//REGION Debug
//END_REGION

IF
DB_TeleporterPyramid(_Pyramid)
THEN
ItemSetForceSynch(_Pyramid,1);

//REGION Unlock pyramids that were found by player
IF
ItemAddedToCharacter(_Pyramid,_Player)
AND
DB_TeleporterPyramid(_Pyramid)
AND
NOT DB_TeleporterPyramidUnlocked(_Pyramid)
AND
_Player.DB_IsPlayer()
THEN
DB_TeleporterPyramidUnlocked(_Pyramid);

IF
CharacterUsedItem(_Player,_Pyramid)
AND
DB_TeleporterPyramid(_Pyramid)
AND
NOT DB_TeleporterPyramidUnlocked(_Pyramid)
AND
_Player.DB_IsPlayer()
THEN
PROC_CheckPlayTut(_Player,"TUT_PyramidsPickup");
//END_REGION


//REGION Pyramid blockers
PROC
Proc_PyramidGlobalBlockerOn()
THEN
DB_PyramidUsageBlocked(1);

PROC
Proc_PyramidGlobalBlockerOn()
AND
DB_TeleporterPyramid(_Pyramid)
THEN
DisablePyramid(_Pyramid);

PROC
Proc_PyramidGlobalBlockerOff()
THEN
NOT DB_PyramidUsageBlocked(1);

PROC
Proc_PyramidGlobalBlockerOff()
AND
DB_TeleporterPyramid(_Pyramid)
THEN
Proc_PyramidCheckEnabled(_Pyramid);


PROC
Proc_PyramidBlockerTriggerAdd((TRIGGERGUID)_Trigger)
THEN
DB_PyramidBlockerTrigger(_Trigger);
TriggerRegisterForItems(_Trigger);
ProcTriggerRegisterForPlayers(_Trigger);

PROC
Proc_PyramidBlockerTriggerRemove((TRIGGERGUID)_Trigger)
THEN
NOT DB_PyramidBlockerTrigger(_Trigger);
TriggerUnregisterForItems(_Trigger);
ProcTriggerUnregisterForPlayers(_Trigger);

PROC
Proc_PyramidCustomBlockAdd((ITEMGUID)_Pyramid,(STRING)_Reason)
THEN
DisablePyramid(_Pyramid);
DB_PyramidCustomBlock(_Pyramid,_Reason);

PROC
Proc_PyramidCustomBlockRemove((ITEMGUID)_Pyramid,(STRING)_Reason)
THEN
NOT DB_PyramidCustomBlock(_Pyramid,_Reason);
Proc_PyramidCheckEnabled(_Pyramid);


// Pyramid entered/left blocking trigger inside of character's inventory
IF
CharacterEnteredTrigger(_Char,_Trigger)
AND
DB_PyramidBlockerTrigger(_Trigger)
AND
DB_TeleporterPyramid(_Pyramid)
AND
ItemIsInCharacterInventory(_Pyramid,_Char,1)
THEN
Proc_PyramidEnterBlockerTrigger(_Pyramid,_Trigger);

IF
CharacterLeftTrigger(_Char,_Trigger)
AND
DB_PyramidBlockerTrigger(_Trigger)
AND
DB_TeleporterPyramid(_Pyramid)
AND
ItemIsInCharacterInventory(_Pyramid,_Char,1)
AND
DB_PyramidInBlockerTrigger(_Pyramid,_Trigger)
THEN
Proc_PyramidLeaveBlockerTrigger(_Pyramid,_Trigger);


// Pyramid entered/left blocking trigger
IF
ItemEnteredTrigger(_Pyramid,_Trigger,_)
AND
DB_TeleporterPyramid(_Pyramid)
AND
DB_PyramidBlockerTrigger(_Trigger)
THEN
Proc_PyramidEnterBlockerTrigger(_Pyramid,_Trigger);

IF
ItemLeftTrigger(_Pyramid,_Trigger,_)
AND
DB_PyramidInBlockerTrigger(_Pyramid,_Trigger)
THEN
Proc_PyramidLeaveBlockerTrigger(_Pyramid,_Trigger);


// Pyramid entered/left blocking trigger inside of another container
IF
ItemEnteredTrigger(_Container,_Trigger,_)
AND
DB_PyramidBlockerTrigger(_Trigger)
AND
DB_TeleporterPyramid(_Pyramid)
AND
GetInventoryOwner(_Pyramid,_Container)
THEN
Proc_PyramidEnterBlockerTrigger(_Pyramid,_Trigger);

IF
ItemLeftTrigger(_Container,_Trigger,_)
AND
DB_PyramidInBlockerTrigger(_Pyramid,_Trigger)
AND
GetInventoryOwner(_Pyramid,_Container)
THEN
Proc_PyramidLeaveBlockerTrigger(_Pyramid,_Trigger);


// Added to container - remove old triggers that this container is not inside
IF
ItemAddedToContainer(_Pyramid,_)
AND
DB_TeleporterPyramid(_Pyramid)
AND
GetInventoryOwner(_Pyramid,_TopCont)
AND
DB_PyramidInBlockerTrigger(_Pyramid,_Trigger)
AND
ObjectIsInTrigger(_TopCont,_Trigger,0)
THEN
Proc_PyramidLeaveBlockerTrigger(_Pyramid,_Trigger);

IF
ItemAddedToContainer(_Pyramid,_)
AND
DB_TeleporterPyramid(_Pyramid)
AND
GetInventoryOwner(_Pyramid,_TopCont)
AND
DB_PyramidBlockerTrigger(_Trigger)
AND
ObjectIsInTrigger(_TopCont,_Trigger,1)
THEN
Proc_PyramidEnterBlockerTrigger(_Pyramid,_Trigger);

IF
ItemRemovedFromContainer(_Pyramid,_Container)
AND
DB_TeleporterPyramid(_Pyramid)
AND
DB_PyramidInBlockerTrigger(_Pyramid,_Trigger)
AND
ObjectIsInTrigger(_Container,_Trigger,1)
THEN
Proc_PyramidLeaveBlockerTrigger(_Pyramid,_Trigger);

IF
ItemRemovedFromContainer(_Pyramid,_Container)
AND
DB_TeleporterPyramid(_Pyramid)
AND
DB_PyramidInBlockerTrigger(_Pyramid,_Trigger)
AND
GetInventoryOwner(_Container,_TopCont)
AND
ObjectIsInTrigger(_TopCont,_Trigger,1)
THEN
Proc_PyramidLeaveBlockerTrigger(_Pyramid,_Trigger);

IF
ItemAddedToCharacter(_Pyramid,_Character)
AND
DB_TeleporterPyramid(_Pyramid)
AND
DB_PyramidBlockerTrigger(_Trigger)
AND
ObjectIsInTrigger(_Character,_Trigger,1)
THEN
Proc_PyramidEnterBlockerTrigger(_Pyramid,_Trigger);

IF
ItemRemovedFromCharacter(_Pyramid,_Character)
AND
DB_TeleporterPyramid(_Pyramid)
AND
DB_PyramidBlockerTrigger(_Trigger)
AND
ObjectIsInTrigger(_Character,_Trigger,1)
THEN
Proc_PyramidLeaveBlockerTrigger(_Pyramid,_Trigger);


PROC
Proc_PyramidEnterBlockerTrigger((ITEMGUID)_Pyramid,(TRIGGERGUID)_Trigger)
THEN
DisablePyramid(_Pyramid);
DB_PyramidInBlockerTrigger(_Pyramid,_Trigger);

PROC
Proc_PyramidLeaveBlockerTrigger((ITEMGUID)_Pyramid,(TRIGGERGUID)_Trigger)
THEN
NOT DB_PyramidInBlockerTrigger(_Pyramid,_Trigger);
Proc_PyramidCheckEnabled(_Pyramid);


PROC
Proc_PyramidCheckEnabled((ITEMGUID)_Pyramid)
AND
NOT DB_PyramidUsageBlocked(1)
AND
DB_TeleporterPyramid(_Pyramid)
AND
NOT DB_PyramidInBlockerTrigger(_Pyramid,_)
AND
NOT DB_PyramidCustomBlock(_Pyramid,_)
THEN
EnablePyramid(_Pyramid);
//END_REGION


//REGION Level transitions
IF
RegionEnded(_Region)
AND
DB_TeleporterPyramidUnlocked(_Pyramid)
AND
GetRegion(_Pyramid,_Region)
AND
GetInventoryOwner(_Pyramid,_TopContainer)
AND
NOT DB_IsPlayer((CHARACTERGUID)_TopContainer)
AND
ItemGetOriginalOwner(_Pyramid,_Owner)
THEN
ItemToInventory(_Pyramid,_Owner,-1);

IF
RegionEnded(_Region)
AND
DB_TeleporterPyramidUnlocked(_Pyramid)
AND
GetRegion(_Pyramid,_Region)
AND
NOT GetInventoryOwner(_Pyramid,_)
AND
ItemGetOriginalOwner(_Pyramid,_Owner)
THEN
ItemToInventory(_Pyramid,_Owner,-1);

/*
IF
ItemWentOnStage(_Container,0)
AND
DB_TeleporterPyramidUnlocked(_Pyramid)
AND
//TODO: implement this: ItemIsInItemInventory(_Pyramid,_Container,1)
AND
GetPosition(_Container,_X,_Y,_Z)
THEN
TeleportToPosition(_Pyramid,_X,_Y,_Z,"",0);
ItemClearOwner(_Pyramid);
*/

// Prevent NPCs leaving with Pyramids in their inventory
IF
CharacterWentOnStage(_NPC,0)
AND
// Players can be set off-stage temporarily by story in some cases
NOT DB_IsPlayer(_NPC)
AND
DB_TeleporterPyramid(_Pyramid)
AND
ItemIsInCharacterInventory(_Pyramid,_NPC,1)
AND
GetPosition(_NPC,_X,_Y,_Z)
THEN
TeleportToPosition(_Pyramid,_X,_Y,_Z,"",0);
ItemClearOwner(_Pyramid);

PROC
Proc_CompanionLeftParty((CHARACTERGUID)_Companion,(CHARACTERGUID)_Player)
AND
DB_TeleporterPyramid(_Pyramid)
AND
ItemIsInCharacterInventory(_Pyramid,_Companion,1)
THEN
ItemToInventory(_Pyramid,_Player,-1);
//END_REGION


//REGION Pyramids using (teleportation)
IF
CharacterTeleportToPyramid(_Char,_Pyramid)
AND
PyramidEnabled(_Pyramid)
AND
GetPosition(_Pyramid,_X,_Y,_Z)
THEN
TeleportToPosition(_Char,_X,_Y,_Z,"",1,1);

IF
CharacterTeleportToPyramid(_Char,_Pyramid)
AND
NOT PyramidEnabled(_Pyramid)
THEN
Proc_StartDialog(1,"GEN_AD_TeleporterPyramidDisabled",_Char);
// TODO: check if this is needed ---> DB_CustomUseItemResponse(_Char,_Pyramid,0);

PROC
ProcBlockUseOfItem(_Player,_Pyramid)
AND
DB_TeleporterPyramid(_Pyramid)
AND
DB_IsPlayer(_Player)
AND
NOT PyramidEnabled(_Pyramid)
THEN
CloseUI(_Player,"Inventory");
ObjectSetFlag(_Player,"SourcePyramidBlocked");
Proc_StartDialog(1,"GEN_AD_TeleporterPyramidDisabled",_Player);
DB_CustomUseItemResponse(_Player,_Pyramid,0);

PROC
ProcBlockUseOfItem(_Player,_Pyramid)
AND
DB_TeleporterPyramid(_Pyramid)
AND
DB_IsPlayer(_Player)
AND
DB_PyramidBlockerTrigger(_Trigger)
AND
ObjectIsInTrigger(_Player,_Trigger,1)
THEN
CloseUI(_Player,"Inventory");
ObjectSetFlag(_Player,"SourcePyramidBlocked");
Proc_StartDialog(1,"GEN_AD_TeleporterPyramidDisabled",_Player);
DB_CustomUseItemResponse(_Player,_Pyramid,0);
//END_REGION


IF
ItemAddedToCharacter(_Pyramid,_Player)
AND
DB_TeleporterPyramid(_Pyramid)
AND
DB_IsPlayer(_Player)
THEN
PROC_CheckPlayTutWithDelay(_Player,"TUT_Pyramid",2000);


//REGION Enable/disable
//TEMP: needs to be a game calls
PROC
DisablePyramid((ITEMGUID)_Item)
THEN
SetTag(_Item,"PYRAMID_DISABLED");

PROC
EnablePyramid((ITEMGUID)_Item)
THEN
ClearTag(_Item,"PYRAMID_DISABLED");

QRY
PyramidEnabled((ITEMGUID)_Item)
AND
IsTagged(_Item,"PYRAMID_DISABLED",0)
THEN
DB_NOOP(1);
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "__Start"

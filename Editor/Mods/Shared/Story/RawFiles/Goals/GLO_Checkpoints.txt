Version 1
SubGoalCombiner SGC_AND
INITSECTION
/* Uses the databases
DB_CheckPoint(_Guard1, _Guard2, _Trigger1, _Trigger2, _Trigger3, _Flag, _Crime, _OutTrigger, _UserLevel)
DB_CheckPoint(_Guard1, _Guard2, _Trigger1, _Trigger2, _Trigger3, _Flag, _Crime, _OutTrigger)
DB_CheckPoint(_Guard1, _Guard2, _Trigger1, _Trigger2, _Trigger3, _Flag, _Crime)
and
DB_CheckPoint(_Guard1, _Guard2, _Trigger1, _Trigger2, _Trigger3, _Flag)
for a checkpoint with two warnings. In Trigger 1, Guard 1 warns the player, and typically offers them the option to earn the right to pass
the checkpoint, getting the _Flag. In Trigger 2, Guard 2 gives the player a final warning.
In Trigger 3, the player (if they don't have the _Flag) counts as Trespassing.

The optional _Crime parameter allows you to register a custom crime rather than the default Trespassing crime.
The optional _OutTrigger parameter makes it possible for the player to choose the "leave" option when confronted with their trespassing.
The optional _UserLevel parameter, if 1, makes the checkpoint operate on the user level.

Guards should have the SneakSpotter script.
*/
KBSECTION
//REGION Database registering
IF
DB_CheckPoint((CHARACTERGUID)_Guard1, (CHARACTERGUID)_Guard2, (TRIGGERGUID)_Trigger1, (TRIGGERGUID)_Trigger2, (TRIGGERGUID)_Trigger3, (STRING)_Flag)
THEN
DB_CheckPoint(_Guard1, _Guard2, _Trigger1, _Trigger2, _Trigger3, _Flag, "Trespassing");

IF
DB_CheckPoint((CHARACTERGUID)_Guard1, (CHARACTERGUID)_Guard2, (TRIGGERGUID)_Trigger1, (TRIGGERGUID)_Trigger2, (TRIGGERGUID)_Trigger3, (STRING)_Flag, (STRING)_Crime)
THEN
DB_CheckPoint(_Guard1, _Guard2, _Trigger1, _Trigger2, _Trigger3, _Flag, _Crime, (TRIGGERGUID)NULL_00000000-0000-0000-0000-000000000000);

IF
DB_CheckPoint(_Guard1, _Guard2, _Trigger1, _Trigger2, _Trigger3, _Flag, _Crime, _OutTrigger)
THEN
DB_CheckPoint(_Guard1, _Guard2, _Trigger1, _Trigger2, _Trigger3, _Flag, _Crime, _OutTrigger, 0);

IF
DB_CheckPoint(_Guard1, _Guard2, _Trigger1, _Trigger2, _Trigger3, _, _Crime, _OutTrigger, _UserLevel)
THEN
DB_CheckPointGuard(_Guard1, _Trigger1);
DB_CheckPointGuard(_Guard2, _Trigger2);
DB_TrespassTrigger(_Trigger3, _OutTrigger, _Crime);

IF
DB_CheckPointGuard((CHARACTERGUID)_Guard, (TRIGGERGUID)_Trigger)
THEN
DB_SneakTriggerSpotter(_Trigger, _Guard);

//END_REGION

//REGION General Logic with Guards addressing player
IF
ObjectEnteredCombat((CHARACTERGUID)_Guard, _)
AND
DB_CheckPointGuard(_Guard, _)
THEN
ObjectClearFlag(_Guard, "GLO_CP_WarningSomeone", 0);

IF
DialogEnded(_, _ID)
AND
DB_DialogNPCs(_ID, _Guard, _)
AND
DB_CheckPointGuard((CHARACTERGUID)_Guard, _)
THEN
ObjectClearFlag(_Guard, "GLO_CP_WarningSomeone", 0);

IF
CharacterLeftTrigger(_, _Trigger)
AND
QRY_AnyRegionActive()
AND
DB_CheckPointGuard(_Guard, _Trigger)
AND
NOT DB_InRegion(_, _Trigger)
THEN
SetStoryEvent(_Guard, "RestartSpotting");
DB_SneakTriggerSpotter(_Trigger, _Guard);

PROC
ProcCharInTriggerSpotted(_Player, _Trigger2)
AND
DB_CheckPoint(_, _Guard2, _, _Trigger2, _, _Flag, _, _, 0)
AND
NOT PartyGetFlag(_Player, _Flag, 1) //If none of the party members have been allowed to enter.
AND
QRY_SpeakerIsAvailable(_Guard2)
AND
DB_IsPlayer(_Player)
THEN
ObjectSetFlag(_Guard2, "GLO_CP_WarningSomeone", 0);
PROC_CheckPointDialogue(_Player, _Guard2);

PROC
ProcCharInTriggerSpotted(_Player, _Trigger2)
AND
DB_CheckPoint(_, _Guard2, _, _Trigger2, _, _Flag, _, _, 1)
AND
NOT UserGetFlag(_Player, _Flag, 1) //If none of the party members have been allowed to enter.
AND
QRY_SpeakerIsAvailable(_Guard2)
AND
DB_IsPlayer(_Player)
THEN
ObjectSetFlag(_Guard2, "GLO_CP_WarningSomeone", 0);
PROC_CheckPointDialogue(_Player, _Guard2);

PROC
ProcCharInTriggerSpotted((CHARACTERGUID)_Player, _Trigger)
AND
DB_CheckPoint(_Guard1, _, _Trigger, _, _, _Flag, _, _, 0)
AND
NOT PartyGetFlag(_Player, _Flag, 1) //If none of the party members have been allowed to enter.
AND
CharacterIsControlled(_Player, 1)
AND
DB_IsPlayer(_Player)
AND
QRY_SpeakerIsAvailable(_Guard1)
AND
ObjectGetFlag(_Guard1, "GLO_CP_WarningSomeone", 0)
THEN
ObjectSetFlag(_Guard1, "GLO_CP_WarningSomeone", 0);
PROC_CheckPointDialogue(_Player, _Guard1);

PROC
ProcCharInTriggerSpotted((CHARACTERGUID)_Player, _Trigger)
AND
DB_CheckPoint(_Guard1, _, _Trigger, _, _, _Flag, _, _, 1)
AND
NOT UserGetFlag(_Player, _Flag, 1) //If none of the party members have been allowed to enter.
AND
CharacterIsControlled(_Player, 1)
AND
DB_IsPlayer(_Player)
AND
QRY_SpeakerIsAvailable(_Guard1)
AND
ObjectGetFlag(_Guard1, "GLO_CP_WarningSomeone", 0)
THEN
ObjectSetFlag(_Guard1, "GLO_CP_WarningSomeone", 0);
PROC_CheckPointDialogue(_Player, _Guard1);

PROC
PROC_CheckPointDialogue((CHARACTERGUID)NULL_00000000-0000-0000-0000-000000000000, (CHARACTERGUID)NULL_00000000-0000-0000-0000-000000000000)
THEN
DB_NOOP(0);
//END_REGION

//REGION If the players have the appropriate flag, they do not count as trespassing.
QRY
QRY_CRIME_BlockRegisterCrime(_Player,_Crime,_Trigger, _, _, _)
AND
DB_CheckPoint(_, _, _, _, (TRIGGERGUID)_Trigger, _Flag, _Crime, _, 0)
AND
PartyGetFlag(_Player, _Flag, 1)
THEN
DB_NOOP(0);

QRY
QRY_CRIME_BlockRegisterCrime(_Player,_Crime,_Trigger, _, _, _)
AND
DB_CheckPoint(_, _, _, _, (TRIGGERGUID)_Trigger, _Flag, _Crime, _, 1)
AND
UserGetFlag(_Player, _Flag, 1)
THEN
DB_NOOP(0);

IF
ObjectFlagSet(_Flag, _Player, _)
AND
DB_CheckPoint(_, _, _, _, _Trigger, _Flag, _Crime, _, _)
THEN
NOT DB_PlayerTrespassing((CHARACTERGUID)_Player,_Trigger);
CharacterStopCrime((CHARACTERGUID)_Player, _Crime, _Trigger);

IF
ObjectFlagCleared(_Flag, _Player, _)
AND
DB_CheckPoint(_, _, _, _, _Trigger, _Flag, _Crime, _, _)
AND
DB_InRegion((CHARACTERGUID)_Player, _Trigger)
THEN
ProcCharacterRegisterCrime((CHARACTERGUID)_Player,_Crime,_Trigger,NULL_00000000-0000-0000-0000-000000000000,0,NULL_00000000-0000-0000-0000-000000000000);
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "__Start"

Version 1
SubGoalCombiner SGC_AND
INITSECTION
DB_TUT_LowerDeck_EscapeItems((ITEMGUID)S_TUT_LowerDeck_StairsToMiddleDeck_a6a4e0dd-98c3-4030-8ef8-e0ca663beaa6);
DB_TUT_LowerDeck_EscapeItems(S_TUT_LowerDeck_StairsToMiddleDeck_Blocked_57d13139-818c-4853-b238-fbb9454175a8);

DB_TUT_LowerDeck_DoorsToEscape((ITEMGUID)S_TUT_LowerDeck_DoorToStairs_002_1840ef12-66e9-47f4-9756-0c9a11104ebc,(TRIGGERGUID)S_TUT_LowerDeck_MiddleStairsDoorWindegoPoint_855dfb2a-dca8-4529-be63-63c19e18f149);
DB_TUT_LowerDeck_DoorsToEscape(S_TUT_LowerDeck_DoorToStairs_a3568413-0821-406c-b8a9-33d3a5c1638f,S_TUT_LowerDeck_SternRoomDoorWindegoPoint_accf73ae-4243-4f1f-ab8d-0c8521d049ad);
DB_TUT_LowerDeck_DoorsToEscape(S_TUT_LowerDeck_DoorToStairs_000_b18d5ea1-ec4c-44f4-9a3b-5b851d1d9b8b,S_TUT_LowerDeck_StorageRoomDoorWindegoPoint_ce1fd4e7-b95a-4183-b02c-80dede93921d);

DB_TUT_LowerDeck_WindegoExplosionPoints(CHARACTERGUID_S_TUT_LowerDeck_ExitDoorGuard_001_bf967ae2-69a9-4791-8f80-ad72236edaf7,"Projectile_TrapFireballNoIgnite",0);
DB_TUT_LowerDeck_WindegoExplosionPoints(S_TUT_LowerDeck_WindegoExplosion_Point_001_c2a112a4-f6a9-4ffe-996f-1470872f8242,"Projectile_EnemyFireball",0);
DB_TUT_LowerDeck_WindegoExplosionPoints(S_TUT_LowerDeck_WindegoExplosion_Point_002_3d5c7b1f-e38a-40d4-ace2-150e1e83d276,"Projectile_EnemyFireball",0);
DB_TUT_LowerDeck_WindegoExplosionPoints(S_TUT_LowerDeck_WindegoExplosion_Point_003_7b6e1265-716a-4beb-bc29-635fc71f2dc6,"Projectile_EnemyFireball",0);
DB_TUT_LowerDeck_WindegoExplosionPoints(S_TUT_LowerDeck_WindegoExplosion_Point_004_890e9693-6664-4323-8af3-64c6f79b08b3,"Projectile_EnemyFireball",0);
DB_TUT_LowerDeck_WindegoExplosionPoints(CHARACTERGUID_S_TUT_LowerDeck_MagisterMurderSceneGuard_000_a48a580b-6ba5-4b65-ad71-cc422ccff47b,"Projectile_TrapFireballNoIgnite",0);
DB_TUT_LowerDeck_WindegoExplosionPoints(CHARACTERGUID_S_TUT_LowerDeck_MagisterMurderSceneGuard_001_86f1a553-b197-4777-a716-2f5853767730,"Projectile_TrapFireballNoIgnite",0);
DB_TUT_LowerDeck_WindegoExplosionPoints(S_TUT_LowerDeck_Magister_Grunt_Investigator_000_47ab7059-829c-4523-adf2-6cf91fa3b29f,"Projectile_EnemyFireball",0);
DB_TUT_LowerDeck_WindegoExplosionPoints(CHARACTERGUID_S_TUT_LowerDeck_PrayingMagister_096479c9-a702-4161-a5ba-fb2b3312bf76,"Projectile_EnemyFireball",0);
DB_TUT_LowerDeck_WindegoExplosionPoints(S_TUT_Humans_Female_Magister_Priest_000_9d17cf06-6fad-49a8-82de-54518a9bf5df,"Projectile_EnemyFireball",0);
DB_TUT_LowerDeck_WindegoExplosionPoints(S_TUT_LowerDeck_SternRoomExplosionPoint_000_4d7536e0-8a57-4051-a990-bcc609e54b83,"Projectile_EnemyFireball",0);
DB_TUT_LowerDeck_WindegoExplosionPoints(S_FUR_Humans_Displaycase_B_000_cf8d2bf0-e9d6-4c5c-9bd0-99aac735d48f,"Projectile_EnemyFireball",0);
DB_TUT_LowerDeck_WindegoExplosionPoints(S_TUT_LowerDeck_SternRoomExplosionPoint_001_d6a7f6c0-4973-4fbd-a650-86d654e8dad9,"Projectile_EnemyFireball",0);
DB_TUT_LowerDeck_WindegoExplosionPoints(TRIGGERGUID_S_TUT_LowerDeck_SternRoomExplosionPoint_002_83df3bf3-a5a4-4fdb-b83f-f5106c361a6a,"Projectile_EnemyFireball",0);
DB_TUT_LowerDeck_WindegoExplosionPoints(TRIGGERGUID_S_TUT_LowerDeck_SternRoomExplosionPoint_004_efdb70d4-c03d-4631-ad7b-9ce16b4f03ef,"Projectile_EnemyFireball",0);
DB_TUT_LowerDeck_WindegoExplosionPoints(TRIGGERGUID_S_TUT_LowerDeck_SternRoomExplosionPoint_005_acb6d68e-83f2-492c-834b-c94feadeef2f,"Projectile_EnemyFireball",0);
DB_TUT_LowerDeck_WindegoExplosionPoints(S_TUT_LowerDeck_StorageExplosionPoint_000_6b6daed2-7b47-4693-8470-4beb5858f2e3,"Projectile_EnemyFireball",0);
DB_TUT_LowerDeck_WindegoExplosionPoints(S_TUT_LowerDeck_StorageExplosionPoint_001_ef71ea6a-0383-482c-9833-7c19d6f508dd,"Projectile_EnemyFireball",0);
DB_TUT_LowerDeck_WindegoExplosionPoints(S_FUR_Humans_Rich_Table_Small_A_000_LV_Deck_001_ba97bedb-1ba1-4de1-8dca-f2d9b3def79a,"Projectile_EnemyFireball",0);
DB_TUT_LowerDeck_WindegoExplosionPoints(TRIGGERGUID_S_TUT_LowerDeck_WindegoExplosition_ClothesPile_MurderRoom_0be7fb57-4d0d-4fdd-8bd5-0af081496a0f,"Projectile_EnemyFireball",0);
DB_TUT_LowerDeck_WindegoExplosionPoints(S_TUT_LowerDeck_LadderRoomExplosionPoint_001_64361753-821f-44ad-9bab-0443f3330e6c,"Projectile_EnemyFireball",0);
DB_TUT_LowerDeck_WindegoExplosionPoints(S_TUT_LowerDeck_LadderRoomExplosionPoint_000_802fbb5c-dbea-45ea-9d3c-4627393a222f,"Projectile_EnemyFireball",0);
DB_TUT_LowerDeck_WindegoExplosionPoints(ITEMGUID_S_TUT_CargoDeck_FUR_Humans_Med_OperatingTable_A_000_b67b5777-e56a-4419-bb06-9797224dc25e,"Projectile_EnemyFireball",0);
DB_TUT_LowerDeck_WindegoExplosionPoints(ITEMGUID_S_TUT_CargoDeck_FUR_Humans_Med_OperatingTable_A_001_c1bbef56-afa3-4a05-86ff-2d33253bec45,"Projectile_EnemyFireball",0);
DB_TUT_LowerDeck_WindegoExplosionPoints(ITEMGUID_S_TUT_CargoDeck_FUR_Humans_Med_OperatingTable_A_002_0bcc7176-896d-48de-a87d-5f7281e2cb64,"Projectile_EnemyFireball",0);
DB_TUT_LowerDeck_WindegoExplosionPoints(ITEMGUID_S_TUT_CargoDeck_FUR_Humans_Med_OperatingTable_A_003_3ceca2b9-bcc4-4e9d-aa1e-f8409b8aa447,"Projectile_EnemyFireball",0);
DB_TUT_LowerDeck_WindegoExplosionPoints(S_FUR_Humans_Rich_Table_F2_002_4565077c-a4d6-497d-b7b1-5d63f03ef74c,"Projectile_EnemyFireball",0);
DB_TUT_LowerDeck_WindegoExplosionPoints(S_TUT_LowerDeck_CollaringRoomExplosionPoint_000_fbf78c98-ea5e-4f5b-9d61-126687007a06,"Projectile_EnemyFireball",0);
DB_TUT_LowerDeck_WindegoExplosionPoints(TRIGGERGUID_S_TUT_LowerDeck_CollaringRoomExplosionPoint_001_56eb171e-bfdd-4cd9-9c50-75e26b223136,"Projectile_EnemyFireball",0);
DB_TUT_LowerDeck_WindegoExplosionPoints(TRIGGERGUID_S_TUT_LowerDeck_CollaringRoomExplosionPoint_002_ffbedaa8-1082-4f06-a2b6-e8b84e1c1fd2,"Projectile_EnemyFireball",0);

DB_TUT_LowerDeck_WindegoDestroyItems((ITEMGUID)S_CONT_Humans_Citz_Barrel_A_024_8c1a8734-1b8c-408c-9bd0-9b471f8f46a4);

DB_TUT_LowerDeck_WindegoSpareCharacters((CHARACTERGUID)CHARACTERGUID_S_GLO_Windego_d783285f-d3be-4cba-8333-db8976cef182);
DB_TUT_LowerDeck_WindegoSpareCharacters(S_TUT_Humans_Female_Magister_Priest_000_9d17cf06-6fad-49a8-82de-54518a9bf5df);
DB_TUT_LowerDeck_WindegoSpareCharacters(CHARACTERGUID_S_TUT_LowerDeck_DwarvenCarpenter_c0c25bbc-8106-402f-b706-ac20533b0c9a);

DB_TUT_LowerDeck_DefaultBehaviours((CHARACTERGUID)CHARACTERGUID_S_TUT_LowerDeck_LohseSongBoy1_835a993e-1bf1-4e6f-8922-20dd8b99bca4,"State_Manager");
DB_TUT_LowerDeck_DefaultBehaviours(CHARACTERGUID_S_TUT_LowerDeck_LohseSongBoy2_2d56d0b1-c7a7-4e60-a495-4ea64ca38f0e,"State_Manager");
DB_TUT_LowerDeck_DefaultBehaviours(CHARACTERGUID_S_TUT_LowerDeck_LohseSongGirl1_a681c125-8493-4046-ab1f-6c2201336a22,"State_Manager");
DB_TUT_LowerDeck_DefaultBehaviours(CHARACTERGUID_S_Player_Lohse_bb932b13-8ebf-4ab4-aac0-83e6924e4295,"State_Manager");
DB_TUT_LowerDeck_DefaultBehaviours(CHARACTERGUID_S_Player_RedPrince_a26a1efb-cdc8-4cf3-a7b2-b2f9544add6f,"State_Manager");
DB_TUT_LowerDeck_DefaultBehaviours(CHARACTERGUID_S_Player_Ifan_ad9a3327-4456-42a7-9bf4-7ad60cc9e54f,"State_Manager");
DB_TUT_LowerDeck_DefaultBehaviours(CHARACTERGUID_S_Player_Sebille_c8d55eaf-e4eb-466a-8f0d-6a9447b5b24c,"State_Manager");
DB_TUT_LowerDeck_DefaultBehaviours(CHARACTERGUID_S_Player_Beast_f25ca124-a4d2-427b-af62-df66df41a978,"State_Manager");
DB_TUT_LowerDeck_DefaultBehaviours(CHARACTERGUID_S_Player_Fane_02a77f1f-872b-49ca-91ab-32098c443beb,"State_Manager");
DB_TUT_LowerDeck_DefaultBehaviours(S_TUT_Humans_Female_Magister_Priest_000_9d17cf06-6fad-49a8-82de-54518a9bf5df,"State_Manager");

DB_TUT_LowerDeck_LeakEffects(ITEMGUID_S_TUT_CargoDeck_Drip1_0e0a6760-2b28-43c7-8c48-656cf1126c21);
DB_TUT_LowerDeck_LeakEffects(ITEMGUID_S_TUT_CargoDeck_Drip2_ff8586ae-c180-4ebe-8e9a-3de835ed1354);
DB_TUT_LowerDeck_LeakEffects(ITEMGUID_S_TUT_CargoDeck_Drip3_db1d461a-cf4b-4775-9dad-675f930b888e);
DB_TUT_LowerDeck_LeakEffects(ITEMGUID_S_TUT_CargoDeck_Drip4_fa16b669-f5c8-49d3-b49e-8e0a4c3db048);
DB_TUT_LowerDeck_Leakeffects(ITEMGUID_S_TUT_CargoDeck_Drip5_c17261a1-2dc2-4740-bd5e-e30b688a633f);

DB_TUT_LowerDeck_LeakEffects(ITEMGUID_S_TUT_LowerDeck_Splash1_12c79fd3-a777-40c8-858d-a9b0dff1a77c);
DB_TUT_LowerDeck_LeakEffects(ITEMGUID_S_TUT_LowerDeck_Splash2_041a0a46-edc1-43e8-b9df-aebd06b36d12);
DB_TUT_LowerDeck_LeakEffects(ITEMGUID_S_TUT_LowerDeck_Splash3_6d5813f5-1889-4705-891b-da6909c02fff);
DB_TUT_LowerDeck_LeakEffects(ITEMGUID_S_TUT_LowerDeck_Splash4_d8fc0131-de67-4f05-9195-aa9b2bc3e79e);
DB_TUT_LowerDeck_LeakEffects(ITEMGUID_S_TUT_LowerDeck_Drip1_ef285659-420c-4ec2-b441-0bb1758e4793);
DB_TUT_LowerDeck_LeakEffects(ITEMGUID_S_TUT_LowerDeck_Drip2_fa1bf8ac-1d87-491e-b1de-296ede699569);
DB_TUT_LowerDeck_LeakEffects(ITEMGUID_S_TUT_LowerDeck_Drip3_c470fe42-b95e-4431-8e1f-b36331427d07);
DB_TUT_LowerDeck_LeakEffects(ITEMGUID_S_TUT_LowerDeck_Drip4_7a0b4b7e-f526-4f67-b6e7-07adbc1cb2ee);

DB_IsNotMessingAround(CHARACTERGUID_S_GLO_Windego_d783285f-d3be-4cba-8333-db8976cef182);
DB_IsNotMessingAround(S_TUT_LowerDeck_CrossBowMagister_000_c4531ec5-203f-4ff2-95f6-ac14b9cf7994);
DB_IsNotMessingAround(S_TUT_LowerDeck_CrossBowMagister_001_b2ec3611-6484-4168-9039-c092bcdea52d);
DB_IsNotMessingAround(S_TUT_LowerDeck_Officer_X_a658e0ea-db65-4be9-82c0-40629a2d0340);

PROC_TUT_LowerDeckInit();
SetOnStage(ITEMGUID_S_TUT_Windego_Wave_101fb00b-a37e-435f-a12c-fa715117fe87, 0);
//PROC_LoopEffect("RS3_FX_GP_ScriptedEvent_Windego_ShipWideBlast_01", ITEMGUID_S_TUT_Windego_Wave_101fb00b-a37e-435f-a12c-fa715117fe87, "Blast", "TUT_Tutorial_A", "Helper_Stub_Box_A");

// Can never trade with Windego
CharacterSetCanTrade(CHARACTERGUID_S_GLO_Windego_d783285f-d3be-4cba-8333-db8976cef182,0);
KBSECTION
//REGION Debugging/test
IF
TextEventSet("TUT_TestWindegoWave")
THEN
TeleportTo(ITEMGUID_S_TUT_Windego_Wave_101fb00b-a37e-435f-a12c-fa715117fe87, CHARACTERGUID_S_GLO_Windego_d783285f-d3be-4cba-8333-db8976cef182);
SetOnStage(ITEMGUID_S_TUT_Windego_Wave_101fb00b-a37e-435f-a12c-fa715117fe87, 1);

IF
TextEventSet("tut_restorecombat")
AND
DB_IsPlayer(_Player)
THEN
SetCanJoinCombat(_Player,1);
SetCanFight(_Player,1);

IF
TextEventSet("tut_restorewindego")
THEN
PROC_TUT_DebugRestoreWindego();

PROC
PROC_TUT_DebugRestoreWindego()
THEN
TeleportTo(CHARACTERGUID_S_GLO_Windego_d783285f-d3be-4cba-8333-db8976cef182,S_TUT_LowerDeck_WindegoStartPoint_96136d70-102d-4066-bc0d-2c846c9cf808);

PROC
PROC_TUT_DebugRestoreWindego()
AND
DB_TUT_LowerDeck_WindegoKnockedDown(_Char)
THEN
RemoveStatus(_Char,"KNOCKED_DOWN");
SetCanFight(_Char,1);
SetCanJoinCombat(_Char,1);
CharacterSetAnimationOverride(_Char,"");
//END_REGION

//REGION Init
PROC
PROC_TUT_LowerDeckInit()
THEN
TeleportTo(CHARACTERGUID_S_GLO_Windego_d783285f-d3be-4cba-8333-db8976cef182,S_TUT_LowerDeck_WindegoStartPoint_96136d70-102d-4066-bc0d-2c846c9cf808);
SetOnStage(CHARACTERGUID_S_GLO_Windego_d783285f-d3be-4cba-8333-db8976cef182,1);
SetVarInteger(CHARACTERGUID_S_GLO_Windego_d783285f-d3be-4cba-8333-db8976cef182,"bool_CanCower",0);
ProcRemoveAllDialogEntriesForSpeaker(S_FTJ_SW_EscapedPrisoner_d783285f-d3be-4cba-8333-db8976cef182); // Remove potential Fort Joy Dialog
DB_Dialogs(CHARACTERGUID_S_GLO_Windego_d783285f-d3be-4cba-8333-db8976cef182,"TUT_LowerDeck_EscapedPrisonerWindego");
SetHasDialog(CHARACTERGUID_S_GLO_Windego_d783285f-d3be-4cba-8333-db8976cef182,1);
SetVarFixedString(CHARACTERGUID_S_GLO_Windego_d783285f-d3be-4cba-8333-db8976cef182,"currentState","");
// Make sure Windego doesn't actually fight when she joins combat; her event will be triggered instead
CharacterSetReactionPriority(CHARACTERGUID_S_GLO_Windego_d783285f-d3be-4cba-8333-db8976cef182,"TutorialFight",1000);

PROC
PROC_TUT_LowerDeckInit()
AND
DB_TUT_LowerDeck_LeakEffects(_Effect)
THEN
SetOnStage(_Effect, 0);

PROC
PROC_TUT_LowerDeckInit()
AND
DB_TUT_LowerDeck_WindegoExplosionPoints(_Location,_,_Delay)
AND
GetDistanceTo(_Location,S_TUT_LowerDeck_WindegoStartPoint_96136d70-102d-4066-bc0d-2c846c9cf808,_Dist)
THEN
PROC_TUT_LowerDeck_SetExplosionDelay(_Location,_Dist);

PROC
PROC_TUT_LowerDeck_SetExplosionDelay((GUIDSTRING)_Location,(REAL)_Dist)
AND
_Dist <= 10.0
AND
Random(400,_NewDelay)
AND
DB_TUT_LowerDeck_WindegoExplosionPoints(_Location,_Effect,_Delay)
THEN
NOT DB_TUT_LowerDeck_WindegoExplosionPoints(_Location,_Effect,_Delay);
DB_TUT_LowerDeck_WindegoExplosionPoints(_Location,_Effect,_NewDelay);

PROC
PROC_TUT_LowerDeck_SetExplosionDelay((GUIDSTRING)_Location,(REAL)_Dist)
AND
_Dist > 10.0
AND
_Dist <= 20.0
AND
DB_TUT_LowerDeck_WindegoExplosionPoints(_Location,_Effect,_Delay)
AND
Random(1000,_RandDelay)
AND
IntegerSum(_RandDelay,500,_NewDelay)
THEN
NOT DB_TUT_LowerDeck_WindegoExplosionPoints(_Location,_Effect,_Delay);
DB_TUT_LowerDeck_WindegoExplosionPoints(_Location,_Effect,_NewDelay);

PROC
PROC_TUT_LowerDeck_SetExplosionDelay((GUIDSTRING)_Location,(REAL)_Dist)
AND
_Dist > 20.0
AND
_Dist <= 40.0
AND
DB_TUT_LowerDeck_WindegoExplosionPoints(_Location,_Effect,_Delay)
AND
Random(1000,_RandDelay)
AND
IntegerSum(_RandDelay,1500,_NewDelay)
THEN
NOT DB_TUT_LowerDeck_WindegoExplosionPoints(_Location,_Effect,_Delay);
DB_TUT_LowerDeck_WindegoExplosionPoints(_Location,_Effect,_NewDelay);

PROC
PROC_TUT_LowerDeck_SetExplosionDelay((GUIDSTRING)_Location,(REAL)_Dist)
AND
_Dist > 40.0
AND
DB_TUT_LowerDeck_WindegoExplosionPoints(_Location,_Effect,_Delay)
AND
Random(2000,_RandDelay)
AND
IntegerSum(_RandDelay,3000,_NewDelay)
THEN
NOT DB_TUT_LowerDeck_WindegoExplosionPoints(_Location,_Effect,_Delay);
DB_TUT_LowerDeck_WindegoExplosionPoints(_Location,_Effect,_NewDelay);
//END_REGION //Init

//REGION AteVictimLimb update

IF
ObjectFlagSet("TUT_AteDeadManLimb",(CHARACTERGUID)_Char,_)
AND
ObjectGetFlag(_Char,"QuestUpdate_TUT_ShipInvestigation_Start",1)
THEN
PartySetFlag(_Char,"QuestUpdate_TUT_ShipInvestigation_AteVictimLimb");

IF 
ObjectFlagSet("QuestUpdate_TUT_ShipInvestigation_Start",(CHARACTERGUID)_Char,_)
AND
ObjectGetFlag(_Char,"TUT_AteDeadManLimb",1)
AND
ObjectGetFlag(_Char,"QuestUpdate_TUT_ShipInvestigation_AteVictimLimb",0)
THEN
PartySetFlag(_Char,"QuestUpdate_TUT_ShipInvestigation_AteVictimLimb");

//END_REGION

//REGION Windego causes explosions and everything goes dark
// Ensure Windego doesn't perform any default combat actions
IF
CombatStarted(_CombatID)
AND
CharacterIsInCombat(CHARACTERGUID_S_GLO_Windego_d783285f-d3be-4cba-8333-db8976cef182,_CombatID)
THEN
JumpToTurn(CHARACTERGUID_S_GLO_Windego_d783285f-d3be-4cba-8333-db8976cef182);

//REGION Teleport effect for Windego
PROC
PROC_TUT_LowerDeck_WindegoPoof()
AND
GetPosition(CHARACTERGUID_S_GLO_Windego_d783285f-d3be-4cba-8333-db8976cef182,_X,_Y,_Z)
THEN
Poof(CHARACTERGUID_S_GLO_Windego_d783285f-d3be-4cba-8333-db8976cef182);
PlayEffectAtPosition("RS3_FX_GP_ScriptedEvent_Lightning_Vertical_01",_X,_Y,_Z);

IF
StoryEvent(CHARACTERGUID_S_GLO_Windego_d783285f-d3be-4cba-8333-db8976cef182, "TUT_Windego_KrakenSummonSound")
THEN
PlaySound(ITEMGUID_S_TUT_WindegoSoundAnchor_98297b6d-0058-48da-b604-5a457f9f37ef, "SE_TutoLevel_LureTheKraken_FullSequence");
TeleportTo(ITEMGUID_S_TUT_WindegoSoundAnchor_98297b6d-0058-48da-b604-5a457f9f37ef, CHARACTERGUID_S_GLO_Windego_d783285f-d3be-4cba-8333-db8976cef182);


//END_REGION //Teleport effect for Windego

IF
ObjectFlagSet("TUT_WindegoRemoveCollar",CHARACTERGUID_S_GLO_Windego_d783285f-d3be-4cba-8333-db8976cef182,_)
THEN
DB_TUT_LowerDeck_WindegoUnequipCollar(1);
Proc_GLO_SourceCollars_UnequipNPCCollar(CHARACTERGUID_S_GLO_Windego_d783285f-d3be-4cba-8333-db8976cef182);

IF
ItemMoved(_Item)
AND
DB_TUT_LowerDeck_WindegoUnequipCollar(1)
AND
GetTemplate(_Item,"RC_FTJ_Amulet_BrokenSourceCollar_6a906795-b26f-47fd-90ab-ed1916f5b18f")
THEN
NOT DB_TUT_LowerDeck_WindegoUnequipCollar(1);
ItemClearOwner(_Item);

PROC
PROC_TUT_WindegoBeserk((CHARACTERGUID)_Windego)
AND
DB_IsPlayer(_Player)
AND
DB_Sees(_Player,_Windego)
THEN
ObjectSetFlag(_Player,"TUT_SawWindegoCasting");

PROC
PROC_TUT_WindegoBeserk((CHARACTERGUID)_Windego)
AND
GetFaction(_Windego,_CurrentFaction)
THEN
ProcForceStopDialog(_Windego);
SetHasDialog(_Windego,0);
SetScriptFrame(_Windego,"TutorialCastSkill");
GlobalSetFlag("TUT_SetMagisterHitPoints");

IF
CharacterUsedSkill(CHARACTERGUID_S_GLO_Windego_d783285f-d3be-4cba-8333-db8976cef182,"Shout_Quest_LureTheKraken",_, _)
THEN
TimerLaunch("TUT_WindegoAnimationDelay", 1600);

IF
TimerFinished("TUT_WindegoAnimationDelay")
THEN
DB_TUT_WindegoFinishedCastingAnimation(1);
ClearTag(ITEMGUID_S_TUT_LowerDeck_StairsToMiddleDeck_Blocked_57d13139-818c-4853-b238-fbb9454175a8, "NO_PATHFINDING_PORTAL");

//REGION Players black out and regain consciousness
IF
DB_TUT_WindegoFinishedCastingAnimation(1)
AND
QueryOnlyOnce("PROC_TUT_WindegoHasCastExplosion")
THEN
PROC_TUT_WindegoHasCastExplosion();

IF
StoryEvent(CHARACTERGUID_S_GLO_Windego_d783285f-d3be-4cba-8333-db8976cef182,"TUT_WindegoLureTheKrakenFinished")
AND
NOT DB_TUT_Windego_HealthBeforeCasting(0.0)
THEN
PROC_TUT_LowerDeck_TeleportWindegoAway();

IF
StoryEvent(CHARACTERGUID_S_GLO_Windego_d783285f-d3be-4cba-8333-db8976cef182,"TUT_WindegoLureTheKrakenFinished")
AND
DB_TUT_Windego_HealthBeforeCasting(0.0)
THEN
ObjectSetFlag(CHARACTERGUID_S_GLO_Windego_d783285f-d3be-4cba-8333-db8976cef182,"TUT_DiedOnShip");
SetStoryEvent(CHARACTERGUID_S_GLO_Windego_d783285f-d3be-4cba-8333-db8976cef182,"ClearPeaceReturn");
PlayAnimation(CHARACTERGUID_S_GLO_Windego_d783285f-d3be-4cba-8333-db8976cef182,"Worship_01");
Proc_StartDialog(1,"TUT_AD_LowerDeck_WindegoDeadAfterSpell",CHARACTERGUID_S_GLO_Windego_d783285f-d3be-4cba-8333-db8976cef182);

IF
AutomatedDialogEnded("TUT_AD_LowerDeck_WindegoDeadAfterSpell",_)
THEN
PROC_TUT_LowerDeck_TeleportWindegoAway();

IF
AutomatedDialogRequestFailed("TUT_AD_LowerDeck_WindegoDeadAfterSpell",_)
THEN
PROC_TUT_LowerDeck_TeleportWindegoAway();

PROC
PROC_TUT_LowerDeck_TeleportWindegoAway()
THEN
PROC_TUT_LowerDeck_WindegoPoof();
// We may set Windego off-stage before the full skill animation has finished
//
// When she gets put on-stage in Fort Joy, the script frame then restarts that skill there, which we don't want
// -> clear
ClearScriptframe(CHARACTERGUID_S_GLO_Windego_d783285f-d3be-4cba-8333-db8976cef182);
SetStoryEvent(CHARACTERGUID_S_GLO_Windego_d783285f-d3be-4cba-8333-db8976cef182,"TUT_WindegoFadeToBlack");

IF
StoryEvent(CHARACTERGUID_S_GLO_Windego_d783285f-d3be-4cba-8333-db8976cef182,"TUT_WindegoFadeToBlack")
AND
DB_IsPlayer(_Player)
THEN
FadeToBlack(_Player,3.5,0,"TUT_LowerDeck_BlackOutAfterWindego");
// Don't use fade done event, passed UserID is invalid
ProcObjectTimer(_Player,"TUT_LowerDeck_WakeUpAfterWindego",6500);

IF
FadeOutDone(_,"TUT_LowerDeck_BlackOutAfterWindego")
AND
NOT DB_TUT_LowerDeck_BlackOutAfterWindego(1)
AND
DB_TUT_LowerDeck_LeakEffects(_Effect)
THEN
SetOnStage(_Effect, 1);

IF
FadeOutDone(_,"TUT_LowerDeck_BlackOutAfterWindego")
AND
NOT DB_TUT_LowerDeck_BlackOutAfterWindego(1)
THEN
DB_TUT_LowerDeck_BlackOutAfterWindego(1);
// Teleport children to top deck
SetStoryEvent(CHARACTERGUID_S_GLO_Windego_d783285f-d3be-4cba-8333-db8976cef182,"TUT_Windego_ChildrenToSafety");
DB_TUT_Splashes_Triggers((TRIGGERGUID)TRIGGERGUID_S_TUT_Splashes_Box_Bottom_008bc620-5067-46bf-8634-932444a86d50, "TUT_Splashes_Tick_Bottom", "Bottom");
DB_TUT_Splashes_Triggers(TRIGGERGUID_S_TUT_Splashes_Box_Middle_da62f999-9547-4763-bf4a-1b862c870d59, "TUT_Splashes_Tick_Middle", "Middle");
SetOnStage(ITEMGUID_S_TUT_Lightning_LowerDeck_cbe45c25-9233-4c0c-b4fa-7d39aaf5b9e6, 1);
SetOnStage(ITEMGUID_S_TUT_ClearSkies_LowerDeck_0b8be6c0-6943-49df-b6c8-ebef7e29b772, 0);
DB_TUT_CameraShakeTrigger(TRIGGERGUID_S_TUT_ShakeTrigger13_6aea7b74-5999-4925-97c0-a66222bce1d4, "");
DB_TUT_CameraShakeTrigger(TRIGGERGUID_S_TUT_ShakeTrigger14_681097f5-87fc-4fe3-9851-4b2584df6890, "");
DB_TUT_CameraShakeTrigger(TRIGGERGUID_S_TUT_ShakeTrigger15_94a5461b-2e7f-4085-9c00-214470193384, "");
DB_TUT_CameraShakeTrigger(TRIGGERGUID_S_TUT_ShakeTrigger16_e5baaab5-b635-4800-92a6-785b4a68f580, "");
DB_TUT_CameraShakeTrigger(S_TUT_ShakeTrigger22_15a5027a-cf89-4333-8971-be86563ac248, "");
DB_TUT_CameraShakeTrigger(S_TUT_ShakeTrigger23_fc9e6735-297b-42ab-a162-2cb3dd531f51, "");
DB_TUT_CameraShakeTrigger(S_TUT_ShakeTrigger24_26d56e37-bfff-4f47-bf1e-07248698dc2a, "");
DB_TUT_CameraShakeTrigger(S_TUT_ShakeTrigger26_568f2eb5-40dc-48a2-afa9-c0ee3e5479a0, "");
DB_TUT_CameraShakeTrigger(S_TUT_ShakeTrigger27_3d8dc8d3-36d9-4dc9-9b87-0940738c0982, "");

TimerLaunch("TUT_Scripted1_Kraken_DistantRoar", 10000);

IF
TimerFinished("TUT_Scripted1_Kraken_DistantRoar")
THEN
PROC_TUT_PlayImpactSound("TUT_Scripted1_Kraken_DistantRoar");

PROC
ProcObjectTimerFinished(_Player,"TUT_LowerDeck_WakeUpAfterWindego")
THEN
FadeToBlack((CHARACTERGUID)_Player,3.0,1,"TUT_LowerDeck_WakeUpAfterWindego");

IF
FadeInDone(_,"TUT_LowerDeck_WakeUpAfterWindego")
AND
QueryOnlyOnce("TUT_WindegoWakeUpPlayers")
THEN
PROC_TUT_WindegoWakeUpPlayers();
//END_REGION //Players black out and regain consciousness

PROC
PROC_TUT_WindegoHasCastExplosion()
AND
DB_IsPlayer(_Player)
THEN
Proc_ShakeCameraForTime(_Player,500);

PROC
PROC_TUT_WindegoHasCastExplosion()
THEN
PROC_TUT_Windego_CreateExplosion();
PROC_TUT_Windego_KnockDown_LowerDeck();

//REGION Trigger Windego spell explosion
QRY
QRY_TUT_LowerDeck_ExplosionPointCloseToOriginOrPlayerOrSpared((REAL)_X,(REAL)_Y,(REAL)_Z)
AND
GetClosestPlayerToPosition(_X,_Y,_Z,_Player,_Dist)
AND
_Dist < 4.0
THEN
DB_NOOP(1);

QRY
QRY_TUT_LowerDeck_ExplosionPointCloseToOriginOrPlayerOrSpared((REAL)_X,(REAL)_Y,(REAL)_Z)
AND
DB_OriginRecruitmentLocation_Region("TUT_Tutorial_A",_Char,_,_)
AND
GetDistanceToPosition(_Char,_X,_Y,_Z,_Dist)
AND
_Dist < 4.0
THEN
DB_NOOP(1);

QRY
QRY_TUT_LowerDeck_ExplosionPointCloseToOriginOrPlayerOrSpared((REAL)_X,(REAL)_Y,(REAL)_Z)
AND
DB_TUT_LowerDeck_WindegoSpareCharacters(_Char)
AND
GetDistanceToPosition(_Char,_X,_Y,_Z,_Dist)
AND
_Dist < 4.0
THEN
DB_NOOP(1);

PROC
PROC_TUT_Windego_CreateExplosion()
AND
DB_TUT_LowerDeck_WindegoExplosionPoints(_ExplosionPoint,_Skill,_Delay)
THEN
ProcObjectTimer(_ExplosionPoint,"TUT_LowerDeck_WindegoExplosion",_Delay);

PROC
ProcObjectTimerFinished(_ExplosionPoint,"TUT_LowerDeck_WindegoExplosion")
AND
DB_TUT_LowerDeck_WindegoExplosionPoints(_ExplosionPoint,_Skill,_Delay)
AND
// via position so it also works on characters
GetPosition(_ExplosionPoint,_X,_Y,_Z)
AND
NOT QRY_TUT_LowerDeck_ExplosionPointCloseToOriginOrPlayerOrSpared(_X,_Y,_Z)
THEN
PROC_TUT_WindegoExplosion(_X,_Y,_Z,_Skill,2,_Delay);

PROC
PROC_TUT_WindegoExplosion((REAL)_X,(REAL)_Y,(REAL)_Z,(STRING)_Skill,(INTEGER)_Level,(INTEGER)_Delay)
THEN
CreateExplosionAtPosition(_X,_Y,_Z,_Skill,_Level);

PROC
PROC_TUT_WindegoExplosion((REAL)_X,(REAL)_Y,(REAL)_Z,(STRING)_Skill,(INTEGER)_Level,(INTEGER)_Delay)
AND
StringContains(_Skill,"NoIgnite",0)
THEN
CreateSurfaceAtPosition(_X,_Y,_Z,"SurfaceFire",1.1,-1.0);

PROC
PROC_TUT_WindegoExplosion((REAL)_X,(REAL)_Y,(REAL)_Z,(STRING)_Skill,(INTEGER)_Level,(INTEGER)_Delay)
AND
_Delay != 0
AND
DB_IsPlayer(_Player)
AND
NOT DB_TUT_WindegoExplosion_CameraShakingForPlayer(_Player)
THEN
Proc_ShakeCameraForTime(_Player,500);
// Prevent asserts about starting multiple shakes for the same player
DB_TUT_WindegoExplosion_CameraShakingForPlayer(_Player);
ProcObjectTimer(_Player,"TUT_WindegoExplosion_CameraShakingForPlayer",600);

PROC
ProcObjectTimerFinished(_Player,"TUT_WindegoExplosion_CameraShakingForPlayer")
THEN
NOT DB_TUT_WindegoExplosion_CameraShakingForPlayer((CHARACTERGUID)_Player);

PROC
PROC_TUT_Windego_CreateExplosion()
THEN
// Wait a little before destroying things so it happens after the explosions
TimerLaunch("TUT_LowerDeck_WindegoDestroyItems",200);

IF
TimerFinished("TUT_LowerDeck_WindegoDestroyItems")
AND
DB_TUT_LowerDeck_WindegoDestroyItems(_Item)
THEN
PlayEffect(_Item,"RS3_FX_GP_ScriptedEvent_Teleport_GenericSmoke_01");
ItemDestroy(_Item);

PROC
PROC_TUT_Windego_CreateExplosion()
AND
DB_TUT_LowerDeck_WindegoDestroyItems(_Barrel)
AND
Random(10,_Rand)
AND
_Rand != 0
THEN
PlayEffect(_Barrel,"RS3_FX_GP_ScriptedEvent_Teleport_GenericSmoke_01");
ItemDestroy(_Barrel);

PROC
PROC_TUT_Windego_CreateExplosion()
THEN
GlobalSetFlag("TUT_LowerDeck_WindegoHasCastSpell");
DB_TUT_LowerDeck_WindegoCastSpell(1);
TimerLaunch("TUT_LowerDeck_WindegoExplosionPeopleEffects",50);

IF
TimerFinished("TUT_LowerDeck_WindegoExplosionPeopleEffects")
THEN
TriggerLaunchIterator(S_TUT_LowerDeck_Box_6ee7d227-8d55-485f-bfa5-135cf23a6bd1,"TUT_LowerDeck_KillNonOrigins");

IF
StoryEvent((CHARACTERGUID)_Char,"TUT_LowerDeck_KillNonOrigins")
AND
CharacterIsDead(_Char,0)
AND
NOT DB_IsPlayer(_Char)
AND
NOT DB_OriginRecruitmentLocation_Region("TUT_Tutorial_A",_Char,_,_)
AND
NOT DB_Children(_Char)
AND
NOT DB_TUT_LowerDeck_WindegoSpareCharacters(_Char)
AND
Random(5,_Num)
THEN
PROC_TUT_LowerDeck_WindegoKill(_Char,_Num);

// Explode 80% of people so it's more logical they don't have loot
// Don't explode Jalen, because his corpse washes up in Fort Joy
PROC
PROC_TUT_LowerDeck_WindegoKill((CHARACTERGUID)_Char,(INTEGER)_Num)
AND
_Num < 4
AND
_Char != CHARACTERGUID_S_TUT_LowerDeck_Magister_Grunt_Investigator_000_47ab7059-829c-4523-adf2-6cf91fa3b29f
THEN
DB_TUT_WindegoKilledNPC(1);
CharacterDie(_Char,1,"Explode");

PROC
PROC_TUT_LowerDeck_WindegoKill((CHARACTERGUID)_Char,(INTEGER)_Num)
AND
NOT DB_TUT_WindegoKilledNPC(1)
THEN
CharacterDie(_Char,1,"DoT");

PROC
PROC_TUT_LowerDeck_WindegoKill((CHARACTERGUID)_Char,(INTEGER)_Num)
THEN
NOT DB_TUT_WindegoKilledNPC(1);

//END_REGION //Trigger Windego spell explosion

//REGION Knock down everyone on the lower deck
PROC
PROC_TUT_Windego_KnockDown_LowerDeck()
THEN
TeleportTo(ITEMGUID_S_TUT_Windego_Wave_101fb00b-a37e-435f-a12c-fa715117fe87, CHARACTERGUID_S_GLO_Windego_d783285f-d3be-4cba-8333-db8976cef182);
SetOnStage(ITEMGUID_S_TUT_Windego_Wave_101fb00b-a37e-435f-a12c-fa715117fe87, 1);
ItemSetForceSynch(ITEMGUID_S_TUT_Windego_Wave_101fb00b-a37e-435f-a12c-fa715117fe87, 1);

IF
ItemWentOnStage(ITEMGUID_S_TUT_Windego_Wave_101fb00b-a37e-435f-a12c-fa715117fe87, 1)
THEN
ItemMoveToTrigger(ITEMGUID_S_TUT_Windego_Wave_101fb00b-a37e-435f-a12c-fa715117fe87, S_TUT_Windego_wave_trigger_eb5b8a9f-e374-4ca9-9c94-10d159591840, 20.0, 1.00, 0);
TimerLaunch("TUT_StopWindegoWave", 10000);

IF
TimerFinished("TUT_StopWindegoWave")
THEN
ItemSetForceSynch(ITEMGUID_S_TUT_Windego_Wave_101fb00b-a37e-435f-a12c-fa715117fe87, 0);
SetOnStage(ITEMGUID_S_TUT_Windego_Wave_101fb00b-a37e-435f-a12c-fa715117fe87, 0);
TriggerLaunchIterator(TRIGGERGUID_S_TUT_LowerDeck_Box_6ee7d227-8d55-485f-bfa5-135cf23a6bd1, "TUT_LowerDeck_KnockDownEveryoneExceptForWindego");

IF
TimerFinished("TUT_StopWindegoWave")
AND
GetPosition(CHARACTERGUID_S_GLO_Windego_d783285f-d3be-4cba-8333-db8976cef182, _X, _Y, _Z)
THEN
ItemMoveToPosition(ITEMGUID_S_TUT_Windego_Wave_101fb00b-a37e-435f-a12c-fa715117fe87, _X, _Y, _Z, 100.0, 0.0);

IF
StoryEvent(_Character, "TUT_LowerDeck_KnockDownEveryoneExceptForWindego")
AND
NOT DB_TUT_LowerDeck_WindegoKnockedDownAttempt((CHARACTERGUID)_Character)
THEN
DB_TUT_LowerDeck_WindegoKnockedDownAttempt((CHARACTERGUID)_Character);
ProcTutAttemptWindegoKnockdown(_Character);

QRY
QRY_TUT_LowerDeck_GetKnockedDownPeriod((CHARACTERGUID)_Char)
AND
DB_TUT_LowerDeck_KnockedDownPeriod(_Time)
THEN
NOT DB_TUT_LowerDeck_KnockedDownPeriod(_Time);

QRY
QRY_TUT_LowerDeck_GetKnockedDownPeriod((CHARACTERGUID)_Char)
AND
NOT DB_IsPlayer(_Char)
THEN
// if you want NPC behaviour while kncoked down, script it via Osiris. Leaving
// behaviour scripts enabled is too fragile (e.g. default behaviours to flee surfaces)
DB_TUT_LowerDeck_KnockedDownPeriod(-1.0);

QRY
QRY_TUT_LowerDeck_GetKnockedDownPeriod((CHARACTERGUID)_Char)
AND
DB_IsPlayer(_Char)
THEN
// instead of freezing players, we keep them knocked down
DB_TUT_LowerDeck_KnockedDownPeriod(-1.0);

PROC
ProcTutAttemptWindegoKnockdown((CHARACTERGUID)_Char)
AND
_Char != CHARACTERGUID_S_GLO_Windego_d783285f-d3be-4cba-8333-db8976cef182
AND
NOT DB_Dead(_Char)
AND
ObjectIsCharacter(_Char, 1)
AND
QRY_TUT_LowerDeck_GetKnockedDownPeriod(_Char)
AND
DB_TUT_LowerDeck_KnockedDownPeriod(_Time)
THEN
ApplyStatus(_Char,"KNOCKED_DOWN",_Time,1);
SetCanFight(_Char,0);
SetCanJoinCombat(_Char,0);
DB_TUT_LowerDeck_WindegoKnockedDown(_Char);
ProcForceStopDialog(_Char);
ProcCharacterDisableAllCrimes(_Char);
SetVarInteger(_Char, "CanSpeak", 0);

IF
CharacterStatusApplied(_Char,"KNOCKED_DOWN",_)
AND
DB_TUT_LowerDeck_WindegoKnockedDown(_Char)
AND
NOT DB_IsPlayer(_Char)
THEN
// They have to stay down
CharacterSetAnimationOverride(_Char,"knockdown_loop");
CharacterSetCanTrade(_Char,0);
// If they are/were in combat, don't make them walk back to their default position after getting up again
SetStoryEvent(_Char,"ClearPeaceReturn");

IF
CharacterStatusApplied(_Char,"KNOCKED_DOWN",_)
AND
DB_TUT_LowerDeck_WindegoKnockedDown(_Char)
AND
NOT DB_IsPlayer(_Char)
AND
DB_IsPlayer(_Player)
AND
CharacterGetAttitudeTowardsPlayer(_Char,_Player,_Attitude)
AND
_Attitude < 0
AND
IntegerSubtract(0,_Attitude,_AttitudeDelta)
THEN
// Adjust the attitude so potential combat won't restart afterwards (and generics won't trigger)
CharacterAddAttitudeTowardsPlayer(_Char,_Player,_AttitudeDelta);

IF
CharacterStatusApplied(_Char,"KNOCKED_DOWN",_)
AND
DB_TUT_LowerDeck_WindegoKnockedDown(_Char)
AND
NOT DB_IsPlayer(_Char)
THEN
// If they were in combat, stop the combat 
LeaveCombat(_Char);

IF
CharacterStatusApplied(_Char,"KNOCKED_DOWN",_)
AND
DB_TUT_LowerDeck_WindegoKnockedDown(_Char)
AND
NOT DB_TUT_LowerDeck_WindegoKnockedDown_HealthReduced(_Char)
AND
NOT DB_IsPlayer(_Char)
AND
CharacterGetHitpointsPercentage(_Char,_HealthPercentage)
AND
RealSubtract(_HealthPercentage,70.0,_NewHealthPercentage)
AND
RealMax(_NewHealthPercentage,10.0,_FinalNewHealthPercentage)
THEN
// Hurt
CharacterSetHitpointsPercentage(_Char,_FinalNewHealthPercentage);
// Prevent this from happening again should the player knock down the knocked down character themselves later
DB_TUT_LowerDeck_WindegoKnockedDown_HealthReduced(_Char);

//END_REGION //Knock down everyone on the lower deck
//END_REGION //Windego causes explosions and everything goes dark

//REGION Stop default behaviours after Windego casts her spell
IF
CharacterStatusApplied(_Char,"KNOCKED_DOWN",_)
AND
DB_TUT_LowerDeck_WindegoKnockedDown(_Char)
THEN
PROC_TUT_LowerDeck_DisableBehaviour(_Char);

PROC
PROC_TUT_LowerDeck_DisableBehaviour((CHARACTERGUID)_Char)
AND
DB_TUT_LowerDeck_DefaultBehaviours(_Char,_Reaction)
AND
_Reaction != "State_Manager"
THEN
CharacterSetReactionPriority(_Char,_Reaction,0);

PROC
PROC_TUT_LowerDeck_DisableBehaviour((CHARACTERGUID)_Char)
AND
DB_TUT_LowerDeck_DefaultBehaviours(_Char,"State_Manager")
AND
CharacterIsPlayer(_Char,0)
THEN
SetVarFixedString(_Char,"currentState","");
//END_REGION

//REGION After Windego is gone
PROC
PROC_TUT_WindegoWakeUpPlayers()
AND
DB_IsPlayer(_Player)
AND
CharacterIsDead(_Player,0)
THEN
PartySetFlag(_Player,"QuestUpdate_TUT_ShipMurder_AfterWindego");
UserSetFlag(_Player,"QuestUpdate_CORE_Chapter1_TUT_Windego");
PartySetFlag(_Player,"QuestUpdate_TUT_ShipInvestigation_AfterWindego");
PROC_TUT_RemoveWindegoKnockDownEffects(_Player);

IF
ObjectFlagSet("QuestUpdate_TUT_ShipMurder_AfterWindego",(CHARACTERGUID)_Player,_)
AND
DB_IsPlayer(_Player)
AND
ObjectGetFlag(_Player,"QuestUpdate_TUT_ShipInvestigation_Start",1)
THEN
UserSetFlag(_Player,"QuestUpdate_TUT_ShipInvestigation_AfterWindego");


PROC
PROC_TUT_RemoveWindegoKnockDownEffects((CHARACTERGUID)_Char)
AND
HasActiveStatus(_Char,"KNOCKED_DOWN",1)
THEN
RemoveStatus(_Char,"KNOCKED_DOWN");

PROC
PROC_TUT_RemoveWindegoKnockDownEffects((CHARACTERGUID)_Char)
AND
IsTagged(_Char, "KID", 0)
THEN
SetCanFight(_Char,1);
SetCanJoinCombat(_Char,1);

PROC
PROC_TUT_RemoveWindegoKnockDownEffects((CHARACTERGUID)_Char)
AND
IsTagged(_Char, "KID", 0)
AND
IsTagged(_Char, "AVATAR", 0)
AND
IsTagged(_Char, "COMPANION", 0)
THEN
CharacterSetCanTrade(_Char,1);

PROC
PROC_TUT_RemoveWindegoKnockDownEffects((CHARACTERGUID)_Char)
THEN
CharacterSetAnimationOverride(_Char,"");

PROC
PROC_TUT_RemoveWindegoKnockDownEffects((CHARACTERGUID)_Char)
AND
CharacterIsDead(_Char,0)
AND
CharacterGetHitpointsPercentage(_Char,_Percentage)
AND
RealMax(_Percentage,90.0,_NewPercentage)
THEN
NOT DB_TUT_LowerDeck_WindegoKnockedDown(_Char);
// ProcCharacterEnableAllCrimes(_Char);
// Heal to avoid immediately using health potion in voidling combat
CharacterSetHitpointsPercentage(_Char,_NewPercentage);

PROC
PROC_TUT_WindegoWakeUpPlayers()
AND
DB_IsPlayer(_Player)
AND
NOT DB_TUT_VB_LowerDeck_GetUpAfterWindego(1)
THEN
DB_TUT_VB_LowerDeck_GetUpAfterWindego(1);
StartVoiceBark("TUT_VB_LowerDeck_GetUpAfterWindego",_Player);

PROC
PROC_TUT_WindegoWakeUpPlayers()
THEN
NOT DB_TUT_VB_LowerDeck_GetUpAfterWindego(1);

IF
VoiceBarkEnded("TUT_VB_LowerDeck_GetUpAfterWindego",_)
THEN
DB_TUT_VB_LowerDeck_GetUpAfterWindego_Finished(1);

IF
VoiceBarkFailed("TUT_VB_LowerDeck_GetUpAfterWindego")
THEN
DB_TUT_VB_LowerDeck_GetUpAfterWindego_Finished(1);

IF
DB_TUT_VB_LowerDeck_GetUpAfterWindego_Finished(1)
THEN
NOT DB_TUT_VB_LowerDeck_GetUpAfterWindego_Finished(1);

PROC
PROC_TUT_WindegoWakeUpPlayers()
THEN
TimerLaunch("TUT_Tooltips", 1000);

IF
TimerFinished("TUT_Tooltips")
AND
DB_IsPlayer(_Char)
AND
ObjectIsInTrigger(_Char, TRIGGERGUID_S_TUT_ToolTips_15a8b8d7-b115-483b-b3cb-9902a759b959, 1)
THEN
PROC_CheckPlayTut(_Char,"TUT_Tooltips");
//PROC_CheckPlayTut(_Char,"TUT_Tooltips_Controller");
//END_REGION //After Windego is gone

//REGION Origins on the boat
QRY
QRY_TUT_AnyRescueOriginNPCAlive()
AND
DB_TUT_OriginsToRescue(_Origin)
AND
NOT DB_IsPlayer(_Origin)
AND
NOT DB_Dead(_Origin)
THEN
DB_NOOP(1);
//END_REGION

//REGION Clean up
PROC
ProcRegionEnded("TUT_Tutorial_A")
AND
DB_TUT_LowerDeck_WindegoKnockedDown(_Char)
THEN
PROC_TUT_RemoveWindegoKnockDownEffects(_Char);

PROC
ProcRegionEnded("TUT_Tutorial_A")
AND
DB_TUT_LowerDeck_WindegoDestroyItems(_Barrel)
THEN
NOT DB_TUT_LowerDeck_WindegoDestroyItems(_Barrel);

PROC
ProcRegionEnded("TUT_Tutorial_A")
AND
DB_TUT_LowerDeck_WindegoExplosionPoints(_ExplosionPoint,_Skill,_Delay)
THEN
NOT DB_TUT_LowerDeck_WindegoExplosionPoints(_ExplosionPoint,_Skill,_Delay);

PROC
ProcRegionEnded("TUT_Tutorial_A")
AND
DB_TUT_LowerDeck_EscapeItems(_Item)
THEN
NOT DB_TUT_LowerDeck_EscapeItems(_Item);

PROC
ProcRegionEnded("TUT_Tutorial_A")
THEN
// She can fight again in Fort Joy
CharacterSetReactionPriority(CHARACTERGUID_S_GLO_Windego_d783285f-d3be-4cba-8333-db8976cef182,"TutorialFight",0);

PROC
ProcRegionEnded("TUT_Tutorial_A")
AND
DB_IsPlayer(_Player)
AND
CharacterGetAttitudeTowardsPlayer(CHARACTERGUID_S_GLO_Windego_d783285f-d3be-4cba-8333-db8976cef182,_Player,_Attitude)
AND
_Attitude < 0
AND
IntegerSubtract(0,_Attitude,_AddAttitude)
THEN
// Windego's attitude toward the players has decreased due to the combat, but we want her to talk to them again in Fort Joy -> restore
ChangeAttitude(CHARACTERGUID_S_GLO_Windego_d783285f-d3be-4cba-8333-db8976cef182,_Player,_AddAttitude);

//REGION //Save game patching
IF //Save game compatibility for the moved LeakEffects databases.
SavegameLoaded(_Major,_Minor,_Rev,_Build)
AND
QRY_VersionIsOlderThan(_Major,_Minor,_Rev,_Build, 3, 5, 1, 0)
AND
DB_IsPlayer(_Player)
AND
ObjectGetFlag((CHARACTERGUID)_Player,"QuestUpdate_TUT_ShipMurder_AfterWindego",0)
AND
DB_TUT_LowerDeck_LeakEffects(_Effect)
THEN
SetOnStage(_Effect, 0);
//END_REGION

PROC
ProcRegionEnded("TUT_Tutorial_A")
THEN
GoalCompleted;
//END_REGION
EXITSECTION
NOT DB_TUT_LowerDeck_WindegoEventStarted(1);
GlobalClearFlag("TUT_LowerDeck_WindegoHasCastSpell");
ENDEXITSECTION
ParentTargetEdge "TUT_LowerDeck"

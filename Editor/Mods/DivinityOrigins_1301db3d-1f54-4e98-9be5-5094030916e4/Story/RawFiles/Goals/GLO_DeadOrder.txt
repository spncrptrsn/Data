Version 1
SubGoalCombiner SGC_AND
INITSECTION
// Public interface:
//  * DB_GLO_DeadOrder_ID("YourUniqueIdentifier")
//
//    Define if you are interested in keeping track of the order in which players die.
//
//  * PROC_GLO_DeadOrder_CharacterReset((CHARACTERGUID)_Player,(STRING)_Identifier)
//
//    Call to clear the recorded dead order of a particular character
//
//  * QRY_GLO_DeadOrder_Elegible((CHARACTERGUID)_Char,"YourUniqueIdentifier")
//
//    Called to determine whether a particular character that died is elegible for
//    your purpose (it won't keep track of dead players for which this query fails).
//
//  * QRY_GLO_DeadOrder_LastStandingElegibleForUser((INTEGER)_UserID,"YourUniqueIdentifier")
//
//    Call to get the last standing (last died) character of the user with ID _UserID that
//    corresponds to your criteria as defined by your QRY_GLO_DeadOrder_Elegible(). If there
//    is any such character, it will be returned as
//    DB_GLO_DeadOrder_LastStandingElegibleForUser(_UserID,_Char,"YourUniqueIdentifier").
//
//    Note that since _UserID may be invalid in the next frame, this result must be
//    consumed immediately. If no character was found, the query will return false and no
//    DB_GLO_DeadOrder_LastStandingElegibleForUser(_UserID,_Char,"YourUniqueIdentifier")
//    will be set after it returns
//
//    To know when to call this routine for a particular UserID, register for events from
//    from the GLO_AllDead goal.
KBSECTION
IF
DB_GLO_DeadOrder_ID((STRING)_Identifier)
AND
StringConcatenate("GLO_DeadOrder_EligibleDeadOrder_",_Identifier,_CounterName)
THEN
ProcDeclareCounter(_CounterName);

// Make signature of QRY_GLO_DeadOrder_Eligible known
QRY
QRY_GLO_DeadOrder_Eligible((CHARACTERGUID)_Char,"DummyForCompileTime")
THEN
DB_NOOP(1);

//REGION Return the last standing avatar for the specified user (if any)
// We only check the user when actually requesting the last killed avatar,
// as UserIDs can change at any time due to disconnects etc
// Interface: 
//    QRY_GLO_DeadOrder_LastStandingEligibleForUser((INTEGER)_UserID,(STRING)_Identifier)
//      result: returns false if none, sets DB_GLO_DeadOrder_LastStandingEligibleForUser(_UserID,_Avatar,_Identifier) if one

QRY
QRY_GLO_DeadOrder_LastStandingEligibleForUser((INTEGER)_UserID,(STRING)_Identifier)
AND
DB_IsPlayer(_Player)
AND
DB_GLO_DeadOrder_EligibleDeadOrder(_Player,(INTEGER)_Order,_Identifier)
AND
// Use temporary variable to work around Osiris compiler bug (DOSTWO-10671)
CharacterGetReservedUserID(_Player,_Temp)
AND
_Temp == _UserID
THEN
PROC_GLO_DeadOrder_SetLastStandingEligibleForUser(_UserID,_Order,_Player,_Identifier);

// Remove remnant from previous invocation, if any
PROC
PROC_GLO_DeadOrder_SetLastStandingEligibleForUser((INTEGER)_UserID,(INTEGER)_Order,(CHARACTERGUID)_Player,(STRING)_Identifier)
AND
DB_GLO_DeadOrder_LastStandingEligibleForUser(_UserID,_PreviousPlayer,_Identifier)
THEN
NOT DB_GLO_DeadOrder_LastStandingEligibleForUser(_UserID,_PreviousPlayer,_Identifier);

// Initially found result
PROC
PROC_GLO_DeadOrder_SetLastStandingEligibleForUser((INTEGER)_UserID,(INTEGER)_Order,(CHARACTERGUID)_Player,(STRING)_Identifier)
THEN
DB_GLO_DeadOrder_LastStandingEligibleOrderForUser(_UserID,_Order,_Identifier);
DB_GLO_DeadOrder_LastStandingEligibleForUser(_UserID,_Player,_Identifier);

// Look for better result
PROC
PROC_GLO_DeadOrder_SetLastStandingEligibleForUser((INTEGER)_UserID,(INTEGER)_Order,(CHARACTERGUID)_Player,(STRING)_Identifier)
AND
DB_GLO_DeadOrder_EligibleDeadOrder(_NewPlayer,_NewOrder,_Identifier)
AND
DB_GLO_DeadOrder_LastStandingEligibleOrderForUser(_UserID,_CurrentOrder,_Identifier)
AND
_NewOrder > _CurrentOrder
AND
CharacterGetReservedUserID(_NewPlayer,_UserID)
AND
DB_GLO_DeadOrder_LastStandingEligibleForUser(_UserID,_CurrentPlayer,_Identifier)
THEN
NOT DB_GLO_DeadOrder_LastStandingEligibleForUser(_UserID,_CurrentPlayer,_Identifier);
NOT DB_GLO_DeadOrder_LastStandingEligibleOrderForUser(_UserID,_CurrentOrder,_Identifier);
DB_GLO_DeadOrder_LastStandingEligibleForUser(_UserID,_NewPlayer,_Identifier);
DB_GLO_DeadOrder_LastStandingEligibleOrderForUser(_UserID,_NewOrder,_Identifier);

PROC
PROC_GLO_DeadOrder_SetLastStandingEligibleForUser((INTEGER)_UserID,(INTEGER)_Order,(CHARACTERGUID)_Player,(STRING)_Identifier)
AND
DB_GLO_DeadOrder_LastStandingEligibleOrderForUser(_UserID,_NewOrder,_Identifier)
THEN
NOT DB_GLO_DeadOrder_LastStandingEligibleOrderForUser(_UserID,_NewOrder,_Identifier);
//END_REGION //Return the last standing avatar for the specified user (if any)

//REGION Remove resurrected characters that had been recorded
IF
CharacterResurrected(_Player)
AND
DB_GLO_DeadOrder_EligibleDeadOrder(_Player,_DeadOrder,_Identifier)
THEN
NOT DB_GLO_DeadOrder_EligibleDeadOrder(_Player,_DeadOrder,_Identifier);
//END_REGION //Record Eligible characters (avatars and undead companions)

//REGION External clearing of dead order for characters
PROC
PROC_GLO_DeadOrder_CharacterReset((CHARACTERGUID)_Player,(STRING)_Identifier)
AND
DB_GLO_DeadOrder_EligibleDeadOrder(_Player,_DeadOrder,_Identifier)
THEN
NOT DB_GLO_DeadOrder_EligibleDeadOrder(_Player,_DeadOrder,_Identifier);
//END_REGION

//REGION Reset Eligible order counter when all avatars are alive, to avoid eventually overflowing the counter
IF
CharacterResurrected(_Player)
AND
DB_GLO_DeadOrder_ID(_Identifier)
AND
NOT DB_GLO_DeadOrder_EligibleDeadOrder(_,_,_Identifier)
AND
StringConcatenate("GLO_DeadOrder_EligibleDeadOrder_",_Identifier,_CounterName)
THEN
ProcDeclareCounter(_CounterName);
PROC_GLO_DeadOrder_ResetEligibleDeadOrderDB(_Identifier);

QRY
QRY_GLO_DeadOrder_AnyEligibleDead((STRING)_Identifier)
AND
DB_IsPlayer(_Player)
AND
DB_Dead(_Player)
AND
QRY_GLO_DeadOrder_Eligible(_Player,_Identifier)
THEN
DB_NOOP(1);

PROC
PROC_GLO_DeadOrder_ResetEligibleDeadOrderDB((STRING)_Identifier)
AND
DB_GLO_DeadOrder_EligibleDeadOrder(_Player,_Order,_Identifier)
THEN
NOT DB_GLO_DeadOrder_EligibleDeadOrder(_Player,_Order,_Identifier);
//END_REGION //Reset Eligible order counter when all avatars are alive, to avoid eventually overflowing the counter
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "GLO_ThePromise_Activation"

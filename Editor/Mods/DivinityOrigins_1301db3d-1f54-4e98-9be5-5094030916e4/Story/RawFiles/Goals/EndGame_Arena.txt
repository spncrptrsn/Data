Version 1
SubGoalCombiner SGC_AND
INITSECTION
DB_EG_ArenaStarts(TRIGGERGUID_S_EG_ArenaStart_1_9d30cedc-d7b4-44cf-9207-46a02d2927cf);
DB_EG_ArenaStarts(TRIGGERGUID_S_EG_ArenaStart_2_f6c14945-41ca-4f14-8dea-84d740169b32);
DB_EG_ArenaStarts(TRIGGERGUID_S_EG_ArenaStart_3_5abb73f6-e0f9-4670-96b1-501d3ecc2777);
DB_EG_ArenaStarts(TRIGGERGUID_S_EG_ArenaStart_4_80673adb-9d7b-49ba-992d-c2d9a61ace9e);

DB_EG_GlobalDialogs("EG_Arena");
KBSECTION
//REGION Setup
PROC
PROC_EG_LaunchFinalArena()
AND
DB_IsPlayer(_Player)
THEN
ProcForceStopDialog(_Player);

//Break up parties. This should also break up alignments.
PROC
PROC_EG_LaunchFinalArena()
AND
DB_EG_DivinityCompetitor((CHARACTERGUID)_Player)
AND
DB_EG_DivinityCompetitor(_Player2)
AND
_Player != _Player2
AND
CharacterIsInPartyWith(_Player, _Player2, 1)
AND
CharacterGetReservedUserID(_Player2, _User)
THEN
LeaveParty(_User);

//Teleport competitors to the arena.
PROC
PROC_EG_LaunchFinalArena()
AND
DB_EG_DivinityCompetitor(_Player)
AND
DB_EG_ArenaStarts(_Trigger)
AND
NOT DB_EG_DivinityCompetitorTeleported(_Player)
THEN
PlayEffect(_Player,"RS3_FX_GP_ScriptedEvent_HOE_Summoning_01");
TeleportTo(_Player, _Trigger, "EG_DivinityCompetitorEnteredArena", 1);
ProcSetInvulnerable(_Player, 0);
RemoveHarmfulStatuses(_Player);
NOT DB_EG_ArenaStarts(_Trigger);
DB_EG_DivinityCompetitorTeleported(_Player);

//REGION Also teleport any parties that are not attached to any of the competitors.
PROC
PROC_EG_LaunchFinalArena()
AND
DB_IsPlayer(_Player)
AND
NOT DB_EG_DivinityCompetitor(_Player)
AND
DB_EG_ArenaStarts(_Trigger)
AND
NOT QRY_EG_IsInPartyWithCharacterInArena(_Player)
THEN
PlayEffect(_Player,"RS3_FX_GP_ScriptedEvent_HOE_Summoning_01");
TeleportTo(_Player, _Trigger, "", 1);
RemoveHarmfulStatuses(_Player);
ProcSetInvulnerable(_Player, 0);
NOT DB_EG_ArenaStarts(_Trigger);
DB_EG_DivinityCompetitorTeleported(_Player);
SetInArena(_Player, 1);

IF
DB_EG_DivinityCompetitorTeleported(_Player)
AND
DB_IsPlayer(_OtherPlayer)
AND
_Player != _OtherPlayer
AND
CharacterIsInPartyWith(_Player, _OtherPlayer, 1) //At this point, all of the competitors should be in their own parties.
THEN
TeleportTo(_OtherPlayer, _Player);

QRY
QRY_EG_IsInPartyWithCharacterInArena((CHARACTERGUID)_Player)
AND
DB_IsPlayer(_Player2)
AND
CharacterIsInPartyWith(_Player, _Player2, 1)
AND
DB_EG_DivinityCompetitorTeleported(_Player2)
THEN
DB_NOOP(0);
//END_REGION

//Start a dialog to introduce them to the concept.
IF
StoryEvent(_Player, "EG_DivinityCompetitorEnteredArena")
AND
QueryOnlyOnce("EG_DivinityCompetitorEnteredArena")
THEN
Proc_StartDialog(0, "EG_Arena", _Player);

//As soon as the dialog ends, combat starts.
IF
DialogEnded("EG_Arena", _)
AND
DB_EG_DivinityCompetitor(_Player)
THEN
SetInArena(_Player, 1);

IF
DialogEnded("EG_Arena", _)
AND
DB_IsPlayer(_Player)
THEN
SetInArena(_Player, 1);

IF
DialogEnded("EG_Arena", _)
AND
DB_IsPlayer(_Player)
AND
DB_EG_DivinityCompetitor(_Player2)
AND
CharacterIsInPartyWith(_Player, _Player2, 0)
THEN
PROC_EG_MakeArenaHostile(_Player, _Player2);

IF
DialogEnded("EG_Arena", _)
AND
DB_EG_DivinityCompetitor(_Player)
AND
DB_EG_DivinityCompetitor(_Player2)
AND
_Player != _Player2
THEN
PROC_EG_MakeArenaHostile(_Player, _Player2);

IF
DialogEnded("EG_Arena", _)
AND
DB_EG_DivinityCompetitor(_Character)
THEN
SetTag(_Character, "ASCENDANT");
ApplyStatus(_Character, "ASCENDANT", -1.0, 1);

IF
DialogEnded("EG_Arena", _)
AND
DB_EG_DivinityCompetitor(_Character)
AND
NOT DB_IsPlayer(_Character)
THEN
CharacterAddPreferredAiTargetTag(_Character, "ASCENDANT");

PROC
PROC_EG_MakeArenaHostile((CHARACTERGUID)_Player, (CHARACTERGUID)_Player2)
AND
DB_IsPlayer(_Player)
AND
DB_IsPlayer(_Player2)
THEN
MakeWar(_Player, _Player2, 1);

PROC
PROC_EG_MakeArenaHostile((CHARACTERGUID)_Player, (CHARACTERGUID)_Player2)
THEN
CharacterSetRelationIndivFactionToIndivFaction(_Player, _Player2, 0);
CharacterSetRelationIndivFactionToIndivFaction(_Player2, _Player, 0);

PROC
PROC_EG_MakeArenaHostile((CHARACTERGUID)_Player, (CHARACTERGUID)_Player2)
THEN
EnterCombat(_Player, _Player2);
//END_REGION

//REGION Reapply status to resurrected competitor
IF
CharacterResurrected(_Character)
AND
DB_EG_DivinityCompetitor(_Character)
AND
NOT DB_EG_MakingTheChoice(_)
THEN
ApplyStatus(_Character, "ASCENDANT", -1.0, 1);

//END_REGION

//REGION Ending
IF
CharacterDied(_Player)
AND
DB_EG_DivinityCompetitor(_Player)
AND
NOT QRY_EG_MultipleDivinityCompetitorsAlive()
THEN
PROC_EG_ArenaEnded();

QRY
QRY_EG_MultipleDivinityCompetitorsAlive()
AND
DB_EG_DivinityCompetitor(_Player)
AND
CharacterIsDead(_Player, 0)
AND
DB_EG_DivinityCompetitor(_Player2)
AND
_Player != _Player2
AND
CharacterIsDead(_Player2, 0)
THEN
DB_NOOP(0);

QRY
QRY_EG_AnyLivingDivinityCompetitors()
AND
DB_EG_DivinityCompetitor(_Player)
AND
CharacterIsDead(_Player, 0)
THEN
DB_NOOP(0);

PROC
PROC_EG_ArenaEnded() //Function only gets called when amount of survivors < 2, so there are either 1 (and then this one gets to make the choice) or 0.
AND
QRY_EG_AnyLivingDivinityCompetitors()
AND
DB_EG_DivinityCompetitor(_Player)
AND
CharacterIsDead(_Player, 0)
THEN
UserSetFlag((CHARACTERGUID)_Player, "QuestUpdate_CORE_Chapter7_CRYPT_End_TakeFight");
PROC_EG_MakeTheChoice((CHARACTERGUID)_Player);

PROC
PROC_EG_ArenaEnded() //Function only gets called when amount of survivors > 2, so there are either 1 (and then this one gets to make the choice) or 0.
AND
DB_EG_DivinityCompetitor(_Player)
AND
CharacterIsDead(_Player, 1)
THEN
UserSetFlag((CHARACTERGUID)_Player, "QuestUpdate_CORE_Chapter7_CRYPT_End_TakeFail");

PROC
PROC_EG_ArenaEnded()
AND
DB_EG_DivinityCompetitor(_Character)
THEN
ClearTag(_Character, "ASCENDANT");
RemoveStatus(_Character, "ASCENDANT");

PROC
PROC_EG_ArenaEnded()
AND
NOT QRY_EG_AnyLivingDivinityCompetitors()
THEN
DB_NOOP(0);//TODO: God King Ending.
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "EndGame"

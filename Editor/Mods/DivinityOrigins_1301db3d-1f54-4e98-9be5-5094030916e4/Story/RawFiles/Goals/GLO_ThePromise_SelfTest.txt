Version 1
SubGoalCombiner SGC_AND
INITSECTION
DB_GLO_Promise_SelftTestHero((CHARACTERGUID)CHARACTERGUID_S_Player_Sebille_c8d55eaf-e4eb-466a-8f0d-6a9447b5b24c);
DB_GLO_Promise_SelftTestHero(CHARACTERGUID_S_Player_Lohse_bb932b13-8ebf-4ab4-aac0-83e6924e4295);
DB_GLO_Promise_SelftTestHero(CHARACTERGUID_S_Player_RedPrince_a26a1efb-cdc8-4cf3-a7b2-b2f9544add6f);
DB_GLO_Promise_SelftTestHero(CHARACTERGUID_S_Player_Ifan_ad9a3327-4456-42a7-9bf4-7ad60cc9e54f);

//REGION Three avatars die
DB_GLO_Promise_SelfTestThreeAvatars((CHARACTERGUID)CHARACTERGUID_S_Player_Sebille_c8d55eaf-e4eb-466a-8f0d-6a9447b5b24c);
DB_GLO_Promise_SelfTestThreeAvatars(CHARACTERGUID_S_Player_RedPrince_a26a1efb-cdc8-4cf3-a7b2-b2f9544add6f);
DB_GLO_Promise_SelfTestThreeAvatars(CHARACTERGUID_S_Player_Ifan_ad9a3327-4456-42a7-9bf4-7ad60cc9e54f);
//END_REGION
KBSECTION
//REGION Test breaking the promise
//REGION Test breaking the promise
// First execute "oe promise_activate"
// Then either
//   1) kill the host's avatar, and once the debugtext appears about accepting promise, execute either "oe promise_offer_reply_accept" or "oe promise_offer_reply_reject"
//   2) if the host's avatar is Sebille, execute "oe promise_sebille_accept_dialog" and then talk to the needle (this will simulate accepting the promise at an altar)
// With "oe promise_broken" you can simulate breaking the promise, and with "oe promise_relieved" getting rid of the promise without ill consequences

IF
TextEventSet("promise_reset_flags")
AND
CharacterGetHostCharacter(_Player)
THEN
ClearTag(_Player,"PROMISED");
ObjectClearFlag(_Player,"GLO_Promise_TimesResurrectedAtThisLevel_1",0);
ObjectClearFlag(_Player,"GLO_Promise_TimesResurrectedAtThisLevel_2",0);
ObjectClearFlag(_Player,"GLO_Promise_TimesResurrectedAtThisLevel_3",0);
ObjectClearFlag(_Player,"GLO_Promise_PromiseBreaker",0);
NOT DB_GLO_Promise_ZombieChicken(_Player);

IF
TextEventSet("promise_sebille_accept_dialog")
THEN
DB_GLO_Promise_AcceptPromiseDialog("GLO_SebilleNeedle");
ObjectSetFlag(CHARACTERGUID_S_Player_Sebille_c8d55eaf-e4eb-466a-8f0d-6a9447b5b24c,"GLO_Promise_AcceptedPromise");

IF
TextEventSet("promise_offer_reply_accept")
AND
CharacterGetHostCharacter(_Player)
THEN
ObjectSetFlag(_Player,"GLO_Promise_AcceptedPromise");
PROC_GLO_Promise_HandleOfferReply(_Player);

IF
TextEventSet("promise_offer_reply_reject")
AND
CharacterGetHostCharacter(_Player)
THEN
PROC_GLO_Promise_HandleOfferReply(_Player);

IF
TextEventSet("promise_accepted")
AND
CharacterGetHostCharacter(_Player)
AND
CharacterGetReservedUserID(_Player,_UserID)
THEN
PROC_GLO_Promise_AcceptedPromise(_Player);

IF
TextEventSet("promise_broken")
AND
CharacterGetHostCharacter(_Player)
THEN
PROC_GLO_Promise_Broken(_Player,1);

IF
TextEventSet("promise_relieved")
AND
CharacterGetHostCharacter(_Player)
THEN
PROC_GLO_Promise_Broken(_Player,0);
//END_REGION

//REGION Test last PROMISED standing logic
// This test requires that you start the game with a custom hero.
// First, execute "oe activate_promise"
// Next, execute "oe Recruit_All" once
// Finally, execute "oe promise_selftest" as many times as you want.
// It completes successfully if it does not throw any asserts defined in this file
IF
TextEventSet("resurrect_all")
AND
CharacterGetHostCharacter(_Player)
THEN
PROC_GLO_PromiseSelfTest_ResurrectAllHeroes(_Player,"");

IF
TextEventSet("kill_all")
AND
CharacterGetHostCharacter(_Player)
THEN
PROC_GLO_PromiseSelfTest_KillAllHeroes(_Player,"");

IF
TextEventSet("promise_selftest")
THEN
PROC_GLO_PromiseSelfTest_RunAll();

PROC
PROC_GLO_PromiseSelfTest_RunAll()
THEN
PROC_GLO_PromiseSelfTest_LastStandingEligible();

//REGION LastStandingEligible
PROC
PROC_GLO_PromiseSelfTest_LastStandingEligible()
AND
CharacterGetHostCharacter(_Player)
AND
CharacterGetReservedUserID(_Player,_UserID)
AND
QRY_GLO_DeadOrder_LastStandingEligibleForUser(_UserID,"GLO_ThePromise")
THEN
// Nobody is dead yet -> query should return false
DebugBreak("QRY_GLO_Promise_LastStandingEligibleForUser() returns true even though everyone is alive");

PROC
PROC_GLO_PromiseSelfTest_LastStandingEligible()
AND
CharacterGetHostCharacter(_Player)
AND
CharacterGetReservedUserID(_Player,_UserID)
AND
DB_GLO_DeadOrder_LastStandingEligibleOrderForUser(_,_,"GLO_ThePromise")
THEN
// After QRY_GLO_Promise_LastStandingEligibleForUser() returned false, DB_GLO_Promise_LastStandingEligibleOrderForUser should not be set
DebugBreak("DB_GLO_DeadOrder_LastStandingEligibleOrderForUser(_,_,GLO_Promise) set even though everyone is alive");

//REGION Call LastStandingEligible tests
PROC
PROC_GLO_PromiseSelfTest_LastStandingEligible()
THEN
PROC_GLO_PromiseSelfTest_LastStandingEligibleNoAvatars("PROC_GLO_PromiseSelfTest_LastStandingEligibleNoAvatars_Finished");

IF
StoryEvent(_Player,"PROC_GLO_PromiseSelfTest_LastStandingEligibleNoAvatars_Finished")
THEN
PROC_GLO_PromiseSelfTest_LastStandingEligibleOneAvatar("PROC_GLO_PromiseSelfTest_LastStandingEligibleOneAvatar_Finished");

IF
StoryEvent(_Player,"PROC_GLO_PromiseSelfTest_LastStandingEligibleOneAvatar_Finished")
THEN
PROC_GLO_PromiseSelfTest_LastStandingEligibleThreeAvatars("PROC_GLO_PromiseSelfTest_LastStandingEligibleThreeAvatars_Finished");


//END_REGION

//REGION LastStandingEligible without any avatars
PROC
PROC_GLO_PromiseSelfTest_LastStandingEligibleNoAvatars((STRING)_FinishEvent)
AND
CharacterGetHostCharacter(_Player)
THEN
DB_PROC_GLO_PromiseSelfTest_LastStandingEligibleNoAvatars_FinishEvent(_FinishEvent);
PROC_GLO_PromiseSelfTest_KillAllHeroes(_Player,"PROC_GLO_PromiseSelfTest_LastStandingEligibleNoAvatars_AllDead1");

IF
StoryEvent((CHARACTERGUID)_Player,"PROC_GLO_PromiseSelfTest_LastStandingEligibleNoAvatars_AllDead1")
AND
CharacterGetReservedUserID(_Player,_UserID)
AND
QRY_GLO_DeadOrder_LastStandingEligibleForUser(_UserID,"GLO_ThePromise")
THEN
DebugBreak("QRY_GLO_Promise_LastStandingEligibleForUser() returns true even though no PROMISED died");

IF
StoryEvent((CHARACTERGUID)_Player,"PROC_GLO_PromiseSelfTest_LastStandingEligibleNoAvatars_AllDead1")
AND
CharacterGetReservedUserID(_Player,_UserID)
AND
DB_GLO_DeadOrder_LastStandingEligibleOrderForUser(_,_,"GLO_ThePromise")
THEN
DebugBreak("DB_GLO_Promise_LastStandingEligibleOrderForUser(_,_) is set even though no PROMISED died");

IF
StoryEvent((CHARACTERGUID)_Player,"PROC_GLO_PromiseSelfTest_LastStandingEligibleNoAvatars_AllDead1")
AND
DB_PROC_GLO_PromiseSelfTest_LastStandingEligibleNoAvatars_FinishEvent(_FinishEvent)
THEN
NOT DB_PROC_GLO_PromiseSelfTest_LastStandingEligibleNoAvatars_FinishEvent(_FinishEvent);
PROC_GLO_PromiseSelfTest_ResurrectAllHeroes(_Player,_FinishEvent);


//END_REGION

//REGION LastStandingEligible with one PROMISED
PROC
PROC_GLO_PromiseSelfTest_LastStandingEligibleOneAvatar((STRING)_FinishEvent)
AND
CharacterGetHostCharacter(_Player)
THEN
DB_PROC_GLO_PromiseSelfTest_LastStandingEligibleOneAvatar_FinishEvent(_FinishEvent);
// Lohse has the AVATAR tag, the rest not
SetTag(CHARACTERGUID_S_Player_Lohse_bb932b13-8ebf-4ab4-aac0-83e6924e4295,"PROMISED");
PROC_GLO_PromiseSelfTest_KillAllHeroes(_Player,"PROC_GLO_PromiseSelfTest_LastStandingEligibleNoAvatars_AllDead2");

IF
StoryEvent((CHARACTERGUID)_Player,"PROC_GLO_PromiseSelfTest_LastStandingEligibleNoAvatars_AllDead2")
AND
CharacterGetReservedUserID(_Player,_UserID)
AND
NOT QRY_GLO_DeadOrder_LastStandingEligibleForUser(_UserID,"GLO_ThePromise")
THEN
DebugBreak("QRY_GLO_DeadOrder_LastStandingEligibleForUser(,GLO_Promise) returns false even though one PROMISED died");

IF
StoryEvent((CHARACTERGUID)_Player,"PROC_GLO_PromiseSelfTest_LastStandingEligibleNoAvatars_AllDead2")
AND
CharacterGetReservedUserID(_Player,_UserID)
AND
QRY_GLO_DeadOrder_LastStandingEligibleForUser(_UserID,"GLO_ThePromise")
AND
SysCount("DB_GLO_DeadOrder_EligibleDeadOrder",3,_Count)
AND
_Count != 1
THEN
DebugBreak("Either no or more than one DB_GLO_DeadOrder_EligibleDeadOrder(GLO_Promise) entries even though exactly one PROMISED died");

IF
StoryEvent((CHARACTERGUID)_Player,"PROC_GLO_PromiseSelfTest_LastStandingEligibleNoAvatars_AllDead2")
AND
CharacterGetReservedUserID(_Player,_UserID)
AND
QRY_GLO_DeadOrder_LastStandingEligibleForUser(_UserID,"GLO_ThePromise")
AND
NOT DB_GLO_DeadOrder_LastStandingEligibleForUser(_UserID,CHARACTERGUID_S_Player_Lohse_bb932b13-8ebf-4ab4-aac0-83e6924e4295,"GLO_ThePromise")
THEN
DebugBreak("DB_GLO_DeadOrder_LastStandingEligibleForUser(_UserID,Lohse,GLO_Promise) not set even though Lohse died as PROMISED. We shall remember her forever. Amen.");

IF
StoryEvent((CHARACTERGUID)_Player,"PROC_GLO_PromiseSelfTest_LastStandingEligibleNoAvatars_AllDead2")
AND
DB_PROC_GLO_PromiseSelfTest_LastStandingEligibleOneAvatar_FinishEvent(_FinishEvent)
THEN
ClearTag(CHARACTERGUID_S_Player_Lohse_bb932b13-8ebf-4ab4-aac0-83e6924e4295,"PROMISED");
NOT DB_PROC_GLO_PromiseSelfTest_LastStandingEligibleOneAvatar_FinishEvent(_FinishEvent);
PROC_GLO_PromiseSelfTest_ResurrectAllHeroes(_Player,_FinishEvent);
//END_REGION

//REGION LastStandingEligible with three avatars
PROC
PROC_GLO_PromiseSelfTest_LastStandingEligibleThreeAvatars((STRING)_FinishEvent)
AND
DB_GLO_Promise_SelfTestThreeAvatars(_Avatar)
THEN
SetTag(_Avatar,"PROMISED");

PROC
PROC_GLO_PromiseSelfTest_LastStandingEligibleThreeAvatars((STRING)_FinishEvent)
AND
CharacterGetHostCharacter(_Player)
THEN
DB_PROC_GLO_PromiseSelfTest_LastStandingEligibleOneAvatar_FinishEvent(_FinishEvent);
PROC_GLO_PromiseSelfTest_KillAllHeroes(_Player,"PROC_GLO_PromiseSelfTest_LastStandingEligibleNoAvatars_AllDead3");

// Keep track of last died avatar for verification purposes
IF
CharacterDied(_Char)
AND
DB_PROC_GLO_PromiseSelfTest_LastStandingEligibleOneAvatar_FinishEvent(_)
AND
IsTagged(_Char,"PROMISED",1)
AND
DB_PROC_GLO_PromiseSelfTest_LastStandingEligibleOneAvatar_LastDied(_OtherChar)
THEN
NOT DB_PROC_GLO_PromiseSelfTest_LastStandingEligibleOneAvatar_LastDied(_OtherChar);

IF
CharacterDied(_Char)
AND
DB_PROC_GLO_PromiseSelfTest_LastStandingEligibleOneAvatar_FinishEvent(_)
AND
IsTagged(_Char,"PROMISED",1)
THEN
DB_PROC_GLO_PromiseSelfTest_LastStandingEligibleOneAvatar_LastDied(_Char);

IF
StoryEvent((CHARACTERGUID)_Player,"PROC_GLO_PromiseSelfTest_LastStandingEligibleNoAvatars_AllDead3")
AND
CharacterGetReservedUserID(_Player,_UserID)
AND
NOT QRY_GLO_DeadOrder_LastStandingEligibleForUser(_UserID,"GLO_ThePromise")
THEN
DebugBreak("QRY_GLO_Promise_LastStandingEligibleForUser() returns false even though three PROMISED died");

IF
StoryEvent((CHARACTERGUID)_Player,"PROC_GLO_PromiseSelfTest_LastStandingEligibleNoAvatars_AllDead3")
AND
CharacterGetReservedUserID(_Player,_UserID)
AND
QRY_GLO_DeadOrder_LastStandingEligibleForUser(_UserID,"GLO_ThePromise")
AND
SysCount("DB_GLO_DeadOrder_EligibleDeadOrder",3,_Count)
AND
_Count != 3
THEN
DebugBreak("Not exactly 3 DB_GLO_DeadOrder_EligibleDeadOrder(GLO_Promise) entries even though exactly three PROMISED died");

IF
StoryEvent((CHARACTERGUID)_Player,"PROC_GLO_PromiseSelfTest_LastStandingEligibleNoAvatars_AllDead3")
AND
CharacterGetReservedUserID(_Player,_UserID)
AND
QRY_GLO_DeadOrder_LastStandingEligibleForUser(_UserID,"GLO_ThePromise")
AND
DB_GLO_Promise_SelfTestThreeAvatars(_Avatar)
AND
NOT DB_GLO_DeadOrder_EligibleDeadOrder(_Avatar,_,"GLO_ThePromise")
THEN
DebugBreak("DB_GLO_DeadOrder_EligibleDeadOrder(_Avatar,_,GLO_Promise) not set even though that character died as PROMISED.");

IF
StoryEvent((CHARACTERGUID)_Player,"PROC_GLO_PromiseSelfTest_LastStandingEligibleNoAvatars_AllDead3")
AND
CharacterGetReservedUserID(_Player,_UserID)
AND
QRY_GLO_DeadOrder_LastStandingEligibleForUser(_UserID,"GLO_ThePromise")
AND
DB_GLO_Promise_SelftTestHero(_Avatar)
AND
NOT DB_GLO_Promise_SelfTestThreeAvatars(_Avatar)
AND
DB_GLO_DeadOrder_EligibleDeadOrder(_Avatar,_,"GLO_ThePromise")
THEN
DebugBreak("DB_GLO_DeadOrder_EligibleDeadOrder(_Char,_,GLO_Promise) set even though that character did not die as a PROMISED this time.");

IF
StoryEvent((CHARACTERGUID)_Player,"PROC_GLO_PromiseSelfTest_LastStandingEligibleNoAvatars_AllDead3")
AND
CharacterGetReservedUserID(_Player,_UserID)
AND
QRY_GLO_DeadOrder_LastStandingEligibleForUser(_UserID,"GLO_ThePromise")
AND
DB_PROC_GLO_PromiseSelfTest_LastStandingEligibleOneAvatar_LastDied(_LastDied)
AND
NOT DB_GLO_DeadOrder_LastStandingEligibleForUser(_UserID,_LastDied,"GLO_ThePromise")
THEN
DebugBreak("DB_GLO_DeadOrder_LastStandingEligibleForUser(_UserID,_LastDied,GLO_Promise) not set even though that character did die last as PROMISED.");

IF
StoryEvent((CHARACTERGUID)_Player,"PROC_GLO_PromiseSelfTest_LastStandingEligibleNoAvatars_AllDead3")
AND
CharacterGetReservedUserID(_Player,_UserID)
AND
QRY_GLO_DeadOrder_LastStandingEligibleForUser(_UserID,"GLO_ThePromise")
AND
DB_GLO_DeadOrder_LastStandingEligibleForUser(_UserID,_LastDied,"GLO_ThePromise")
AND
NOT DB_PROC_GLO_PromiseSelfTest_LastStandingEligibleOneAvatar_LastDied(_LastDied)
THEN
DebugBreak("DB_GLO_DeadOrder_LastStandingEligibleForUser(_UserID,_Char,GLO_Promise) set even though that character did not die last as PROMISED.");

IF
StoryEvent((CHARACTERGUID)_Player,"PROC_GLO_PromiseSelfTest_LastStandingEligibleNoAvatars_AllDead3")
AND
DB_GLO_Promise_SelfTestThreeAvatars(_Avatar)
THEN
ClearTag(_Avatar,"PROMISED");

IF
StoryEvent((CHARACTERGUID)_Player,"PROC_GLO_PromiseSelfTest_LastStandingEligibleNoAvatars_AllDead3")
AND
DB_PROC_GLO_PromiseSelfTest_LastStandingEligibleOneAvatar_FinishEvent(_FinishEvent)
THEN
NOT DB_PROC_GLO_PromiseSelfTest_LastStandingEligibleOneAvatar_FinishEvent(_FinishEvent);
PROC_GLO_PromiseSelfTest_ResurrectAllHeroes(_Player,_FinishEvent);
//END_REGION


//END_REGION

//REGION Helpers

//REGION Kill all players
PROC
PROC_GLO_PromiseSelfTest_KillAllHeroes((GUIDSTRING)_EventObject,(STRING)_EventWhenDead)
THEN
ProcDeclareCounter("PROC_GLO_PromiseSelfTest_KillAllHeroes_Died");
DB_PROC_GLO_PromiseSelfTest_KillAllHeroes_FinishEvent(_EventObject,_EventWhenDead);

PROC
PROC_GLO_PromiseSelfTest_KillAllHeroes((GUIDSTRING)_EventObject,(STRING)_EventWhenDead)
AND
DB_GLO_Promise_SelftTestHero(_Player)
AND
NOT DB_Dead(_Player)
THEN
CharacterDie(_Player,0,"DoT");
ProcIncreaseCounter("PROC_GLO_PromiseSelfTest_KillAllHeroes_Died");
DB_PROC_GLO_PromiseSelfTest_KillAllHeroes_Killed_One_Character(1);

PROC
PROC_GLO_PromiseSelfTest_KillAllHeroes((GUIDSTRING)_EventObject,(STRING)_EventWhenDead)
AND
NOT DB_PROC_GLO_PromiseSelfTest_KillAllHeroes_Killed_One_Character(1)
THEN
NOT DB_PROC_GLO_PromiseSelfTest_KillAllHeroes_FinishEvent(_EventObject,_EventWhenDead);
SetStoryEvent(_EventObject,_EventWhenDead);

IF
CharacterDied(_Char)
AND
DB_GlobalCounter("PROC_GLO_PromiseSelfTest_KillAllHeroes_Died",_)
THEN
ProcDecreaseCounter("PROC_GLO_PromiseSelfTest_KillAllHeroes_Died");

IF
DB_GlobalCounter("PROC_GLO_PromiseSelfTest_KillAllHeroes_Died",_Value)
AND
DB_PROC_GLO_PromiseSelfTest_KillAllHeroes_Killed_One_Character(1)
AND
_Value == 0
AND
DB_PROC_GLO_PromiseSelfTest_KillAllHeroes_FinishEvent(_EventObject,_EventWhenResurrected)
THEN
NOT DB_PROC_GLO_PromiseSelfTest_KillAllHeroes_Killed_One_Character(1);
NOT DB_PROC_GLO_PromiseSelfTest_KillAllHeroes_FinishEvent(_EventObject,_EventWhenResurrected);
ProcRemoveCounter("PROC_GLO_PromiseSelfTest_LastStandingEligibleNoAvatars_Died");
SetStoryEvent(_EventObject,_EventWhenResurrected);
//END_REGION

//REGION Resurrect all players
PROC
PROC_GLO_PromiseSelfTest_ResurrectAllHeroes((GUIDSTRING)_EventObject,(STRING)_EventWhenResurrected)
THEN
ProcDeclareCounter("PROC_GLO_PromiseSelfTest_ResurrectAllHeroes_Resurrected");
DB_PROC_GLO_PromiseSelfTest_ResurrectAllHeroes_FinishEvent(_EventObject,_EventWhenResurrected);

PROC
PROC_GLO_PromiseSelfTest_ResurrectAllHeroes((GUIDSTRING)_EventObject,(STRING)_EventWhenResurrected)
AND
DB_GLO_Promise_SelftTestHero(_Player)
AND
DB_Dead(_Player)
THEN
CharacterResurrect(_Player);
ProcIncreaseCounter("PROC_GLO_PromiseSelfTest_ResurrectAllHeroes_Resurrected");
DB_PROC_GLO_PromiseSelfTest_ResurrectAllHeroes_Resurrected_One(1);

PROC
PROC_GLO_PromiseSelfTest_ResurrectAllHeroes((GUIDSTRING)_EventObject,(STRING)_EventWhenResurrected)
AND
NOT DB_PROC_GLO_PromiseSelfTest_ResurrectAllHeroes_Resurrected_One(1)
THEN
SetStoryEvent(_EventObject,_EventWhenResurrected);

IF
CharacterResurrected(_)
AND
DB_GlobalCounter("PROC_GLO_PromiseSelfTest_ResurrectAllHeroes_Resurrected",_)
THEN
ProcDecreaseCounter("PROC_GLO_PromiseSelfTest_ResurrectAllHeroes_Resurrected");

IF
DB_GlobalCounter("PROC_GLO_PromiseSelfTest_ResurrectAllHeroes_Resurrected",_Value)
AND
DB_PROC_GLO_PromiseSelfTest_ResurrectAllHeroes_Resurrected_One(1)
AND
_Value == 0
AND
DB_PROC_GLO_PromiseSelfTest_ResurrectAllHeroes_FinishEvent(_EventObject,_EventWhenResurrected)
THEN
ProcObjectTimer(_EventObject,"DB_PROC_GLO_PromiseSelfTest_ResurrectAllHeroes_FinishEvent",500);

PROC
ProcObjectTimerFinished(_EventObject,"DB_PROC_GLO_PromiseSelfTest_ResurrectAllHeroes_FinishEvent")
AND
DB_PROC_GLO_PromiseSelfTest_ResurrectAllHeroes_FinishEvent(_EventObject,_EventWhenResurrected)
THEN
NOT DB_PROC_GLO_PromiseSelfTest_ResurrectAllHeroes_Resurrected_One(1);
NOT DB_PROC_GLO_PromiseSelfTest_ResurrectAllHeroes_FinishEvent(_EventObject,_EventWhenResurrected);
ProcRemoveCounter("PROC_GLO_PromiseSelfTest_ResurrectAllHeroes_Resurrected");
SetStoryEvent(_EventObject,_EventWhenResurrected);
//END_REGION
//END_REGION
//END_REGION Last avatar standing

//REGION Promise effects debug
IF
TextEventSet("prmseff")
AND
GetTextEventParamInteger(1,1)
AND
CharacterGetHostCharacter(_Player)
THEN
Proc_GLO_Promise_Effect_Prepare(_Player);

IF
TextEventSet("prmseff")
AND
GetTextEventParamInteger(1,2)
AND
CharacterGetHostCharacter(_Player)
THEN
Proc_GLO_Promise_Effect_Accept(_Player);

IF
TextEventSet("brkeff")
AND
GetTextEventParamInteger(1,1)
AND
CharacterGetHostCharacter(_Player)
THEN
Proc_GLO_PromiseBreak_Effect_Prepare(_Player);

IF
TextEventSet("brkeff")
AND
GetTextEventParamInteger(1,2)
AND
CharacterGetHostCharacter(_Player)
THEN
Proc_GLO_PromiseBreak_Effect_Accept(_Player);

IF
TextEventSet("prmsstop")
AND
CharacterGetHostCharacter(_Player)
THEN
Proc_GLO_Promise_Effect_Stop(_Player);
Proc_GLO_PromiseBreak_Effect_Stop(_Player);

// Full test
IF
TextEventSet("prmsfull")
AND
DB_IsPlayer(_Player)
THEN
CharacterRecruitCharacter(_Player,CHARACTERGUID_S_Player_Fane_02a77f1f-872b-49ca-91ab-32098c443beb);
SetTag(CHARACTERGUID_S_Player_Fane_02a77f1f-872b-49ca-91ab-32098c443beb,"AVATAR");
CharacterAddSkill(CHARACTERGUID_S_Player_Fane_02a77f1f-872b-49ca-91ab-32098c443beb,"Shout_Quest_PromiseBreak");
TeleportTo(CHARACTERGUID_S_Player_Fane_02a77f1f-872b-49ca-91ab-32098c443beb,TRIGGERGUID_S_CoS_Academy_MainEntrance_Point_71c8beb7-1859-40ff-ba9e-06d7b58c9fe0);
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "GLO_ThePromise_Activation"

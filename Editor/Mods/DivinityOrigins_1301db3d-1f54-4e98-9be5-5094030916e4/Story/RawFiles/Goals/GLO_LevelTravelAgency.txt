Version 1
SubGoalCombiner SGC_AND
INITSECTION
// Usage
//  1) Define DBs *in the GLO_LevelTravelers goal* of the form
//   DB_GLO_LevelTraveler((STRING)_Region,(CHARACTERGUID)_Char,(TRIGGERGUID)_Dest,(STRING)_Dialog,(STRING)_StateManagerStateIfNotEmpty,(TRIGGERGUID)_MustBeInSourceTriggerIfNotNull,(INTEGER)_boolCanBeDead)
//
//   _Region: when this level gets loaded, teleport the character
//   _Char: character to teleport
//   _Dest: trigger to which to teleport the character
//   _Dialog: DB_Dialog to set for the character after teleporting
//   _StateManagerStateIfNotEmpty: if not "", the currentState FIXEDVARSTRING variable of the character is set to this value after teleporting
//   _MustBeInSourceTriggerIfNotNull: if not null, the character only gets teleported if it was in that trigger
//   _boolCanBeDead: if 0, the character is only teleported if it is alive. If 1, it is teleported whether it is alive or dead. Other values are undefined.
//
// 2) QRY_GLO_LevelTravelAgency_ForbidBoardingTo((CHARACTERGUID)_Char,(STRING)_Region) is called before a character gets teleported. If it passes,
//  entrance to _Region for _Char is forbidden and no teleportation shall occur under this goal's watch.
//
// 3) After a character has been teleported, the following callback is invoked so you can perform further initialisation for the character if necessary:
//  PROC_GLO_LevelTravelAgency_Arrived((CHARACTERGUID)_Char,(STRING)_Region)

// Dummy for type definition
DB_GLO_LevelTravelerName(NULL_00000000-0000-0000-0000-000000000000,"");

// Level transitions
DB_GLO_LevelTransition("TUT_Tutorial_A","FJ_FortJoy_Main");
DB_GLO_LevelTransition("FJ_FortJoy_Main","LV_HoE_Main");
DB_GLO_LevelTransition("LV_HoE_Main","RC_Main");
DB_GLO_LevelTransition("RC_Main","CoS_Main");
DB_GLO_LevelTransition("CoS_Main","CoS_Main_Ending");
DB_GLO_LevelTransition("CoS_Main_Ending","ARX_Main");
KBSECTION
// Undefine dummy
IF
DB_GLO_LevelTravelerName(NULL_00000000-0000-0000-0000-000000000000,"")
THEN
NOT DB_GLO_LevelTravelerName(NULL_00000000-0000-0000-0000-000000000000,"");

//REGION Record which characters are in which triggers when ending a region
PROC
ProcRegionEnded(_CurrentRegion)
AND
DB_GLO_LevelTraveler_IsInTrigger(_Char,_AnyTrigger)
THEN
NOT DB_GLO_LevelTraveler_IsInTrigger(_Char,_AnyTrigger);

PROC
ProcRegionEnded(_CurrentRegion)
AND
DB_GLO_LevelTraveler((STRING)_Region,(CHARACTERGUID)_Char,(TRIGGERGUID)_Dest,(STRING)_Dialog,(STRING)_StateManagerStateIfNotEmpty,(TRIGGERGUID)_MustBeInSourceTriggerIfNotNull,(INTEGER)_boolCanBeDead)
AND
_MustBeInSourceTriggerIfNotNull != NULL_00000000-0000-0000-0000-000000000000
AND
DB_CurrentLevel(_CurrentRegion)
AND
// Avoid asserts if local trigger in another level
ObjectExists(_MustBeInSourceTriggerIfNotNull,1)
AND
GetRegion(_MustBeInSourceTriggerIfNotNull,_CurrentRegion)
AND
ObjectIsInTrigger(_Char,_MustBeInSourceTriggerIfNotNull,1)
THEN
DB_GLO_LevelTraveler_IsInTrigger(_Char,_MustBeInSourceTriggerIfNotNull);
//END_REGION


//REGION Teleport to new region if conditions are fulfilled
// GameStarted instead of RegionStarted, so that QRY_GLO_LevelTravelAgency_ForbidBoardingTo()/PROC_GLO_LevelTravelAgency_Arrived()
// helpers that may become available after RegionStarted() are visible
IF
GameStarted(_Region,_)
AND
DB_GLO_LevelTraveler((STRING)_Region,(CHARACTERGUID)_Char,(TRIGGERGUID)_Dest,(STRING)_Dialog,(STRING)_StateManagerStateIfNotEmpty,(TRIGGERGUID)_MustBeInSourceTriggerIfNotNull,(INTEGER)_boolCanBeDead)
THEN
PROC_GLO_LevelTravelAgencyCheckTeleportOnlyOnce(_Region,_Char,_Dest,_Dialog,_MustBeInSourceTriggerIfNotNull,_StateManagerStateIfNotEmpty,_boolCanBeDead);

PROC
PROC_GLO_LevelTravelAgencyCheckTeleportOnlyOnce((STRING)_Region,(CHARACTERGUID)_Char,(TRIGGERGUID)_Dest,(STRING)_Dialog,(TRIGGERGUID)_MustBeInSourceTriggerIfNotNull,(STRING)_StateManagerStateIfNotEmpty,(INTEGER)_boolCanBeDead)
AND
NOT DB_GLO_LevelTravelAgency_TraveledTo(_Char,_Region)
THEN
DB_GLO_LevelTravelAgency_TraveledTo(_Char,_Region);
PROC_GLO_LevelTravelAgencyCheckTeleport(_Region,_Char,_Dest,_Dialog,_MustBeInSourceTriggerIfNotNull,_StateManagerStateIfNotEmpty,_boolCanBeDead);

PROC
PROC_GLO_LevelTravelAgencyCheckTeleport((STRING)_Region,(CHARACTERGUID)_Char,(TRIGGERGUID)_Dest,(STRING)_Dialog,(TRIGGERGUID)_MustBeInSourceTriggerIfNotNull,(STRING)_StateManagerStateIfNotEmpty,(INTEGER)_boolCanBeDead)
AND
NOT QRY_GLO_LevelTravelAgency_ForbidBoardingTo(_Char,_Region)
AND
CharacterIsDead(_Char,_IsDead)
AND
_IsDead <= _boolCanBeDead
AND
// Ensure the NPC hasn't been teleported to this region by other means yet (mostly through debug book usage)
NOT GetRegion(_Char,_Region)
THEN
PROC_GLO_LevelTravelAgencyTeleportIfInSourceTrigger(_Region,_Char,_Dest,_Dialog,_MustBeInSourceTriggerIfNotNull,_StateManagerStateIfNotEmpty);

PROC
PROC_GLO_LevelTravelAgencyTeleportIfInSourceTrigger((STRING)_Region,(CHARACTERGUID)_Char,(TRIGGERGUID)_Dest,(STRING)_Dialog,(TRIGGERGUID)_MustBeInSourceTriggerIfNotNull,(STRING)_StateManagerStateIfNotEmpty)
AND
_MustBeInSourceTriggerIfNotNull == NULL_00000000-0000-0000-0000-000000000000
THEN
DB_GLO_LevelTravelAgency_DoTeleport(1);

PROC
PROC_GLO_LevelTravelAgencyTeleportIfInSourceTrigger((STRING)_Region,(CHARACTERGUID)_Char,(TRIGGERGUID)_Dest,(STRING)_Dialog,(TRIGGERGUID)_MustBeInSourceTriggerIfNotNull,(STRING)_StateManagerStateIfNotEmpty)
AND
_MustBeInSourceTriggerIfNotNull != NULL_00000000-0000-0000-0000-000000000000
AND
DB_GLO_LevelTraveler_IsInTrigger(_Char,_MustBeInSourceTriggerIfNotNull)
THEN
DB_GLO_LevelTravelAgency_DoTeleport(1);

PROC
PROC_GLO_LevelTravelAgencyTeleportIfInSourceTrigger((STRING)_Region,(CHARACTERGUID)_Char,(TRIGGERGUID)_Dest,(STRING)_Dialog,(TRIGGERGUID)_MustBeInSourceTriggerIfNotNull,(STRING)_StateManagerStateIfNotEmpty)
AND
DB_GLO_LevelTravelAgency_DoTeleport(1)
AND
ObjectIsOnStage(_Char,0)
THEN
SetOnStage(_Char,1);

PROC
PROC_GLO_LevelTravelAgencyTeleportIfInSourceTrigger((STRING)_Region,(CHARACTERGUID)_Char,(TRIGGERGUID)_Dest,(STRING)_Dialog,(TRIGGERGUID)_MustBeInSourceTriggerIfNotNull,(STRING)_StateManagerStateIfNotEmpty)
AND
DB_GLO_LevelTravelAgency_DoTeleport(1)
THEN
NOT DB_GLO_LevelTravelAgency_DoTeleport(1);
PROC_Helper_SafeTeleportTo(_Char,_Dest);
PROC_RemoveDialogFromCharacter(_Char);
DB_Dialogs(_Char,_Dialog);
PROC_GLO_LevelTravelAgencySetState(_Char,_StateManagerStateIfNotEmpty);
PROC_GLO_LevelTravelAgency_Arrived(_Char,_Region);

PROC
PROC_GLO_LevelTravelAgencySetState((CHARACTERGUID)_Char,(STRING)_StateManagerStateIfNotEmpty)
AND
_StateManagerStateIfNotEmpty != ""
THEN
SetVarFixedString(_Char,"currentState",_StateManagerStateIfNotEmpty);

// Dummies, can be hooked by others to perform additional checks and initialisation
QRY
QRY_GLO_LevelTravelAgency_ForbidBoardingTo((CHARACTERGUID)NULL_00000000-0000-0000-0000-000000000000,(STRING)_Region)
THEN
DB_NOOP(1);

PROC
PROC_GLO_LevelTravelAgency_Arrived((CHARACTERGUID)_Char,(STRING)_Region)
THEN
DB_GLO_LevelTravelAgency_Teleported(_Char,_Region);
//END_REGION

//REGION HasMet tracking
//Sanity check
IF
DB_GLO_LevelTraveler(_,_Char,_,_,_,_,_)
AND
NOT DB_GLO_LevelTravelerName(_Char,_)
THEN
DebugBreak("Missing DB_GLO_LevelTravelerName() entry for DB_GLO_LevelTraveler(), add it!");
DB_GLO_LevelTravelerName(_Char,"Missing");

// Set DB_HasMet entries for different items/characters representing the same persona
IF
DB_HasMet(_Npc,_Player,_ShapeShiftForm)
AND
DB_GLO_LevelTravelerName(_Npc,_Name)
AND
DB_GLO_LevelTravelerName(_OtherNpc,_Name)
AND
_NPC != _OtherNPC
THEN
DB_HasMet(_OtherNpc,_Player,_ShapeShiftForm);

PROC
Proc_Dialogs_CharactersHaveMetInThisShape((GUIDSTRING)_Npc,(CHARACTERGUID)_Player)
AND
DB_GLO_LevelTravelerName(_NPC,_Name)
AND
StringConcatenate("GLO_HasMet_",_Name,_HasMetFlag)
THEN
ObjectSetFlag(_Player,_HasMetFlag);

IF
DialogEnded(_,_ID)
AND
DB_DialogNPCs(_ID,_NPC,_)
AND
DB_GLO_LevelTravelerName(_NPC,_Name)
AND
StringConcatenate("GLO_HasMet_",_Name,_HasMetFlag)
AND
DB_DialogPlayers(_ID,_Player,_)
THEN
ObjectClearFlag((CHARACTERGUID)_Player,_HasMetFlag);

//END_REGION

//REGION Persistent level templates handling
// Prevent level travelers for the next level from getting teleported via the persistent
// level templates, as we check whether a character is already in the current level to
// determine whether or not we should still teleport it (to deal with teleporting to a
// subregion using the debug book, or starting in a subregion in the editor)
PROC
ProcRegionEnded(_)
AND
DB_CurrentLevel(_Level)
AND
DB_GLO_LevelTransition(_Level,_NewLevel)
AND
DB_GLO_LevelTraveler(_NewLevel,_Char,_,_,_,_,_)
AND
NOT DB_LevelTraveler_TempNoTemplateTransfer(_Char)
AND
IsTagged(_Char,"NO_LEVELTEMPLATE_TRANSFER",0)
THEN
SetTag(_Char,"NO_LEVELTEMPLATE_TRANSFER");
DB_LevelTraveler_TempNoTemplateTransfer(_Char);

IF
GameStarted(_,_)
AND
DB_LevelTraveler_TempNoTemplateTransfer(_Char)
THEN
NOT DB_LevelTraveler_TempNoTemplateTransfer(_Char);
ClearTag(_Char,"NO_LEVELTEMPLATE_TRANSFER");
//END_REGION

//REGION Debug helpers
IF
TextEventSet("allstartnpcs")
THEN
PROC_GLO_LevelTravelAgency_GetAllStartNPCsForCurrentRegion();

PROC
PROC_GLO_LevelTravelAgency_GetAllStartNPCsForCurrentRegion()
AND
DB_CurrentLevel(_Region)
AND
DB_GLO_LevelTraveler((STRING)_Region,(CHARACTERGUID)_Char,(TRIGGERGUID)_Dest,(STRING)_Dialog,(STRING)_StateManagerStateIfNotEmpty,(TRIGGERGUID)_MustBeInSourceTriggerIfNotNull,(INTEGER)_boolCanBeDead)
AND
NOT DB_GLO_LevelTravelAgency_Teleported(_Char,_Region)
THEN
DB_GLO_LevelTravelAgency_DoTeleport(1);
PROC_GLO_LevelTravelAgencyTeleportIfInSourceTrigger((STRING)_Region,(CHARACTERGUID)_Char,(TRIGGERGUID)_Dest,(STRING)_Dialog,(TRIGGERGUID)_MustBeInSourceTriggerIfNotNull,(STRING)_StateManagerStateIfNotEmpty);

PROC
PROC_GLO_LevelTravelAgency_GetStartNPCForCurrentRegion((CHARACTERGUID)_Char)
AND
DB_CurrentLevel(_Region)
AND
DB_GLO_LevelTraveler((STRING)_Region,(CHARACTERGUID)_Char,(TRIGGERGUID)_Dest,(STRING)_Dialog,(STRING)_StateManagerStateIfNotEmpty,(TRIGGERGUID)_MustBeInSourceTriggerIfNotNull,(INTEGER)_boolCanBeDead)
AND
NOT DB_GLO_LevelTravelAgency_Teleported(_Char,_Region)
THEN
DB_GLO_LevelTravelAgency_DoTeleport(1);
PROC_GLO_LevelTravelAgencyTeleportIfInSourceTrigger((STRING)_Region,(CHARACTERGUID)_Char,(TRIGGERGUID)_Dest,(STRING)_Dialog,(TRIGGERGUID)_MustBeInSourceTriggerIfNotNull,(STRING)_StateManagerStateIfNotEmpty);

//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "DOS2ModWrapper"

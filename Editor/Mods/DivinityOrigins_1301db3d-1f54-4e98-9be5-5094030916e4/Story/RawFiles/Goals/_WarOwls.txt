Version 1
SubGoalCombiner SGC_AND
INITSECTION
// DB_RC_WarOwls(_Owl, _Target, _Dialog, _Fightmode)
// DB_RC_WarOwls_Tags(_Owl, _Tag)
// DB_RC_WarOwls_AppearObject(_Owl, _Object)
// DB_RC_WarOwls_AppearSpawn(_Owl, _Location)
KBSECTION
//REGION Generic System
IF
DB_RC_WarOwls((CHARACTERGUID)_Owl, (CHARACTERGUID)_Target, (STRING)_, (INTEGER)_Fightmode)
THEN
ProcCharacterDisableAllCrimes(_Owl);
CharacterSetImmortal(_Owl, 1);
// Owls only keep flying if they are in fight mode
CharacterSetFightMode(_Owl, _FightMode, 1);
SetCanJoinCombat(_Owl, 0);
SetVarObject(_Owl, "Target", _Target);
SetOnStage(_Owl, 0);

PROC
PROC_RC_DispatchWarOwl((CHARACTERGUID)_Owl)
AND
DB_RC_WarOwls(_Owl, _Target, _, _)
AND
NOT QRY_RC_TrySendWarOwl(_Owl)
THEN
DB_RC_RegisteredWarOwl(_Owl, _Target);

IF
DialogEnded(_, _ID)
AND
DB_DialogPlayers(_ID, _Player, _)
AND
DB_RC_RegisteredWarOwl(_Owl, (CHARACTERGUID)_Player)
AND
QRY_RC_TrySendWarOwl(_Owl)
THEN
NOT DB_RC_RegisteredWarOwl(_Owl, _Player);

PROC
Proc_ObjectLeftCombat((CHARACTERGUID)_Player, _)
AND
DB_RC_RegisteredWarOwl(_Owl, _Player)
AND
QRY_RC_TrySendWarOwl(_Owl)
THEN
NOT DB_RC_RegisteredWarOwl(_Owl, _Player);

IF
CharacterResurrected(_Player)
AND
DB_RC_RegisteredWarOwl(_Owl, _Player)
AND
QRY_RC_TrySendWarOwl(_Owl)
THEN
NOT DB_RC_RegisteredWarOwl(_Owl, _Player);

IF
CharacterPolymorphedInto(_Player, _)
AND
DB_RC_RegisteredWarOwl(_Owl, _Player)
AND
QRY_RC_TrySendWarOwl(_Owl)
THEN
NOT DB_RC_RegisteredWarOwl(_Owl, _Player);

QRY
QRY_RC_TrySendWarOwl((CHARACTERGUID)_Owl)
AND
NOT QRY_RC_WarOwl_FailSpecificCheck((CHARACTERGUID)_Owl)
AND
DB_RC_WarOwls(_Owl, _Target, _, _)
AND
CharacterIsPolymorphInteractionDisabled(_Target, 0)
AND
QRY_SpeakerIsAvailable(_Target)
THEN
PROC_RC_WarOWl_Appear(_Owl, _Target);

PROC
PROC_RC_WarOWl_Appear((CHARACTERGUID)_Owl, (GUIDSTRING)_Target)
AND
DB_RC_WarOwls_AppearObject(_Owl, (GUIDSTRING)_AppearObject)
THEN
CharacterAppearOutOfSightToObject(_Owl,_Target,_AppearObject,0,"RC_OwlOnStage");

PROC
PROC_RC_WarOWl_Appear((CHARACTERGUID)_Owl, (GUIDSTRING)_Target)
AND
DB_RC_WarOwls_AppearSpawn(_Owl, _Location)
THEN
TeleportTo(_Owl, _Location);
CharacterFlushQueue(_Owl);
CharacterAppear(_Owl, 1, "RC_OwlOnStage");

PROC
PROC_RC_WarOWl_Appear((CHARACTERGUID)_Owl, (GUIDSTRING)_Target)
AND
NOT DB_RC_WarOwls_AppearSpawn(_Owl, _)
AND
NOT DB_RC_WarOwls_AppearObject(_Owl, _)
THEN
CharacterAppearOutOfSightTo(_Owl, _Target, 0, 0, "RC_OwlOnStage");


IF
StoryEvent((CHARACTERGUID)_Owl, "RC_OwlOnStage")
AND
DB_RC_WarOwls(_Owl, _Target, _, _)
THEN
CharacterMoveTo(_Owl, _Target, 1, "RC_OwlAtTarget", 0);

IF
CharacterCharacterEvent(_Owl, _Target, "RC_OwlStartDialog")
AND
DB_RC_WarOwls(_Owl, _Target, _Dialog, _)
AND
QRY_SpeakerIsAvailable(_Target, 1)
THEN
DB_RC_WarOwl_DialogStartAttempt(_Dialog, _Owl);
Proc_StartDialog(0, _Dialog, _Owl, _Target);

// Don't match _Dialog with the Owl dialog, so it also works for
// COM dialogs (or anything else that intercepts Proc_StartDialog())
IF
DialogRequestFailed(_Dialog, _ID)
AND
DB_RC_WarOwl_DialogStartAttempt(_OwlDialog, _Owl)
AND
DB_DialogNPCs(_ID, _Owl, 1)
THEN
NOT DB_RC_WarOwl_DialogStartAttempt(_OwlDialog, _Owl);

IF
DialogStarted(_Dialog, _ID)
AND
DB_RC_WarOwl_DialogStartAttempt(_OwlDialog, _Owl)
AND
DB_DialogNPCs(_ID, _Owl, 1)
THEN
SetStoryEvent(_Owl, "RC_OwlStopSpot");

IF
DialogEnded(_Dialog, _ID)
AND
DB_RC_WarOwl_DialogStartAttempt(_OwlDialog, _Owl)
AND
DB_DialogNPCs(_ID, _Owl, 1)
AND
DB_RC_WarOwls((CHARACTERGUID)_Owl, (CHARACTERGUID)_Target, (STRING)_OwlDialog, _)
THEN
NOT DB_RC_WarOwl_DialogStartAttempt(_OwlDialog, _Owl);
CharacterDisappearOutOfSight(_Owl, 0, 1, "", 0);

//END_REGION



//REGION Specific checks
QRY
QRY_RC_WarOwl_FailSpecificCheck((CHARACTERGUID)_Owl)
AND
DB_RC_WarOwls_Tags(_Owl, _Tag)
AND
DB_RC_WarOwls(_Owl, _Target, _, _)
AND
IsTagged(_Target, _Tag, 0)
THEN
DB_NOOP(0);
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "Start"
